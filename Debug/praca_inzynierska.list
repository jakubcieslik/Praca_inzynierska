
praca_inzynierska.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c2c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08005d40  08005d40  00015d40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006164  08006164  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006164  08006164  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006164  08006164  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006164  08006164  00016164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006168  08006168  00016168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800616c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  200001dc  08006348  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08006348  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095dd  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001abc  00000000  00000000  000297e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  0002b2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e8  00000000  00000000  0002bb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018377  00000000  00000000  0002c328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6eb  00000000  00000000  0004469f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088a14  00000000  00000000  0004ed8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d779e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000327c  00000000  00000000  000d77f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005d24 	.word	0x08005d24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005d24 	.word	0x08005d24

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__io_putchar>:

bool value1=0;
bool value2=0;

int __io_putchar(int ch)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b0a      	cmp	r3, #10
 8000a94:	d102      	bne.n	8000a9c <__io_putchar+0x14>
    __io_putchar('\r');
 8000a96:	200d      	movs	r0, #13
 8000a98:	f7ff fff6 	bl	8000a88 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000a9c:	1d39      	adds	r1, r7, #4
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <__io_putchar+0x2c>)
 8000aa6:	f002 f9f1 	bl	8002e8c <HAL_UART_Transmit>

  return 1;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000228 	.word	0x20000228

08000ab8 <printBinary>:
		        for (int i = 0; i < bitsToPrint; i++) {
		        	putchar((byte & (1 << i)) ? '1' : '0');
		        }
	}
}*/
void printBinary(struct BitBuffer *buff) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
    int totalBits = buff->bitCount;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
    int byteIndex = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
    int bitIndex = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]

    while (totalBits > 0) {
 8000ad0:	e02d      	b.n	8000b2e <printBinary+0x76>
        // Pobieramy aktualny bajt z tablicy data
        uint8_t currentByte = buff->data[byteIndex];
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	6a3b      	ldr	r3, [r7, #32]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	75fb      	strb	r3, [r7, #23]

        // Określamy, ile bitów możemy wypisać z tego bajta
        int bitsToPrint = (totalBits < 8) ? totalBits : 8;
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	2b08      	cmp	r3, #8
 8000ae0:	bfa8      	it	ge
 8000ae2:	2308      	movge	r3, #8
 8000ae4:	613b      	str	r3, [r7, #16]

        // Wypisujemy kolejne bity z aktualnego bajta
        for (int i = 0; i < bitsToPrint; i++) {
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61bb      	str	r3, [r7, #24]
 8000aea:	e018      	b.n	8000b1e <printBinary+0x66>
            int bitValue = (currentByte >> bitIndex) & 1;
 8000aec:	7dfa      	ldrb	r2, [r7, #23]
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	fa42 f303 	asr.w	r3, r2, r3
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
            printf("%d", bitValue);
 8000afa:	68f9      	ldr	r1, [r7, #12]
 8000afc:	4810      	ldr	r0, [pc, #64]	; (8000b40 <printBinary+0x88>)
 8000afe:	f002 ffd7 	bl	8003ab0 <iprintf>
            bitIndex++;
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3301      	adds	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]

            if (bitIndex == 8) {
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	2b08      	cmp	r3, #8
 8000b0c:	d104      	bne.n	8000b18 <printBinary+0x60>
                bitIndex = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
                byteIndex++;
 8000b12:	6a3b      	ldr	r3, [r7, #32]
 8000b14:	3301      	adds	r3, #1
 8000b16:	623b      	str	r3, [r7, #32]
        for (int i = 0; i < bitsToPrint; i++) {
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	dbe2      	blt.n	8000aec <printBinary+0x34>
            }
        }
        totalBits -= bitsToPrint;
 8000b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
    while (totalBits > 0) {
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	dcce      	bgt.n	8000ad2 <printBinary+0x1a>
    }
}
 8000b34:	bf00      	nop
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	; 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	08005d40 	.word	0x08005d40

08000b44 <initializeBuffer>:
void initializeBuffer(struct BitBuffer *buffer) {
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < BUFFER_SIZE / 8; i++) {
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	e007      	b.n	8000b62 <initializeBuffer+0x1e>
        buffer->data[i] = 0b00000000;
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4413      	add	r3, r2
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BUFFER_SIZE / 8; i++) {
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	2b7f      	cmp	r3, #127	; 0x7f
 8000b66:	ddf4      	ble.n	8000b52 <initializeBuffer+0xe>
    }
    buffer->bitCount = 0;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr

08000b7a <whitening>:

void whitening(uint8_t *data, struct BitBuffer *buffer) {
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b086      	sub	sp, #24
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	6039      	str	r1, [r7, #0]
	 for (size_t i = 0; i < BUFFER_SIZE/8; i++) {
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	e034      	b.n	8000bf4 <whitening+0x7a>
	        uint8_t originalByte = data[i];
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	4413      	add	r3, r2
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	73fb      	strb	r3, [r7, #15]
	        bool bit1 = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	73bb      	strb	r3, [r7, #14]
	        bool bit2 = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	737b      	strb	r3, [r7, #13]
	        // Przejście przez każdy bit bajtu i sprawdzenie pary bitów
	        for (int bitIndex = 0; bitIndex < 8; bitIndex += 2) {
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	e022      	b.n	8000be8 <whitening+0x6e>
	            bit1 = (originalByte >> bitIndex) & 1;
 8000ba2:	7bfa      	ldrb	r2, [r7, #15]
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	fa42 f303 	asr.w	r3, r2, r3
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	bf14      	ite	ne
 8000bb2:	2301      	movne	r3, #1
 8000bb4:	2300      	moveq	r3, #0
 8000bb6:	73bb      	strb	r3, [r7, #14]
	            bit2 = (originalByte >> (bitIndex + 1)) & 1;
 8000bb8:	7bfa      	ldrb	r2, [r7, #15]
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	fa42 f303 	asr.w	r3, r2, r3
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	bf14      	ite	ne
 8000bca:	2301      	movne	r3, #1
 8000bcc:	2300      	moveq	r3, #0
 8000bce:	737b      	strb	r3, [r7, #13]

	            if (bit1 != bit2) {
 8000bd0:	7bba      	ldrb	r2, [r7, #14]
 8000bd2:	7b7b      	ldrb	r3, [r7, #13]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d004      	beq.n	8000be2 <whitening+0x68>
	                // Jeśli bity są różne, zachowaj pierwszy
	                addToBuffer(buffer, bit1);
 8000bd8:	7bbb      	ldrb	r3, [r7, #14]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	6838      	ldr	r0, [r7, #0]
 8000bde:	f000 f841 	bl	8000c64 <addToBuffer>
	        for (int bitIndex = 0; bitIndex < 8; bitIndex += 2) {
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	3302      	adds	r3, #2
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	2b07      	cmp	r3, #7
 8000bec:	ddd9      	ble.n	8000ba2 <whitening+0x28>
	 for (size_t i = 0; i < BUFFER_SIZE/8; i++) {
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8000bf8:	d9c7      	bls.n	8000b8a <whitening+0x10>
	            }
	        }
	    }
}
 8000bfa:	bf00      	nop
 8000bfc:	bf00      	nop
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <BufferFull>:

void BufferFull(void) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0

	whitening(buffer.data, &whitened_bits1);
 8000c08:	4912      	ldr	r1, [pc, #72]	; (8000c54 <BufferFull+0x50>)
 8000c0a:	4813      	ldr	r0, [pc, #76]	; (8000c58 <BufferFull+0x54>)
 8000c0c:	f7ff ffb5 	bl	8000b7a <whitening>
	whitening(whitened_bits1.data, &whitened_bits2);
 8000c10:	4912      	ldr	r1, [pc, #72]	; (8000c5c <BufferFull+0x58>)
 8000c12:	4810      	ldr	r0, [pc, #64]	; (8000c54 <BufferFull+0x50>)
 8000c14:	f7ff ffb1 	bl	8000b7a <whitening>

	printBinary(&buffer);
 8000c18:	480f      	ldr	r0, [pc, #60]	; (8000c58 <BufferFull+0x54>)
 8000c1a:	f7ff ff4d 	bl	8000ab8 <printBinary>
	printf("stop");
 8000c1e:	4810      	ldr	r0, [pc, #64]	; (8000c60 <BufferFull+0x5c>)
 8000c20:	f002 ff46 	bl	8003ab0 <iprintf>
	printBinary(&whitened_bits1);
 8000c24:	480b      	ldr	r0, [pc, #44]	; (8000c54 <BufferFull+0x50>)
 8000c26:	f7ff ff47 	bl	8000ab8 <printBinary>
	printf("stop");
 8000c2a:	480d      	ldr	r0, [pc, #52]	; (8000c60 <BufferFull+0x5c>)
 8000c2c:	f002 ff40 	bl	8003ab0 <iprintf>
	printBinary(&whitened_bits2);
 8000c30:	480a      	ldr	r0, [pc, #40]	; (8000c5c <BufferFull+0x58>)
 8000c32:	f7ff ff41 	bl	8000ab8 <printBinary>
	printf("stop\n");
 8000c36:	480a      	ldr	r0, [pc, #40]	; (8000c60 <BufferFull+0x5c>)
 8000c38:	f002 ffc0 	bl	8003bbc <puts>
	//while(1){}//petla nieskonczona dla testow

    initializeBuffer(&buffer);
 8000c3c:	4806      	ldr	r0, [pc, #24]	; (8000c58 <BufferFull+0x54>)
 8000c3e:	f7ff ff81 	bl	8000b44 <initializeBuffer>
    initializeBuffer(&whitened_bits1);
 8000c42:	4804      	ldr	r0, [pc, #16]	; (8000c54 <BufferFull+0x50>)
 8000c44:	f7ff ff7e 	bl	8000b44 <initializeBuffer>
    initializeBuffer(&whitened_bits2);
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <BufferFull+0x58>)
 8000c4a:	f7ff ff7b 	bl	8000b44 <initializeBuffer>
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200002f8 	.word	0x200002f8
 8000c58:	20000274 	.word	0x20000274
 8000c5c:	2000037c 	.word	0x2000037c
 8000c60:	08005d44 	.word	0x08005d44

08000c64 <addToBuffer>:

void addToBuffer(struct BitBuffer *buffer, bool bit) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	70fb      	strb	r3, [r7, #3]
    if (buffer->bitCount < BUFFER_SIZE) {
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c7a:	da2c      	bge.n	8000cd6 <addToBuffer+0x72>
        int byteIndex = buffer->bitCount / 8;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	da00      	bge.n	8000c88 <addToBuffer+0x24>
 8000c86:	3307      	adds	r3, #7
 8000c88:	10db      	asrs	r3, r3, #3
 8000c8a:	60fb      	str	r3, [r7, #12]
        int bitIndex = buffer->bitCount % 8;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c92:	425a      	negs	r2, r3
 8000c94:	f003 0307 	and.w	r3, r3, #7
 8000c98:	f002 0207 	and.w	r2, r2, #7
 8000c9c:	bf58      	it	pl
 8000c9e:	4253      	negpl	r3, r2
 8000ca0:	60bb      	str	r3, [r7, #8]

        // Ustaw odpowiedni bit w bajcie
        buffer->data[byteIndex] |= (bit << bitIndex);
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	b25a      	sxtb	r2, r3
 8000cac:	78f9      	ldrb	r1, [r7, #3]
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb4:	b25b      	sxtb	r3, r3
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	b25b      	sxtb	r3, r3
 8000cba:	b2d9      	uxtb	r1, r3
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	460a      	mov	r2, r1
 8000cc4:	701a      	strb	r2, [r3, #0]
        buffer->bitCount++;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ccc:	1c5a      	adds	r2, r3, #1
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
    else{
    	BufferFull();
    	//wywolanie funkcji bufferfull jesli bufor jest pelny
    }
}
 8000cd4:	e001      	b.n	8000cda <addToBuffer+0x76>
    	BufferFull();
 8000cd6:	f7ff ff95 	bl	8000c04 <BufferFull>
}
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce8:	f000 fb48 	bl	800137c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cec:	f000 f848 	bl	8000d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf0:	f000 f90a 	bl	8000f08 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000cf4:	f000 f8a0 	bl	8000e38 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000cf8:	f000 f8dc 	bl	8000eb4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000cfc:	481c      	ldr	r0, [pc, #112]	; (8000d70 <main+0x8c>)
 8000cfe:	f000 ffcb 	bl	8001c98 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8000d02:	481b      	ldr	r0, [pc, #108]	; (8000d70 <main+0x8c>)
 8000d04:	f000 fc74 	bl	80015f0 <HAL_ADC_Start>
  initializeBuffer(&buffer);
 8000d08:	481a      	ldr	r0, [pc, #104]	; (8000d74 <main+0x90>)
 8000d0a:	f7ff ff1b 	bl	8000b44 <initializeBuffer>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000d0e:	f04f 31ff 	mov.w	r1, #4294967295
 8000d12:	4817      	ldr	r0, [pc, #92]	; (8000d70 <main+0x8c>)
 8000d14:	f000 fd1a 	bl	800174c <HAL_ADC_PollForConversion>
    value1 = (HAL_ADC_GetValue(&hadc1)%2);
 8000d18:	4815      	ldr	r0, [pc, #84]	; (8000d70 <main+0x8c>)
 8000d1a:	f000 fe1d 	bl	8001958 <HAL_ADC_GetValue>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	bf14      	ite	ne
 8000d28:	2301      	movne	r3, #1
 8000d2a:	2300      	moveq	r3, #0
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <main+0x94>)
 8000d30:	701a      	strb	r2, [r3, #0]
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000d32:	f04f 31ff 	mov.w	r1, #4294967295
 8000d36:	480e      	ldr	r0, [pc, #56]	; (8000d70 <main+0x8c>)
 8000d38:	f000 fd08 	bl	800174c <HAL_ADC_PollForConversion>
    value2 = (HAL_ADC_GetValue(&hadc1)%2);
 8000d3c:	480c      	ldr	r0, [pc, #48]	; (8000d70 <main+0x8c>)
 8000d3e:	f000 fe0b 	bl	8001958 <HAL_ADC_GetValue>
 8000d42:	4603      	mov	r3, r0
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	bf14      	ite	ne
 8000d4c:	2301      	movne	r3, #1
 8000d4e:	2300      	moveq	r3, #0
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <main+0x98>)
 8000d54:	701a      	strb	r2, [r3, #0]
    addToBuffer(&buffer, value1);
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <main+0x94>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <main+0x90>)
 8000d5e:	f7ff ff81 	bl	8000c64 <addToBuffer>
    addToBuffer(&buffer, value2);
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <main+0x98>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	4619      	mov	r1, r3
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <main+0x90>)
 8000d6a:	f7ff ff7b 	bl	8000c64 <addToBuffer>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000d6e:	e7ce      	b.n	8000d0e <main+0x2a>
 8000d70:	200001f8 	.word	0x200001f8
 8000d74:	20000274 	.word	0x20000274
 8000d78:	20000270 	.word	0x20000270
 8000d7c:	20000271 	.word	0x20000271

08000d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b094      	sub	sp, #80	; 0x50
 8000d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d8a:	2228      	movs	r2, #40	; 0x28
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f002 fa26 	bl	80031e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000db0:	2301      	movs	r3, #1
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000db4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dcc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 fa8c 	bl	80022f4 <HAL_RCC_OscConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000de2:	f000 f8cf 	bl	8000f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de6:	230f      	movs	r3, #15
 8000de8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dea:	2302      	movs	r3, #2
 8000dec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2102      	movs	r1, #2
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 fcf8 	bl	80027f8 <HAL_RCC_ClockConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e0e:	f000 f8b9 	bl	8000f84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e12:	2302      	movs	r3, #2
 8000e14:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e1a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 fe78 	bl	8002b14 <HAL_RCCEx_PeriphCLKConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e2a:	f000 f8ab 	bl	8000f84 <Error_Handler>
  }
}
 8000e2e:	bf00      	nop
 8000e30:	3750      	adds	r7, #80	; 0x50
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e48:	4b18      	ldr	r3, [pc, #96]	; (8000eac <MX_ADC1_Init+0x74>)
 8000e4a:	4a19      	ldr	r2, [pc, #100]	; (8000eb0 <MX_ADC1_Init+0x78>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e4e:	4b17      	ldr	r3, [pc, #92]	; (8000eac <MX_ADC1_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e54:	4b15      	ldr	r3, [pc, #84]	; (8000eac <MX_ADC1_Init+0x74>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e5a:	4b14      	ldr	r3, [pc, #80]	; (8000eac <MX_ADC1_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <MX_ADC1_Init+0x74>)
 8000e62:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e68:	4b10      	ldr	r3, [pc, #64]	; (8000eac <MX_ADC1_Init+0x74>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_ADC1_Init+0x74>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <MX_ADC1_Init+0x74>)
 8000e76:	f000 fae3 	bl	8001440 <HAL_ADC_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000e80:	f000 f880 	bl	8000f84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_ADC1_Init+0x74>)
 8000e96:	f000 fd6b 	bl	8001970 <HAL_ADC_ConfigChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ea0:	f000 f870 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200001f8 	.word	0x200001f8
 8000eb0:	40012400 	.word	0x40012400

08000eb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <MX_USART2_UART_Init+0x50>)
 8000ebc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ec0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000eda:	220c      	movs	r2, #12
 8000edc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000eec:	f001 ff7e 	bl	8002dec <HAL_UART_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ef6:	f000 f845 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000228 	.word	0x20000228
 8000f04:	40004400 	.word	0x40004400

08000f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 0308 	add.w	r3, r7, #8
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <MX_GPIO_Init+0x74>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a16      	ldr	r2, [pc, #88]	; (8000f7c <MX_GPIO_Init+0x74>)
 8000f22:	f043 0320 	orr.w	r3, r3, #32
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_GPIO_Init+0x74>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0320 	and.w	r3, r3, #32
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_GPIO_Init+0x74>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <MX_GPIO_Init+0x74>)
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_GPIO_Init+0x74>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2120      	movs	r1, #32
 8000f50:	480b      	ldr	r0, [pc, #44]	; (8000f80 <MX_GPIO_Init+0x78>)
 8000f52:	f001 f9b7 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f56:	2320      	movs	r3, #32
 8000f58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2302      	movs	r3, #2
 8000f64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 0308 	add.w	r3, r7, #8
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4804      	ldr	r0, [pc, #16]	; (8000f80 <MX_GPIO_Init+0x78>)
 8000f6e:	f001 f825 	bl	8001fbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40010800 	.word	0x40010800

08000f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f88:	b672      	cpsid	i
}
 8000f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <Error_Handler+0x8>
	...

08000f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_MspInit+0x5c>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	4a14      	ldr	r2, [pc, #80]	; (8000fec <HAL_MspInit+0x5c>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6193      	str	r3, [r2, #24]
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_MspInit+0x5c>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <HAL_MspInit+0x5c>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <HAL_MspInit+0x5c>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	61d3      	str	r3, [r2, #28]
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <HAL_MspInit+0x5c>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_MspInit+0x60>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_MspInit+0x60>)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010000 	.word	0x40010000

08000ff4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0318 	add.w	r3, r7, #24
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a28      	ldr	r2, [pc, #160]	; (80010b0 <HAL_ADC_MspInit+0xbc>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d122      	bne.n	800105a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001014:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <HAL_ADC_MspInit+0xc0>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a26      	ldr	r2, [pc, #152]	; (80010b4 <HAL_ADC_MspInit+0xc0>)
 800101a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <HAL_ADC_MspInit+0xc0>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <HAL_ADC_MspInit+0xc0>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a20      	ldr	r2, [pc, #128]	; (80010b4 <HAL_ADC_MspInit+0xc0>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <HAL_ADC_MspInit+0xc0>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001044:	2301      	movs	r3, #1
 8001046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001048:	2303      	movs	r3, #3
 800104a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0318 	add.w	r3, r7, #24
 8001050:	4619      	mov	r1, r3
 8001052:	4819      	ldr	r0, [pc, #100]	; (80010b8 <HAL_ADC_MspInit+0xc4>)
 8001054:	f000 ffb2 	bl	8001fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001058:	e026      	b.n	80010a8 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a17      	ldr	r2, [pc, #92]	; (80010bc <HAL_ADC_MspInit+0xc8>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d121      	bne.n	80010a8 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <HAL_ADC_MspInit+0xc0>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <HAL_ADC_MspInit+0xc0>)
 800106a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_ADC_MspInit+0xc0>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <HAL_ADC_MspInit+0xc0>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a0c      	ldr	r2, [pc, #48]	; (80010b4 <HAL_ADC_MspInit+0xc0>)
 8001082:	f043 0304 	orr.w	r3, r3, #4
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <HAL_ADC_MspInit+0xc0>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001094:	2302      	movs	r3, #2
 8001096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001098:	2303      	movs	r3, #3
 800109a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	f107 0318 	add.w	r3, r7, #24
 80010a0:	4619      	mov	r1, r3
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <HAL_ADC_MspInit+0xc4>)
 80010a4:	f000 ff8a 	bl	8001fbc <HAL_GPIO_Init>
}
 80010a8:	bf00      	nop
 80010aa:	3728      	adds	r7, #40	; 0x28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40012400 	.word	0x40012400
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40010800 	.word	0x40010800
 80010bc:	40012800 	.word	0x40012800

080010c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a1b      	ldr	r2, [pc, #108]	; (8001148 <HAL_UART_MspInit+0x88>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d12f      	bne.n	8001140 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <HAL_UART_MspInit+0x8c>)
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	4a19      	ldr	r2, [pc, #100]	; (800114c <HAL_UART_MspInit+0x8c>)
 80010e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ea:	61d3      	str	r3, [r2, #28]
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_UART_MspInit+0x8c>)
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_UART_MspInit+0x8c>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a13      	ldr	r2, [pc, #76]	; (800114c <HAL_UART_MspInit+0x8c>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_UART_MspInit+0x8c>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001110:	2304      	movs	r3, #4
 8001112:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	4619      	mov	r1, r3
 8001122:	480b      	ldr	r0, [pc, #44]	; (8001150 <HAL_UART_MspInit+0x90>)
 8001124:	f000 ff4a 	bl	8001fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001128:	2308      	movs	r3, #8
 800112a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	4619      	mov	r1, r3
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <HAL_UART_MspInit+0x90>)
 800113c:	f000 ff3e 	bl	8001fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001140:	bf00      	nop
 8001142:	3720      	adds	r7, #32
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40004400 	.word	0x40004400
 800114c:	40021000 	.word	0x40021000
 8001150:	40010800 	.word	0x40010800

08001154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <NMI_Handler+0x4>

0800115a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115e:	e7fe      	b.n	800115e <HardFault_Handler+0x4>

08001160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <MemManage_Handler+0x4>

08001166 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <BusFault_Handler+0x4>

0800116c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <UsageFault_Handler+0x4>

08001172 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr

0800117e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr

0800118a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr

08001196 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119a:	f000 f935 	bl	8001408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  return 1;
 80011a6:	2301      	movs	r3, #1
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <_kill>:

int _kill(int pid, int sig)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011ba:	f001 ffe7 	bl	800318c <__errno>
 80011be:	4603      	mov	r3, r0
 80011c0:	2216      	movs	r2, #22
 80011c2:	601a      	str	r2, [r3, #0]
  return -1;
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <_exit>:

void _exit (int status)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ffe7 	bl	80011b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011e2:	e7fe      	b.n	80011e2 <_exit+0x12>

080011e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	e00a      	b.n	800120c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011f6:	f3af 8000 	nop.w
 80011fa:	4601      	mov	r1, r0
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	60ba      	str	r2, [r7, #8]
 8001202:	b2ca      	uxtb	r2, r1
 8001204:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3301      	adds	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	429a      	cmp	r2, r3
 8001212:	dbf0      	blt.n	80011f6 <_read+0x12>
  }

  return len;
 8001214:	687b      	ldr	r3, [r7, #4]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	60f8      	str	r0, [r7, #12]
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	e009      	b.n	8001244 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	60ba      	str	r2, [r7, #8]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fc25 	bl	8000a88 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	429a      	cmp	r2, r3
 800124a:	dbf1      	blt.n	8001230 <_write+0x12>
  }
  return len;
 800124c:	687b      	ldr	r3, [r7, #4]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <_close>:

int _close(int file)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800127c:	605a      	str	r2, [r3, #4]
  return 0;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr

0800128a <_isatty>:

int _isatty(int file)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800129e:	b480      	push	{r7}
 80012a0:	b085      	sub	sp, #20
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60f8      	str	r0, [r7, #12]
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
	...

080012b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c0:	4a14      	ldr	r2, [pc, #80]	; (8001314 <_sbrk+0x5c>)
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <_sbrk+0x60>)
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <_sbrk+0x64>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d102      	bne.n	80012da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <_sbrk+0x64>)
 80012d6:	4a12      	ldr	r2, [pc, #72]	; (8001320 <_sbrk+0x68>)
 80012d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <_sbrk+0x64>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d207      	bcs.n	80012f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e8:	f001 ff50 	bl	800318c <__errno>
 80012ec:	4603      	mov	r3, r0
 80012ee:	220c      	movs	r2, #12
 80012f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	e009      	b.n	800130c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <_sbrk+0x64>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	4a05      	ldr	r2, [pc, #20]	; (800131c <_sbrk+0x64>)
 8001308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800130a:	68fb      	ldr	r3, [r7, #12]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20005000 	.word	0x20005000
 8001318:	00000400 	.word	0x00000400
 800131c:	20000400 	.word	0x20000400
 8001320:	20000418 	.word	0x20000418

08001324 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001330:	f7ff fff8 	bl	8001324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001334:	480b      	ldr	r0, [pc, #44]	; (8001364 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001336:	490c      	ldr	r1, [pc, #48]	; (8001368 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001338:	4a0c      	ldr	r2, [pc, #48]	; (800136c <LoopFillZerobss+0x16>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800133c:	e002      	b.n	8001344 <LoopCopyDataInit>

0800133e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001342:	3304      	adds	r3, #4

08001344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001348:	d3f9      	bcc.n	800133e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134a:	4a09      	ldr	r2, [pc, #36]	; (8001370 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800134c:	4c09      	ldr	r4, [pc, #36]	; (8001374 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001350:	e001      	b.n	8001356 <LoopFillZerobss>

08001352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001354:	3204      	adds	r2, #4

08001356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001358:	d3fb      	bcc.n	8001352 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800135a:	f001 ff1d 	bl	8003198 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800135e:	f7ff fcc1 	bl	8000ce4 <main>
  bx lr
 8001362:	4770      	bx	lr
  ldr r0, =_sdata
 8001364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001368:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800136c:	0800616c 	.word	0x0800616c
  ldr r2, =_sbss
 8001370:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001374:	20000418 	.word	0x20000418

08001378 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC1_2_IRQHandler>
	...

0800137c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_Init+0x28>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <HAL_Init+0x28>)
 8001386:	f043 0310 	orr.w	r3, r3, #16
 800138a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138c:	2003      	movs	r0, #3
 800138e:	f000 fde1 	bl	8001f54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001392:	200f      	movs	r0, #15
 8001394:	f000 f808 	bl	80013a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001398:	f7ff fdfa 	bl	8000f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40022000 	.word	0x40022000

080013a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_InitTick+0x54>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_InitTick+0x58>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 fdeb 	bl	8001fa2 <HAL_SYSTICK_Config>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00e      	b.n	80013f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d80a      	bhi.n	80013f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013dc:	2200      	movs	r2, #0
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f000 fdc1 	bl	8001f6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e8:	4a06      	ldr	r2, [pc, #24]	; (8001404 <HAL_InitTick+0x5c>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e000      	b.n	80013f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000000 	.word	0x20000000
 8001400:	20000008 	.word	0x20000008
 8001404:	20000004 	.word	0x20000004

08001408 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <HAL_IncTick+0x1c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_IncTick+0x20>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	4a03      	ldr	r2, [pc, #12]	; (8001428 <HAL_IncTick+0x20>)
 800141a:	6013      	str	r3, [r2, #0]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	20000008 	.word	0x20000008
 8001428:	20000404 	.word	0x20000404

0800142c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return uwTick;
 8001430:	4b02      	ldr	r3, [pc, #8]	; (800143c <HAL_GetTick+0x10>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	20000404 	.word	0x20000404

08001440 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800144c:	2300      	movs	r3, #0
 800144e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e0be      	b.n	80015e0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146c:	2b00      	cmp	r3, #0
 800146e:	d109      	bne.n	8001484 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff fdb8 	bl	8000ff4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 fbc5 	bl	8001c14 <ADC_ConversionStop_Disable>
 800148a:	4603      	mov	r3, r0
 800148c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001492:	f003 0310 	and.w	r3, r3, #16
 8001496:	2b00      	cmp	r3, #0
 8001498:	f040 8099 	bne.w	80015ce <HAL_ADC_Init+0x18e>
 800149c:	7dfb      	ldrb	r3, [r7, #23]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f040 8095 	bne.w	80015ce <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014ac:	f023 0302 	bic.w	r3, r3, #2
 80014b0:	f043 0202 	orr.w	r2, r3, #2
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	7b1b      	ldrb	r3, [r3, #12]
 80014c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014d8:	d003      	beq.n	80014e2 <HAL_ADC_Init+0xa2>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d102      	bne.n	80014e8 <HAL_ADC_Init+0xa8>
 80014e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014e6:	e000      	b.n	80014ea <HAL_ADC_Init+0xaa>
 80014e8:	2300      	movs	r3, #0
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	7d1b      	ldrb	r3, [r3, #20]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d119      	bne.n	800152c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7b1b      	ldrb	r3, [r3, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d109      	bne.n	8001514 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	3b01      	subs	r3, #1
 8001506:	035a      	lsls	r2, r3, #13
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4313      	orrs	r3, r2
 800150c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	e00b      	b.n	800152c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001518:	f043 0220 	orr.w	r2, r3, #32
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	f043 0201 	orr.w	r2, r3, #1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	430a      	orrs	r2, r1
 800153e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <HAL_ADC_Init+0x1a8>)
 8001548:	4013      	ands	r3, r2
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	68b9      	ldr	r1, [r7, #8]
 8001550:	430b      	orrs	r3, r1
 8001552:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800155c:	d003      	beq.n	8001566 <HAL_ADC_Init+0x126>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d104      	bne.n	8001570 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	3b01      	subs	r3, #1
 800156c:	051b      	lsls	r3, r3, #20
 800156e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	430a      	orrs	r2, r1
 8001582:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	4b18      	ldr	r3, [pc, #96]	; (80015ec <HAL_ADC_Init+0x1ac>)
 800158c:	4013      	ands	r3, r2
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	429a      	cmp	r2, r3
 8001592:	d10b      	bne.n	80015ac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159e:	f023 0303 	bic.w	r3, r3, #3
 80015a2:	f043 0201 	orr.w	r2, r3, #1
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015aa:	e018      	b.n	80015de <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	f023 0312 	bic.w	r3, r3, #18
 80015b4:	f043 0210 	orr.w	r2, r3, #16
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c0:	f043 0201 	orr.w	r2, r3, #1
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015cc:	e007      	b.n	80015de <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d2:	f043 0210 	orr.w	r2, r3, #16
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015de:	7dfb      	ldrb	r3, [r7, #23]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	ffe1f7fd 	.word	0xffe1f7fd
 80015ec:	ff1f0efe 	.word	0xff1f0efe

080015f0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001602:	2b01      	cmp	r3, #1
 8001604:	d101      	bne.n	800160a <HAL_ADC_Start+0x1a>
 8001606:	2302      	movs	r3, #2
 8001608:	e098      	b.n	800173c <HAL_ADC_Start+0x14c>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 faa4 	bl	8001b60 <ADC_Enable>
 8001618:	4603      	mov	r3, r0
 800161a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	2b00      	cmp	r3, #0
 8001620:	f040 8087 	bne.w	8001732 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800162c:	f023 0301 	bic.w	r3, r3, #1
 8001630:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a41      	ldr	r2, [pc, #260]	; (8001744 <HAL_ADC_Start+0x154>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d105      	bne.n	800164e <HAL_ADC_Start+0x5e>
 8001642:	4b41      	ldr	r3, [pc, #260]	; (8001748 <HAL_ADC_Start+0x158>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d115      	bne.n	800167a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001652:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001664:	2b00      	cmp	r3, #0
 8001666:	d026      	beq.n	80016b6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001670:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001678:	e01d      	b.n	80016b6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a2f      	ldr	r2, [pc, #188]	; (8001748 <HAL_ADC_Start+0x158>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d004      	beq.n	800169a <HAL_ADC_Start+0xaa>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a2b      	ldr	r2, [pc, #172]	; (8001744 <HAL_ADC_Start+0x154>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d10d      	bne.n	80016b6 <HAL_ADC_Start+0xc6>
 800169a:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <HAL_ADC_Start+0x158>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d007      	beq.n	80016b6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d006      	beq.n	80016d0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	f023 0206 	bic.w	r2, r3, #6
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80016ce:	e002      	b.n	80016d6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f06f 0202 	mvn.w	r2, #2
 80016e6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016f2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016f6:	d113      	bne.n	8001720 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016fc:	4a11      	ldr	r2, [pc, #68]	; (8001744 <HAL_ADC_Start+0x154>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d105      	bne.n	800170e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_ADC_Start+0x158>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800170a:	2b00      	cmp	r3, #0
 800170c:	d108      	bne.n	8001720 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	e00c      	b.n	800173a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	e003      	b.n	800173a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800173a:	7bfb      	ldrb	r3, [r7, #15]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40012800 	.word	0x40012800
 8001748:	40012400 	.word	0x40012400

0800174c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001762:	f7ff fe63 	bl	800142c <HAL_GetTick>
 8001766:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00b      	beq.n	800178e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177a:	f043 0220 	orr.w	r2, r3, #32
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e0d3      	b.n	8001936 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d131      	bne.n	8001800 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d12a      	bne.n	8001800 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80017aa:	e021      	b.n	80017f0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b2:	d01d      	beq.n	80017f0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d007      	beq.n	80017ca <HAL_ADC_PollForConversion+0x7e>
 80017ba:	f7ff fe37 	bl	800142c <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d212      	bcs.n	80017f0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10b      	bne.n	80017f0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017dc:	f043 0204 	orr.w	r2, r3, #4
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e0a2      	b.n	8001936 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0d6      	beq.n	80017ac <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80017fe:	e070      	b.n	80018e2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001800:	4b4f      	ldr	r3, [pc, #316]	; (8001940 <HAL_ADC_PollForConversion+0x1f4>)
 8001802:	681c      	ldr	r4, [r3, #0]
 8001804:	2002      	movs	r0, #2
 8001806:	f001 fa3b 	bl	8002c80 <HAL_RCCEx_GetPeriphCLKFreq>
 800180a:	4603      	mov	r3, r0
 800180c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6919      	ldr	r1, [r3, #16]
 8001816:	4b4b      	ldr	r3, [pc, #300]	; (8001944 <HAL_ADC_PollForConversion+0x1f8>)
 8001818:	400b      	ands	r3, r1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d118      	bne.n	8001850 <HAL_ADC_PollForConversion+0x104>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68d9      	ldr	r1, [r3, #12]
 8001824:	4b48      	ldr	r3, [pc, #288]	; (8001948 <HAL_ADC_PollForConversion+0x1fc>)
 8001826:	400b      	ands	r3, r1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d111      	bne.n	8001850 <HAL_ADC_PollForConversion+0x104>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6919      	ldr	r1, [r3, #16]
 8001832:	4b46      	ldr	r3, [pc, #280]	; (800194c <HAL_ADC_PollForConversion+0x200>)
 8001834:	400b      	ands	r3, r1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d108      	bne.n	800184c <HAL_ADC_PollForConversion+0x100>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68d9      	ldr	r1, [r3, #12]
 8001840:	4b43      	ldr	r3, [pc, #268]	; (8001950 <HAL_ADC_PollForConversion+0x204>)
 8001842:	400b      	ands	r3, r1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_ADC_PollForConversion+0x100>
 8001848:	2314      	movs	r3, #20
 800184a:	e020      	b.n	800188e <HAL_ADC_PollForConversion+0x142>
 800184c:	2329      	movs	r3, #41	; 0x29
 800184e:	e01e      	b.n	800188e <HAL_ADC_PollForConversion+0x142>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6919      	ldr	r1, [r3, #16]
 8001856:	4b3d      	ldr	r3, [pc, #244]	; (800194c <HAL_ADC_PollForConversion+0x200>)
 8001858:	400b      	ands	r3, r1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d106      	bne.n	800186c <HAL_ADC_PollForConversion+0x120>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68d9      	ldr	r1, [r3, #12]
 8001864:	4b3a      	ldr	r3, [pc, #232]	; (8001950 <HAL_ADC_PollForConversion+0x204>)
 8001866:	400b      	ands	r3, r1
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00d      	beq.n	8001888 <HAL_ADC_PollForConversion+0x13c>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6919      	ldr	r1, [r3, #16]
 8001872:	4b38      	ldr	r3, [pc, #224]	; (8001954 <HAL_ADC_PollForConversion+0x208>)
 8001874:	400b      	ands	r3, r1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d108      	bne.n	800188c <HAL_ADC_PollForConversion+0x140>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68d9      	ldr	r1, [r3, #12]
 8001880:	4b34      	ldr	r3, [pc, #208]	; (8001954 <HAL_ADC_PollForConversion+0x208>)
 8001882:	400b      	ands	r3, r1
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_ADC_PollForConversion+0x140>
 8001888:	2354      	movs	r3, #84	; 0x54
 800188a:	e000      	b.n	800188e <HAL_ADC_PollForConversion+0x142>
 800188c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800188e:	fb02 f303 	mul.w	r3, r2, r3
 8001892:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001894:	e021      	b.n	80018da <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189c:	d01a      	beq.n	80018d4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d007      	beq.n	80018b4 <HAL_ADC_PollForConversion+0x168>
 80018a4:	f7ff fdc2 	bl	800142c <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d20f      	bcs.n	80018d4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d90b      	bls.n	80018d4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	f043 0204 	orr.w	r2, r3, #4
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e030      	b.n	8001936 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	3301      	adds	r3, #1
 80018d8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d8d9      	bhi.n	8001896 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f06f 0212 	mvn.w	r2, #18
 80018ea:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001902:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001906:	d115      	bne.n	8001934 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800190c:	2b00      	cmp	r3, #0
 800190e:	d111      	bne.n	8001934 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d105      	bne.n	8001934 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	f043 0201 	orr.w	r2, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	371c      	adds	r7, #28
 800193a:	46bd      	mov	sp, r7
 800193c:	bd90      	pop	{r4, r7, pc}
 800193e:	bf00      	nop
 8001940:	20000000 	.word	0x20000000
 8001944:	24924924 	.word	0x24924924
 8001948:	00924924 	.word	0x00924924
 800194c:	12492492 	.word	0x12492492
 8001950:	00492492 	.word	0x00492492
 8001954:	00249249 	.word	0x00249249

08001958 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x20>
 800198c:	2302      	movs	r3, #2
 800198e:	e0dc      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x1da>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b06      	cmp	r3, #6
 800199e:	d81c      	bhi.n	80019da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	3b05      	subs	r3, #5
 80019b2:	221f      	movs	r2, #31
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	4019      	ands	r1, r3
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	3b05      	subs	r3, #5
 80019cc:	fa00 f203 	lsl.w	r2, r0, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	635a      	str	r2, [r3, #52]	; 0x34
 80019d8:	e03c      	b.n	8001a54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b0c      	cmp	r3, #12
 80019e0:	d81c      	bhi.n	8001a1c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	3b23      	subs	r3, #35	; 0x23
 80019f4:	221f      	movs	r2, #31
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	4019      	ands	r1, r3
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3b23      	subs	r3, #35	; 0x23
 8001a0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	631a      	str	r2, [r3, #48]	; 0x30
 8001a1a:	e01b      	b.n	8001a54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3b41      	subs	r3, #65	; 0x41
 8001a2e:	221f      	movs	r2, #31
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	4019      	ands	r1, r3
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	3b41      	subs	r3, #65	; 0x41
 8001a48:	fa00 f203 	lsl.w	r2, r0, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b09      	cmp	r3, #9
 8001a5a:	d91c      	bls.n	8001a96 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68d9      	ldr	r1, [r3, #12]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4613      	mov	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3b1e      	subs	r3, #30
 8001a6e:	2207      	movs	r2, #7
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	4019      	ands	r1, r3
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	6898      	ldr	r0, [r3, #8]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	3b1e      	subs	r3, #30
 8001a88:	fa00 f203 	lsl.w	r2, r0, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	e019      	b.n	8001aca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6919      	ldr	r1, [r3, #16]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	2207      	movs	r2, #7
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	4019      	ands	r1, r3
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	6898      	ldr	r0, [r3, #8]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4413      	add	r3, r2
 8001abe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b10      	cmp	r3, #16
 8001ad0:	d003      	beq.n	8001ada <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ad6:	2b11      	cmp	r3, #17
 8001ad8:	d132      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1d      	ldr	r2, [pc, #116]	; (8001b54 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d125      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d126      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b00:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b10      	cmp	r3, #16
 8001b08:	d11a      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b0a:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <HAL_ADC_ConfigChannel+0x1e8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a13      	ldr	r2, [pc, #76]	; (8001b5c <HAL_ADC_ConfigChannel+0x1ec>)
 8001b10:	fba2 2303 	umull	r2, r3, r2, r3
 8001b14:	0c9a      	lsrs	r2, r3, #18
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b20:	e002      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f9      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x1b2>
 8001b2e:	e007      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	f043 0220 	orr.w	r2, r3, #32
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	40012400 	.word	0x40012400
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	431bde83 	.word	0x431bde83

08001b60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d040      	beq.n	8001c00 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 0201 	orr.w	r2, r2, #1
 8001b8c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b8e:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <ADC_Enable+0xac>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a1f      	ldr	r2, [pc, #124]	; (8001c10 <ADC_Enable+0xb0>)
 8001b94:	fba2 2303 	umull	r2, r3, r2, r3
 8001b98:	0c9b      	lsrs	r3, r3, #18
 8001b9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b9c:	e002      	b.n	8001ba4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f9      	bne.n	8001b9e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001baa:	f7ff fc3f 	bl	800142c <HAL_GetTick>
 8001bae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bb0:	e01f      	b.n	8001bf2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bb2:	f7ff fc3b 	bl	800142c <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d918      	bls.n	8001bf2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d011      	beq.n	8001bf2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	f043 0210 	orr.w	r2, r3, #16
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bde:	f043 0201 	orr.w	r2, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e007      	b.n	8001c02 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d1d8      	bne.n	8001bb2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	431bde83 	.word	0x431bde83

08001c14 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d12e      	bne.n	8001c8c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0201 	bic.w	r2, r2, #1
 8001c3c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c3e:	f7ff fbf5 	bl	800142c <HAL_GetTick>
 8001c42:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c44:	e01b      	b.n	8001c7e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c46:	f7ff fbf1 	bl	800142c <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d914      	bls.n	8001c7e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d10d      	bne.n	8001c7e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c66:	f043 0210 	orr.w	r2, r3, #16
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	f043 0201 	orr.w	r2, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e007      	b.n	8001c8e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d0dc      	beq.n	8001c46 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001c98:	b590      	push	{r4, r7, lr}
 8001c9a:	b087      	sub	sp, #28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_ADCEx_Calibration_Start+0x1e>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e097      	b.n	8001de6 <HAL_ADCEx_Calibration_Start+0x14e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ffa8 	bl	8001c14 <ADC_ConversionStop_Disable>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff49 	bl	8001b60 <ADC_Enable>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001cd2:	7dfb      	ldrb	r3, [r7, #23]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f040 8081 	bne.w	8001ddc <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ce2:	f023 0302 	bic.w	r3, r3, #2
 8001ce6:	f043 0202 	orr.w	r2, r3, #2
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001cee:	4b40      	ldr	r3, [pc, #256]	; (8001df0 <HAL_ADCEx_Calibration_Start+0x158>)
 8001cf0:	681c      	ldr	r4, [r3, #0]
 8001cf2:	2002      	movs	r0, #2
 8001cf4:	f000 ffc4 	bl	8002c80 <HAL_RCCEx_GetPeriphCLKFreq>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001cfe:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001d00:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001d02:	e002      	b.n	8001d0a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1f9      	bne.n	8001d04 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0208 	orr.w	r2, r2, #8
 8001d1e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001d20:	f7ff fb84 	bl	800142c <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001d26:	e01b      	b.n	8001d60 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001d28:	f7ff fb80 	bl	800142c <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b0a      	cmp	r3, #10
 8001d34:	d914      	bls.n	8001d60 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00d      	beq.n	8001d60 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d48:	f023 0312 	bic.w	r3, r3, #18
 8001d4c:	f043 0210 	orr.w	r2, r3, #16
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e042      	b.n	8001de6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1dc      	bne.n	8001d28 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f042 0204 	orr.w	r2, r2, #4
 8001d7c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001d7e:	f7ff fb55 	bl	800142c <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001d84:	e01b      	b.n	8001dbe <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001d86:	f7ff fb51 	bl	800142c <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b0a      	cmp	r3, #10
 8001d92:	d914      	bls.n	8001dbe <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00d      	beq.n	8001dbe <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da6:	f023 0312 	bic.w	r3, r3, #18
 8001daa:	f043 0210 	orr.w	r2, r3, #16
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e013      	b.n	8001de6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1dc      	bne.n	8001d86 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	f023 0303 	bic.w	r3, r3, #3
 8001dd4:	f043 0201 	orr.w	r2, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	371c      	adds	r7, #28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd90      	pop	{r4, r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000000 	.word	0x20000000

08001df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e10:	4013      	ands	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e26:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	60d3      	str	r3, [r2, #12]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <__NVIC_GetPriorityGrouping+0x18>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	f003 0307 	and.w	r3, r3, #7
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	6039      	str	r1, [r7, #0]
 8001e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	db0a      	blt.n	8001e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	490c      	ldr	r1, [pc, #48]	; (8001ea4 <__NVIC_SetPriority+0x4c>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	0112      	lsls	r2, r2, #4
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e80:	e00a      	b.n	8001e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4908      	ldr	r1, [pc, #32]	; (8001ea8 <__NVIC_SetPriority+0x50>)
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	3b04      	subs	r3, #4
 8001e90:	0112      	lsls	r2, r2, #4
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	440b      	add	r3, r1
 8001e96:	761a      	strb	r2, [r3, #24]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000e100 	.word	0xe000e100
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b089      	sub	sp, #36	; 0x24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f1c3 0307 	rsb	r3, r3, #7
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	bf28      	it	cs
 8001eca:	2304      	movcs	r3, #4
 8001ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	2b06      	cmp	r3, #6
 8001ed4:	d902      	bls.n	8001edc <NVIC_EncodePriority+0x30>
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3b03      	subs	r3, #3
 8001eda:	e000      	b.n	8001ede <NVIC_EncodePriority+0x32>
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43da      	mvns	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	401a      	ands	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fa01 f303 	lsl.w	r3, r1, r3
 8001efe:	43d9      	mvns	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	4313      	orrs	r3, r2
         );
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3724      	adds	r7, #36	; 0x24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f20:	d301      	bcc.n	8001f26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f22:	2301      	movs	r3, #1
 8001f24:	e00f      	b.n	8001f46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f26:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <SysTick_Config+0x40>)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f2e:	210f      	movs	r1, #15
 8001f30:	f04f 30ff 	mov.w	r0, #4294967295
 8001f34:	f7ff ff90 	bl	8001e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f38:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <SysTick_Config+0x40>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f3e:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <SysTick_Config+0x40>)
 8001f40:	2207      	movs	r2, #7
 8001f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	e000e010 	.word	0xe000e010

08001f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff ff49 	bl	8001df4 <__NVIC_SetPriorityGrouping>
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b086      	sub	sp, #24
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4603      	mov	r3, r0
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f7c:	f7ff ff5e 	bl	8001e3c <__NVIC_GetPriorityGrouping>
 8001f80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	68b9      	ldr	r1, [r7, #8]
 8001f86:	6978      	ldr	r0, [r7, #20]
 8001f88:	f7ff ff90 	bl	8001eac <NVIC_EncodePriority>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff5f 	bl	8001e58 <__NVIC_SetPriority>
}
 8001f9a:	bf00      	nop
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ffb0 	bl	8001f10 <SysTick_Config>
 8001fb0:	4603      	mov	r3, r0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b08b      	sub	sp, #44	; 0x2c
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fce:	e169      	b.n	80022a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	f040 8158 	bne.w	800229e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	4a9a      	ldr	r2, [pc, #616]	; (800225c <HAL_GPIO_Init+0x2a0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d05e      	beq.n	80020b6 <HAL_GPIO_Init+0xfa>
 8001ff8:	4a98      	ldr	r2, [pc, #608]	; (800225c <HAL_GPIO_Init+0x2a0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d875      	bhi.n	80020ea <HAL_GPIO_Init+0x12e>
 8001ffe:	4a98      	ldr	r2, [pc, #608]	; (8002260 <HAL_GPIO_Init+0x2a4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d058      	beq.n	80020b6 <HAL_GPIO_Init+0xfa>
 8002004:	4a96      	ldr	r2, [pc, #600]	; (8002260 <HAL_GPIO_Init+0x2a4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d86f      	bhi.n	80020ea <HAL_GPIO_Init+0x12e>
 800200a:	4a96      	ldr	r2, [pc, #600]	; (8002264 <HAL_GPIO_Init+0x2a8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d052      	beq.n	80020b6 <HAL_GPIO_Init+0xfa>
 8002010:	4a94      	ldr	r2, [pc, #592]	; (8002264 <HAL_GPIO_Init+0x2a8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d869      	bhi.n	80020ea <HAL_GPIO_Init+0x12e>
 8002016:	4a94      	ldr	r2, [pc, #592]	; (8002268 <HAL_GPIO_Init+0x2ac>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d04c      	beq.n	80020b6 <HAL_GPIO_Init+0xfa>
 800201c:	4a92      	ldr	r2, [pc, #584]	; (8002268 <HAL_GPIO_Init+0x2ac>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d863      	bhi.n	80020ea <HAL_GPIO_Init+0x12e>
 8002022:	4a92      	ldr	r2, [pc, #584]	; (800226c <HAL_GPIO_Init+0x2b0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d046      	beq.n	80020b6 <HAL_GPIO_Init+0xfa>
 8002028:	4a90      	ldr	r2, [pc, #576]	; (800226c <HAL_GPIO_Init+0x2b0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d85d      	bhi.n	80020ea <HAL_GPIO_Init+0x12e>
 800202e:	2b12      	cmp	r3, #18
 8002030:	d82a      	bhi.n	8002088 <HAL_GPIO_Init+0xcc>
 8002032:	2b12      	cmp	r3, #18
 8002034:	d859      	bhi.n	80020ea <HAL_GPIO_Init+0x12e>
 8002036:	a201      	add	r2, pc, #4	; (adr r2, 800203c <HAL_GPIO_Init+0x80>)
 8002038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203c:	080020b7 	.word	0x080020b7
 8002040:	08002091 	.word	0x08002091
 8002044:	080020a3 	.word	0x080020a3
 8002048:	080020e5 	.word	0x080020e5
 800204c:	080020eb 	.word	0x080020eb
 8002050:	080020eb 	.word	0x080020eb
 8002054:	080020eb 	.word	0x080020eb
 8002058:	080020eb 	.word	0x080020eb
 800205c:	080020eb 	.word	0x080020eb
 8002060:	080020eb 	.word	0x080020eb
 8002064:	080020eb 	.word	0x080020eb
 8002068:	080020eb 	.word	0x080020eb
 800206c:	080020eb 	.word	0x080020eb
 8002070:	080020eb 	.word	0x080020eb
 8002074:	080020eb 	.word	0x080020eb
 8002078:	080020eb 	.word	0x080020eb
 800207c:	080020eb 	.word	0x080020eb
 8002080:	08002099 	.word	0x08002099
 8002084:	080020ad 	.word	0x080020ad
 8002088:	4a79      	ldr	r2, [pc, #484]	; (8002270 <HAL_GPIO_Init+0x2b4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800208e:	e02c      	b.n	80020ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	623b      	str	r3, [r7, #32]
          break;
 8002096:	e029      	b.n	80020ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	3304      	adds	r3, #4
 800209e:	623b      	str	r3, [r7, #32]
          break;
 80020a0:	e024      	b.n	80020ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	3308      	adds	r3, #8
 80020a8:	623b      	str	r3, [r7, #32]
          break;
 80020aa:	e01f      	b.n	80020ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	330c      	adds	r3, #12
 80020b2:	623b      	str	r3, [r7, #32]
          break;
 80020b4:	e01a      	b.n	80020ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d102      	bne.n	80020c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020be:	2304      	movs	r3, #4
 80020c0:	623b      	str	r3, [r7, #32]
          break;
 80020c2:	e013      	b.n	80020ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d105      	bne.n	80020d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020cc:	2308      	movs	r3, #8
 80020ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	611a      	str	r2, [r3, #16]
          break;
 80020d6:	e009      	b.n	80020ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020d8:	2308      	movs	r3, #8
 80020da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69fa      	ldr	r2, [r7, #28]
 80020e0:	615a      	str	r2, [r3, #20]
          break;
 80020e2:	e003      	b.n	80020ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020e4:	2300      	movs	r3, #0
 80020e6:	623b      	str	r3, [r7, #32]
          break;
 80020e8:	e000      	b.n	80020ec <HAL_GPIO_Init+0x130>
          break;
 80020ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2bff      	cmp	r3, #255	; 0xff
 80020f0:	d801      	bhi.n	80020f6 <HAL_GPIO_Init+0x13a>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	e001      	b.n	80020fa <HAL_GPIO_Init+0x13e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3304      	adds	r3, #4
 80020fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2bff      	cmp	r3, #255	; 0xff
 8002100:	d802      	bhi.n	8002108 <HAL_GPIO_Init+0x14c>
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	e002      	b.n	800210e <HAL_GPIO_Init+0x152>
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	3b08      	subs	r3, #8
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	210f      	movs	r1, #15
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	fa01 f303 	lsl.w	r3, r1, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	401a      	ands	r2, r3
 8002120:	6a39      	ldr	r1, [r7, #32]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	fa01 f303 	lsl.w	r3, r1, r3
 8002128:	431a      	orrs	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80b1 	beq.w	800229e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800213c:	4b4d      	ldr	r3, [pc, #308]	; (8002274 <HAL_GPIO_Init+0x2b8>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	4a4c      	ldr	r2, [pc, #304]	; (8002274 <HAL_GPIO_Init+0x2b8>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6193      	str	r3, [r2, #24]
 8002148:	4b4a      	ldr	r3, [pc, #296]	; (8002274 <HAL_GPIO_Init+0x2b8>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002154:	4a48      	ldr	r2, [pc, #288]	; (8002278 <HAL_GPIO_Init+0x2bc>)
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	089b      	lsrs	r3, r3, #2
 800215a:	3302      	adds	r3, #2
 800215c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002160:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	220f      	movs	r2, #15
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4013      	ands	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a40      	ldr	r2, [pc, #256]	; (800227c <HAL_GPIO_Init+0x2c0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d013      	beq.n	80021a8 <HAL_GPIO_Init+0x1ec>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a3f      	ldr	r2, [pc, #252]	; (8002280 <HAL_GPIO_Init+0x2c4>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d00d      	beq.n	80021a4 <HAL_GPIO_Init+0x1e8>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a3e      	ldr	r2, [pc, #248]	; (8002284 <HAL_GPIO_Init+0x2c8>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d007      	beq.n	80021a0 <HAL_GPIO_Init+0x1e4>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a3d      	ldr	r2, [pc, #244]	; (8002288 <HAL_GPIO_Init+0x2cc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d101      	bne.n	800219c <HAL_GPIO_Init+0x1e0>
 8002198:	2303      	movs	r3, #3
 800219a:	e006      	b.n	80021aa <HAL_GPIO_Init+0x1ee>
 800219c:	2304      	movs	r3, #4
 800219e:	e004      	b.n	80021aa <HAL_GPIO_Init+0x1ee>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e002      	b.n	80021aa <HAL_GPIO_Init+0x1ee>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <HAL_GPIO_Init+0x1ee>
 80021a8:	2300      	movs	r3, #0
 80021aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ac:	f002 0203 	and.w	r2, r2, #3
 80021b0:	0092      	lsls	r2, r2, #2
 80021b2:	4093      	lsls	r3, r2
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021ba:	492f      	ldr	r1, [pc, #188]	; (8002278 <HAL_GPIO_Init+0x2bc>)
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	089b      	lsrs	r3, r3, #2
 80021c0:	3302      	adds	r3, #2
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d006      	beq.n	80021e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021d4:	4b2d      	ldr	r3, [pc, #180]	; (800228c <HAL_GPIO_Init+0x2d0>)
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	492c      	ldr	r1, [pc, #176]	; (800228c <HAL_GPIO_Init+0x2d0>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	608b      	str	r3, [r1, #8]
 80021e0:	e006      	b.n	80021f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021e2:	4b2a      	ldr	r3, [pc, #168]	; (800228c <HAL_GPIO_Init+0x2d0>)
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	4928      	ldr	r1, [pc, #160]	; (800228c <HAL_GPIO_Init+0x2d0>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d006      	beq.n	800220a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021fc:	4b23      	ldr	r3, [pc, #140]	; (800228c <HAL_GPIO_Init+0x2d0>)
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	4922      	ldr	r1, [pc, #136]	; (800228c <HAL_GPIO_Init+0x2d0>)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	60cb      	str	r3, [r1, #12]
 8002208:	e006      	b.n	8002218 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800220a:	4b20      	ldr	r3, [pc, #128]	; (800228c <HAL_GPIO_Init+0x2d0>)
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	43db      	mvns	r3, r3
 8002212:	491e      	ldr	r1, [pc, #120]	; (800228c <HAL_GPIO_Init+0x2d0>)
 8002214:	4013      	ands	r3, r2
 8002216:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d006      	beq.n	8002232 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002224:	4b19      	ldr	r3, [pc, #100]	; (800228c <HAL_GPIO_Init+0x2d0>)
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	4918      	ldr	r1, [pc, #96]	; (800228c <HAL_GPIO_Init+0x2d0>)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
 8002230:	e006      	b.n	8002240 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002232:	4b16      	ldr	r3, [pc, #88]	; (800228c <HAL_GPIO_Init+0x2d0>)
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	43db      	mvns	r3, r3
 800223a:	4914      	ldr	r1, [pc, #80]	; (800228c <HAL_GPIO_Init+0x2d0>)
 800223c:	4013      	ands	r3, r2
 800223e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d021      	beq.n	8002290 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800224c:	4b0f      	ldr	r3, [pc, #60]	; (800228c <HAL_GPIO_Init+0x2d0>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	490e      	ldr	r1, [pc, #56]	; (800228c <HAL_GPIO_Init+0x2d0>)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	600b      	str	r3, [r1, #0]
 8002258:	e021      	b.n	800229e <HAL_GPIO_Init+0x2e2>
 800225a:	bf00      	nop
 800225c:	10320000 	.word	0x10320000
 8002260:	10310000 	.word	0x10310000
 8002264:	10220000 	.word	0x10220000
 8002268:	10210000 	.word	0x10210000
 800226c:	10120000 	.word	0x10120000
 8002270:	10110000 	.word	0x10110000
 8002274:	40021000 	.word	0x40021000
 8002278:	40010000 	.word	0x40010000
 800227c:	40010800 	.word	0x40010800
 8002280:	40010c00 	.word	0x40010c00
 8002284:	40011000 	.word	0x40011000
 8002288:	40011400 	.word	0x40011400
 800228c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_GPIO_Init+0x304>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	43db      	mvns	r3, r3
 8002298:	4909      	ldr	r1, [pc, #36]	; (80022c0 <HAL_GPIO_Init+0x304>)
 800229a:	4013      	ands	r3, r2
 800229c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	3301      	adds	r3, #1
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	fa22 f303 	lsr.w	r3, r2, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f47f ae8e 	bne.w	8001fd0 <HAL_GPIO_Init+0x14>
  }
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	372c      	adds	r7, #44	; 0x2c
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr
 80022c0:	40010400 	.word	0x40010400

080022c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
 80022d0:	4613      	mov	r3, r2
 80022d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022d4:	787b      	ldrb	r3, [r7, #1]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022e0:	e003      	b.n	80022ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022e2:	887b      	ldrh	r3, [r7, #2]
 80022e4:	041a      	lsls	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	611a      	str	r2, [r3, #16]
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e272      	b.n	80027ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 8087 	beq.w	8002422 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002314:	4b92      	ldr	r3, [pc, #584]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b04      	cmp	r3, #4
 800231e:	d00c      	beq.n	800233a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002320:	4b8f      	ldr	r3, [pc, #572]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 030c 	and.w	r3, r3, #12
 8002328:	2b08      	cmp	r3, #8
 800232a:	d112      	bne.n	8002352 <HAL_RCC_OscConfig+0x5e>
 800232c:	4b8c      	ldr	r3, [pc, #560]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002338:	d10b      	bne.n	8002352 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233a:	4b89      	ldr	r3, [pc, #548]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d06c      	beq.n	8002420 <HAL_RCC_OscConfig+0x12c>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d168      	bne.n	8002420 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e24c      	b.n	80027ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235a:	d106      	bne.n	800236a <HAL_RCC_OscConfig+0x76>
 800235c:	4b80      	ldr	r3, [pc, #512]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a7f      	ldr	r2, [pc, #508]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	e02e      	b.n	80023c8 <HAL_RCC_OscConfig+0xd4>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0x98>
 8002372:	4b7b      	ldr	r3, [pc, #492]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a7a      	ldr	r2, [pc, #488]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4b78      	ldr	r3, [pc, #480]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a77      	ldr	r2, [pc, #476]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	e01d      	b.n	80023c8 <HAL_RCC_OscConfig+0xd4>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0xbc>
 8002396:	4b72      	ldr	r3, [pc, #456]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a71      	ldr	r2, [pc, #452]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800239c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4b6f      	ldr	r3, [pc, #444]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a6e      	ldr	r2, [pc, #440]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	e00b      	b.n	80023c8 <HAL_RCC_OscConfig+0xd4>
 80023b0:	4b6b      	ldr	r3, [pc, #428]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a6a      	ldr	r2, [pc, #424]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80023b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	4b68      	ldr	r3, [pc, #416]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a67      	ldr	r2, [pc, #412]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80023c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d013      	beq.n	80023f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7ff f82c 	bl	800142c <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d8:	f7ff f828 	bl	800142c <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b64      	cmp	r3, #100	; 0x64
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e200      	b.n	80027ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ea:	4b5d      	ldr	r3, [pc, #372]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0xe4>
 80023f6:	e014      	b.n	8002422 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7ff f818 	bl	800142c <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002400:	f7ff f814 	bl	800142c <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b64      	cmp	r3, #100	; 0x64
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e1ec      	b.n	80027ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002412:	4b53      	ldr	r3, [pc, #332]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x10c>
 800241e:	e000      	b.n	8002422 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d063      	beq.n	80024f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800242e:	4b4c      	ldr	r3, [pc, #304]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00b      	beq.n	8002452 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800243a:	4b49      	ldr	r3, [pc, #292]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b08      	cmp	r3, #8
 8002444:	d11c      	bne.n	8002480 <HAL_RCC_OscConfig+0x18c>
 8002446:	4b46      	ldr	r3, [pc, #280]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d116      	bne.n	8002480 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002452:	4b43      	ldr	r3, [pc, #268]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d005      	beq.n	800246a <HAL_RCC_OscConfig+0x176>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d001      	beq.n	800246a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e1c0      	b.n	80027ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246a:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4939      	ldr	r1, [pc, #228]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247e:	e03a      	b.n	80024f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d020      	beq.n	80024ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002488:	4b36      	ldr	r3, [pc, #216]	; (8002564 <HAL_RCC_OscConfig+0x270>)
 800248a:	2201      	movs	r2, #1
 800248c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248e:	f7fe ffcd 	bl	800142c <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002496:	f7fe ffc9 	bl	800142c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e1a1      	b.n	80027ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a8:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b4:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	4927      	ldr	r1, [pc, #156]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	600b      	str	r3, [r1, #0]
 80024c8:	e015      	b.n	80024f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ca:	4b26      	ldr	r3, [pc, #152]	; (8002564 <HAL_RCC_OscConfig+0x270>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7fe ffac 	bl	800142c <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d8:	f7fe ffa8 	bl	800142c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e180      	b.n	80027ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ea:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d03a      	beq.n	8002578 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d019      	beq.n	800253e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800250a:	4b17      	ldr	r3, [pc, #92]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 800250c:	2201      	movs	r2, #1
 800250e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002510:	f7fe ff8c 	bl	800142c <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002518:	f7fe ff88 	bl	800142c <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e160      	b.n	80027ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252a:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002536:	2001      	movs	r0, #1
 8002538:	f000 face 	bl	8002ad8 <RCC_Delay>
 800253c:	e01c      	b.n	8002578 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002544:	f7fe ff72 	bl	800142c <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800254a:	e00f      	b.n	800256c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800254c:	f7fe ff6e 	bl	800142c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d908      	bls.n	800256c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e146      	b.n	80027ec <HAL_RCC_OscConfig+0x4f8>
 800255e:	bf00      	nop
 8002560:	40021000 	.word	0x40021000
 8002564:	42420000 	.word	0x42420000
 8002568:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800256c:	4b92      	ldr	r3, [pc, #584]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1e9      	bne.n	800254c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80a6 	beq.w	80026d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002586:	2300      	movs	r3, #0
 8002588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800258a:	4b8b      	ldr	r3, [pc, #556]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10d      	bne.n	80025b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002596:	4b88      	ldr	r3, [pc, #544]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	4a87      	ldr	r2, [pc, #540]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 800259c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a0:	61d3      	str	r3, [r2, #28]
 80025a2:	4b85      	ldr	r3, [pc, #532]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025aa:	60bb      	str	r3, [r7, #8]
 80025ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ae:	2301      	movs	r3, #1
 80025b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b2:	4b82      	ldr	r3, [pc, #520]	; (80027bc <HAL_RCC_OscConfig+0x4c8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d118      	bne.n	80025f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025be:	4b7f      	ldr	r3, [pc, #508]	; (80027bc <HAL_RCC_OscConfig+0x4c8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a7e      	ldr	r2, [pc, #504]	; (80027bc <HAL_RCC_OscConfig+0x4c8>)
 80025c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ca:	f7fe ff2f 	bl	800142c <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d2:	f7fe ff2b 	bl	800142c <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b64      	cmp	r3, #100	; 0x64
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e103      	b.n	80027ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e4:	4b75      	ldr	r3, [pc, #468]	; (80027bc <HAL_RCC_OscConfig+0x4c8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_OscConfig+0x312>
 80025f8:	4b6f      	ldr	r3, [pc, #444]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	4a6e      	ldr	r2, [pc, #440]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	6213      	str	r3, [r2, #32]
 8002604:	e02d      	b.n	8002662 <HAL_RCC_OscConfig+0x36e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0x334>
 800260e:	4b6a      	ldr	r3, [pc, #424]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	4a69      	ldr	r2, [pc, #420]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 8002614:	f023 0301 	bic.w	r3, r3, #1
 8002618:	6213      	str	r3, [r2, #32]
 800261a:	4b67      	ldr	r3, [pc, #412]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	4a66      	ldr	r2, [pc, #408]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 8002620:	f023 0304 	bic.w	r3, r3, #4
 8002624:	6213      	str	r3, [r2, #32]
 8002626:	e01c      	b.n	8002662 <HAL_RCC_OscConfig+0x36e>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x356>
 8002630:	4b61      	ldr	r3, [pc, #388]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4a60      	ldr	r2, [pc, #384]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6213      	str	r3, [r2, #32]
 800263c:	4b5e      	ldr	r3, [pc, #376]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	4a5d      	ldr	r2, [pc, #372]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6213      	str	r3, [r2, #32]
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x36e>
 800264a:	4b5b      	ldr	r3, [pc, #364]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	4a5a      	ldr	r2, [pc, #360]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6213      	str	r3, [r2, #32]
 8002656:	4b58      	ldr	r3, [pc, #352]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	4a57      	ldr	r2, [pc, #348]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d015      	beq.n	8002696 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266a:	f7fe fedf 	bl	800142c <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fedb 	bl	800142c <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e0b1      	b.n	80027ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b4b      	ldr	r3, [pc, #300]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ee      	beq.n	8002672 <HAL_RCC_OscConfig+0x37e>
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe fec9 	bl	800142c <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe fec5 	bl	800142c <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e09b      	b.n	80027ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	4b40      	ldr	r3, [pc, #256]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b3c      	ldr	r3, [pc, #240]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	4a3b      	ldr	r2, [pc, #236]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 80026cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 8087 	beq.w	80027ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026dc:	4b36      	ldr	r3, [pc, #216]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d061      	beq.n	80027ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d146      	bne.n	800277e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f0:	4b33      	ldr	r3, [pc, #204]	; (80027c0 <HAL_RCC_OscConfig+0x4cc>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f6:	f7fe fe99 	bl	800142c <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fe:	f7fe fe95 	bl	800142c <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e06d      	b.n	80027ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002710:	4b29      	ldr	r3, [pc, #164]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f0      	bne.n	80026fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002724:	d108      	bne.n	8002738 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002726:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	4921      	ldr	r1, [pc, #132]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 8002734:	4313      	orrs	r3, r2
 8002736:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002738:	4b1f      	ldr	r3, [pc, #124]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a19      	ldr	r1, [r3, #32]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	430b      	orrs	r3, r1
 800274a:	491b      	ldr	r1, [pc, #108]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 800274c:	4313      	orrs	r3, r2
 800274e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002750:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <HAL_RCC_OscConfig+0x4cc>)
 8002752:	2201      	movs	r2, #1
 8002754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002756:	f7fe fe69 	bl	800142c <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275e:	f7fe fe65 	bl	800142c <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e03d      	b.n	80027ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x46a>
 800277c:	e035      	b.n	80027ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277e:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <HAL_RCC_OscConfig+0x4cc>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002784:	f7fe fe52 	bl	800142c <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278c:	f7fe fe4e 	bl	800142c <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e026      	b.n	80027ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_RCC_OscConfig+0x4c4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x498>
 80027aa:	e01e      	b.n	80027ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d107      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e019      	b.n	80027ec <HAL_RCC_OscConfig+0x4f8>
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40007000 	.word	0x40007000
 80027c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_RCC_OscConfig+0x500>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d106      	bne.n	80027e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d001      	beq.n	80027ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000

080027f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0d0      	b.n	80029ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800280c:	4b6a      	ldr	r3, [pc, #424]	; (80029b8 <HAL_RCC_ClockConfig+0x1c0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d910      	bls.n	800283c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281a:	4b67      	ldr	r3, [pc, #412]	; (80029b8 <HAL_RCC_ClockConfig+0x1c0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 0207 	bic.w	r2, r3, #7
 8002822:	4965      	ldr	r1, [pc, #404]	; (80029b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b63      	ldr	r3, [pc, #396]	; (80029b8 <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0b8      	b.n	80029ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d020      	beq.n	800288a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002854:	4b59      	ldr	r3, [pc, #356]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	4a58      	ldr	r2, [pc, #352]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800285e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800286c:	4b53      	ldr	r3, [pc, #332]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4a52      	ldr	r2, [pc, #328]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002876:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002878:	4b50      	ldr	r3, [pc, #320]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	494d      	ldr	r1, [pc, #308]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	4313      	orrs	r3, r2
 8002888:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d040      	beq.n	8002918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d107      	bne.n	80028ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289e:	4b47      	ldr	r3, [pc, #284]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d115      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e07f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d107      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b6:	4b41      	ldr	r3, [pc, #260]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e073      	b.n	80029ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c6:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e06b      	b.n	80029ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028d6:	4b39      	ldr	r3, [pc, #228]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f023 0203 	bic.w	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4936      	ldr	r1, [pc, #216]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028e8:	f7fe fda0 	bl	800142c <HAL_GetTick>
 80028ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ee:	e00a      	b.n	8002906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f0:	f7fe fd9c 	bl	800142c <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e053      	b.n	80029ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002906:	4b2d      	ldr	r3, [pc, #180]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 020c 	and.w	r2, r3, #12
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	429a      	cmp	r2, r3
 8002916:	d1eb      	bne.n	80028f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002918:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <HAL_RCC_ClockConfig+0x1c0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d210      	bcs.n	8002948 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 0207 	bic.w	r2, r3, #7
 800292e:	4922      	ldr	r1, [pc, #136]	; (80029b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e032      	b.n	80029ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4916      	ldr	r1, [pc, #88]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	490e      	ldr	r1, [pc, #56]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002982:	4313      	orrs	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002986:	f000 f821 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 800298a:	4602      	mov	r2, r0
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	490a      	ldr	r1, [pc, #40]	; (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002998:	5ccb      	ldrb	r3, [r1, r3]
 800299a:	fa22 f303 	lsr.w	r3, r2, r3
 800299e:	4a09      	ldr	r2, [pc, #36]	; (80029c4 <HAL_RCC_ClockConfig+0x1cc>)
 80029a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCC_ClockConfig+0x1d0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fcfe 	bl	80013a8 <HAL_InitTick>

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40022000 	.word	0x40022000
 80029bc:	40021000 	.word	0x40021000
 80029c0:	08005d4c 	.word	0x08005d4c
 80029c4:	20000000 	.word	0x20000000
 80029c8:	20000004 	.word	0x20000004

080029cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	2300      	movs	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	2300      	movs	r3, #0
 80029e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029e6:	4b1e      	ldr	r3, [pc, #120]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x94>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d002      	beq.n	80029fc <HAL_RCC_GetSysClockFreq+0x30>
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d003      	beq.n	8002a02 <HAL_RCC_GetSysClockFreq+0x36>
 80029fa:	e027      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029fc:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x98>)
 80029fe:	613b      	str	r3, [r7, #16]
      break;
 8002a00:	e027      	b.n	8002a52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	0c9b      	lsrs	r3, r3, #18
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	4a17      	ldr	r2, [pc, #92]	; (8002a68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a0c:	5cd3      	ldrb	r3, [r2, r3]
 8002a0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d010      	beq.n	8002a3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a1a:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	0c5b      	lsrs	r3, r3, #17
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	4a11      	ldr	r2, [pc, #68]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a26:	5cd3      	ldrb	r3, [r2, r3]
 8002a28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a0d      	ldr	r2, [pc, #52]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a2e:	fb03 f202 	mul.w	r2, r3, r2
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	e004      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a0c      	ldr	r2, [pc, #48]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a40:	fb02 f303 	mul.w	r3, r2, r3
 8002a44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	613b      	str	r3, [r7, #16]
      break;
 8002a4a:	e002      	b.n	8002a52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a4e:	613b      	str	r3, [r7, #16]
      break;
 8002a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a52:	693b      	ldr	r3, [r7, #16]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	371c      	adds	r7, #28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000
 8002a64:	007a1200 	.word	0x007a1200
 8002a68:	08005d64 	.word	0x08005d64
 8002a6c:	08005d74 	.word	0x08005d74
 8002a70:	003d0900 	.word	0x003d0900

08002a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a78:	4b02      	ldr	r3, [pc, #8]	; (8002a84 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr
 8002a84:	20000000 	.word	0x20000000

08002a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a8c:	f7ff fff2 	bl	8002a74 <HAL_RCC_GetHCLKFreq>
 8002a90:	4602      	mov	r2, r0
 8002a92:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	0a1b      	lsrs	r3, r3, #8
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	4903      	ldr	r1, [pc, #12]	; (8002aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a9e:	5ccb      	ldrb	r3, [r1, r3]
 8002aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	08005d5c 	.word	0x08005d5c

08002ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ab4:	f7ff ffde 	bl	8002a74 <HAL_RCC_GetHCLKFreq>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	0adb      	lsrs	r3, r3, #11
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	4903      	ldr	r1, [pc, #12]	; (8002ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ac6:	5ccb      	ldrb	r3, [r1, r3]
 8002ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	08005d5c 	.word	0x08005d5c

08002ad8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <RCC_Delay+0x34>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <RCC_Delay+0x38>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	0a5b      	lsrs	r3, r3, #9
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	fb02 f303 	mul.w	r3, r2, r3
 8002af2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002af4:	bf00      	nop
  }
  while (Delay --);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1e5a      	subs	r2, r3, #1
 8002afa:	60fa      	str	r2, [r7, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1f9      	bne.n	8002af4 <RCC_Delay+0x1c>
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr
 8002b0c:	20000000 	.word	0x20000000
 8002b10:	10624dd3 	.word	0x10624dd3

08002b14 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d07d      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b30:	2300      	movs	r3, #0
 8002b32:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b34:	4b4f      	ldr	r3, [pc, #316]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10d      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b40:	4b4c      	ldr	r3, [pc, #304]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	4a4b      	ldr	r2, [pc, #300]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	61d3      	str	r3, [r2, #28]
 8002b4c:	4b49      	ldr	r3, [pc, #292]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	4b46      	ldr	r3, [pc, #280]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d118      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b68:	4b43      	ldr	r3, [pc, #268]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a42      	ldr	r2, [pc, #264]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b74:	f7fe fc5a 	bl	800142c <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7a:	e008      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7c:	f7fe fc56 	bl	800142c <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b64      	cmp	r3, #100	; 0x64
 8002b88:	d901      	bls.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e06d      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8e:	4b3a      	ldr	r3, [pc, #232]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b9a:	4b36      	ldr	r3, [pc, #216]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d02e      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d027      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bb8:	4b2e      	ldr	r3, [pc, #184]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bc2:	4b2e      	ldr	r3, [pc, #184]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bc8:	4b2c      	ldr	r3, [pc, #176]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bce:	4a29      	ldr	r2, [pc, #164]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d014      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bde:	f7fe fc25 	bl	800142c <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be4:	e00a      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be6:	f7fe fc21 	bl	800142c <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e036      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0ee      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c08:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	4917      	ldr	r1, [pc, #92]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c1a:	7dfb      	ldrb	r3, [r7, #23]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d105      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c20:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	4a13      	ldr	r2, [pc, #76]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d008      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c38:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	490b      	ldr	r1, [pc, #44]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d008      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c56:	4b07      	ldr	r3, [pc, #28]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	4904      	ldr	r1, [pc, #16]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40007000 	.word	0x40007000
 8002c7c:	42420440 	.word	0x42420440

08002c80 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
 8002c90:	2300      	movs	r3, #0
 8002c92:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b10      	cmp	r3, #16
 8002ca0:	d00a      	beq.n	8002cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b10      	cmp	r3, #16
 8002ca6:	f200 808a 	bhi.w	8002dbe <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d045      	beq.n	8002d3c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d075      	beq.n	8002da2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002cb6:	e082      	b.n	8002dbe <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002cb8:	4b46      	ldr	r3, [pc, #280]	; (8002dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002cbe:	4b45      	ldr	r3, [pc, #276]	; (8002dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d07b      	beq.n	8002dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	0c9b      	lsrs	r3, r3, #18
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	4a41      	ldr	r2, [pc, #260]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002cd4:	5cd3      	ldrb	r3, [r2, r3]
 8002cd6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d015      	beq.n	8002d0e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ce2:	4b3c      	ldr	r3, [pc, #240]	; (8002dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	0c5b      	lsrs	r3, r3, #17
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	4a3b      	ldr	r2, [pc, #236]	; (8002ddc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002cee:	5cd3      	ldrb	r3, [r2, r3]
 8002cf0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00d      	beq.n	8002d18 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002cfc:	4a38      	ldr	r2, [pc, #224]	; (8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	fb02 f303 	mul.w	r3, r2, r3
 8002d0a:	61fb      	str	r3, [r7, #28]
 8002d0c:	e004      	b.n	8002d18 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4a34      	ldr	r2, [pc, #208]	; (8002de4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002d18:	4b2e      	ldr	r3, [pc, #184]	; (8002dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d24:	d102      	bne.n	8002d2c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	61bb      	str	r3, [r7, #24]
      break;
 8002d2a:	e04a      	b.n	8002dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4a2d      	ldr	r2, [pc, #180]	; (8002de8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002d32:	fba2 2303 	umull	r2, r3, r2, r3
 8002d36:	085b      	lsrs	r3, r3, #1
 8002d38:	61bb      	str	r3, [r7, #24]
      break;
 8002d3a:	e042      	b.n	8002dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002d3c:	4b25      	ldr	r3, [pc, #148]	; (8002dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d4c:	d108      	bne.n	8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002d58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d5c:	61bb      	str	r3, [r7, #24]
 8002d5e:	e01f      	b.n	8002da0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d6a:	d109      	bne.n	8002d80 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002d6c:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002d78:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002d7c:	61bb      	str	r3, [r7, #24]
 8002d7e:	e00f      	b.n	8002da0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d8a:	d11c      	bne.n	8002dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002d8c:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d016      	beq.n	8002dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002d98:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002d9c:	61bb      	str	r3, [r7, #24]
      break;
 8002d9e:	e012      	b.n	8002dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002da0:	e011      	b.n	8002dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002da2:	f7ff fe85 	bl	8002ab0 <HAL_RCC_GetPCLK2Freq>
 8002da6:	4602      	mov	r2, r0
 8002da8:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	0b9b      	lsrs	r3, r3, #14
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	3301      	adds	r3, #1
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dba:	61bb      	str	r3, [r7, #24]
      break;
 8002dbc:	e004      	b.n	8002dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002dbe:	bf00      	nop
 8002dc0:	e002      	b.n	8002dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002dc2:	bf00      	nop
 8002dc4:	e000      	b.n	8002dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002dc6:	bf00      	nop
    }
  }
  return (frequency);
 8002dc8:	69bb      	ldr	r3, [r7, #24]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3720      	adds	r7, #32
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	08005d78 	.word	0x08005d78
 8002ddc:	08005d88 	.word	0x08005d88
 8002de0:	007a1200 	.word	0x007a1200
 8002de4:	003d0900 	.word	0x003d0900
 8002de8:	aaaaaaab 	.word	0xaaaaaaab

08002dec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e042      	b.n	8002e84 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fe f954 	bl	80010c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2224      	movs	r2, #36	; 0x24
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f91d 	bl	8003070 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	; 0x28
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d16d      	bne.n	8002f88 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <HAL_UART_Transmit+0x2c>
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e066      	b.n	8002f8a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2221      	movs	r2, #33	; 0x21
 8002ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eca:	f7fe faaf 	bl	800142c <HAL_GetTick>
 8002ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	88fa      	ldrh	r2, [r7, #6]
 8002ed4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	88fa      	ldrh	r2, [r7, #6]
 8002eda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee4:	d108      	bne.n	8002ef8 <HAL_UART_Transmit+0x6c>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d104      	bne.n	8002ef8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	e003      	b.n	8002f00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f00:	e02a      	b.n	8002f58 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2180      	movs	r1, #128	; 0x80
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 f840 	bl	8002f92 <UART_WaitOnFlagUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e036      	b.n	8002f8a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10b      	bne.n	8002f3a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	3302      	adds	r3, #2
 8002f36:	61bb      	str	r3, [r7, #24]
 8002f38:	e007      	b.n	8002f4a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	781a      	ldrb	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	3301      	adds	r3, #1
 8002f48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1cf      	bne.n	8002f02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2140      	movs	r1, #64	; 0x40
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f810 	bl	8002f92 <UART_WaitOnFlagUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e006      	b.n	8002f8a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	e000      	b.n	8002f8a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f88:	2302      	movs	r3, #2
  }
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3720      	adds	r7, #32
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b090      	sub	sp, #64	; 0x40
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	603b      	str	r3, [r7, #0]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fa2:	e050      	b.n	8003046 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002faa:	d04c      	beq.n	8003046 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d007      	beq.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fb2:	f7fe fa3b 	bl	800142c <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d241      	bcs.n	8003046 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	330c      	adds	r3, #12
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fcc:	e853 3f00 	ldrex	r3, [r3]
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	330c      	adds	r3, #12
 8002fe0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fe2:	637a      	str	r2, [r7, #52]	; 0x34
 8002fe4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fea:	e841 2300 	strex	r3, r2, [r1]
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1e5      	bne.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	3314      	adds	r3, #20
 8002ffc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	e853 3f00 	ldrex	r3, [r3]
 8003004:	613b      	str	r3, [r7, #16]
   return(result);
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f023 0301 	bic.w	r3, r3, #1
 800300c:	63bb      	str	r3, [r7, #56]	; 0x38
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3314      	adds	r3, #20
 8003014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003016:	623a      	str	r2, [r7, #32]
 8003018:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301a:	69f9      	ldr	r1, [r7, #28]
 800301c:	6a3a      	ldr	r2, [r7, #32]
 800301e:	e841 2300 	strex	r3, r2, [r1]
 8003022:	61bb      	str	r3, [r7, #24]
   return(result);
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1e5      	bne.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e00f      	b.n	8003066 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4013      	ands	r3, r2
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	429a      	cmp	r2, r3
 8003054:	bf0c      	ite	eq
 8003056:	2301      	moveq	r3, #1
 8003058:	2300      	movne	r3, #0
 800305a:	b2db      	uxtb	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	429a      	cmp	r2, r3
 8003062:	d09f      	beq.n	8002fa4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3740      	adds	r7, #64	; 0x40
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030aa:	f023 030c 	bic.w	r3, r3, #12
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6812      	ldr	r2, [r2, #0]
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a2c      	ldr	r2, [pc, #176]	; (8003184 <UART_SetConfig+0x114>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d103      	bne.n	80030e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030d8:	f7ff fcea 	bl	8002ab0 <HAL_RCC_GetPCLK2Freq>
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	e002      	b.n	80030e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030e0:	f7ff fcd2 	bl	8002a88 <HAL_RCC_GetPCLK1Freq>
 80030e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	009a      	lsls	r2, r3, #2
 80030f0:	441a      	add	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fc:	4a22      	ldr	r2, [pc, #136]	; (8003188 <UART_SetConfig+0x118>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	095b      	lsrs	r3, r3, #5
 8003104:	0119      	lsls	r1, r3, #4
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	009a      	lsls	r2, r3, #2
 8003110:	441a      	add	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	fbb2 f2f3 	udiv	r2, r2, r3
 800311c:	4b1a      	ldr	r3, [pc, #104]	; (8003188 <UART_SetConfig+0x118>)
 800311e:	fba3 0302 	umull	r0, r3, r3, r2
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	2064      	movs	r0, #100	; 0x64
 8003126:	fb00 f303 	mul.w	r3, r0, r3
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	3332      	adds	r3, #50	; 0x32
 8003130:	4a15      	ldr	r2, [pc, #84]	; (8003188 <UART_SetConfig+0x118>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800313c:	4419      	add	r1, r3
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	009a      	lsls	r2, r3, #2
 8003148:	441a      	add	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	fbb2 f2f3 	udiv	r2, r2, r3
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <UART_SetConfig+0x118>)
 8003156:	fba3 0302 	umull	r0, r3, r3, r2
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	2064      	movs	r0, #100	; 0x64
 800315e:	fb00 f303 	mul.w	r3, r0, r3
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	3332      	adds	r3, #50	; 0x32
 8003168:	4a07      	ldr	r2, [pc, #28]	; (8003188 <UART_SetConfig+0x118>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	f003 020f 	and.w	r2, r3, #15
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	440a      	add	r2, r1
 800317a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800317c:	bf00      	nop
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40013800 	.word	0x40013800
 8003188:	51eb851f 	.word	0x51eb851f

0800318c <__errno>:
 800318c:	4b01      	ldr	r3, [pc, #4]	; (8003194 <__errno+0x8>)
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	2000000c 	.word	0x2000000c

08003198 <__libc_init_array>:
 8003198:	b570      	push	{r4, r5, r6, lr}
 800319a:	2600      	movs	r6, #0
 800319c:	4d0c      	ldr	r5, [pc, #48]	; (80031d0 <__libc_init_array+0x38>)
 800319e:	4c0d      	ldr	r4, [pc, #52]	; (80031d4 <__libc_init_array+0x3c>)
 80031a0:	1b64      	subs	r4, r4, r5
 80031a2:	10a4      	asrs	r4, r4, #2
 80031a4:	42a6      	cmp	r6, r4
 80031a6:	d109      	bne.n	80031bc <__libc_init_array+0x24>
 80031a8:	f002 fdbc 	bl	8005d24 <_init>
 80031ac:	2600      	movs	r6, #0
 80031ae:	4d0a      	ldr	r5, [pc, #40]	; (80031d8 <__libc_init_array+0x40>)
 80031b0:	4c0a      	ldr	r4, [pc, #40]	; (80031dc <__libc_init_array+0x44>)
 80031b2:	1b64      	subs	r4, r4, r5
 80031b4:	10a4      	asrs	r4, r4, #2
 80031b6:	42a6      	cmp	r6, r4
 80031b8:	d105      	bne.n	80031c6 <__libc_init_array+0x2e>
 80031ba:	bd70      	pop	{r4, r5, r6, pc}
 80031bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80031c0:	4798      	blx	r3
 80031c2:	3601      	adds	r6, #1
 80031c4:	e7ee      	b.n	80031a4 <__libc_init_array+0xc>
 80031c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ca:	4798      	blx	r3
 80031cc:	3601      	adds	r6, #1
 80031ce:	e7f2      	b.n	80031b6 <__libc_init_array+0x1e>
 80031d0:	08006164 	.word	0x08006164
 80031d4:	08006164 	.word	0x08006164
 80031d8:	08006164 	.word	0x08006164
 80031dc:	08006168 	.word	0x08006168

080031e0 <memset>:
 80031e0:	4603      	mov	r3, r0
 80031e2:	4402      	add	r2, r0
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d100      	bne.n	80031ea <memset+0xa>
 80031e8:	4770      	bx	lr
 80031ea:	f803 1b01 	strb.w	r1, [r3], #1
 80031ee:	e7f9      	b.n	80031e4 <memset+0x4>

080031f0 <__cvt>:
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031f6:	461f      	mov	r7, r3
 80031f8:	bfbb      	ittet	lt
 80031fa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80031fe:	461f      	movlt	r7, r3
 8003200:	2300      	movge	r3, #0
 8003202:	232d      	movlt	r3, #45	; 0x2d
 8003204:	b088      	sub	sp, #32
 8003206:	4614      	mov	r4, r2
 8003208:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800320a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800320c:	7013      	strb	r3, [r2, #0]
 800320e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003210:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003214:	f023 0820 	bic.w	r8, r3, #32
 8003218:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800321c:	d005      	beq.n	800322a <__cvt+0x3a>
 800321e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003222:	d100      	bne.n	8003226 <__cvt+0x36>
 8003224:	3501      	adds	r5, #1
 8003226:	2302      	movs	r3, #2
 8003228:	e000      	b.n	800322c <__cvt+0x3c>
 800322a:	2303      	movs	r3, #3
 800322c:	aa07      	add	r2, sp, #28
 800322e:	9204      	str	r2, [sp, #16]
 8003230:	aa06      	add	r2, sp, #24
 8003232:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003236:	e9cd 3500 	strd	r3, r5, [sp]
 800323a:	4622      	mov	r2, r4
 800323c:	463b      	mov	r3, r7
 800323e:	f000 fe13 	bl	8003e68 <_dtoa_r>
 8003242:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003246:	4606      	mov	r6, r0
 8003248:	d102      	bne.n	8003250 <__cvt+0x60>
 800324a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800324c:	07db      	lsls	r3, r3, #31
 800324e:	d522      	bpl.n	8003296 <__cvt+0xa6>
 8003250:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003254:	eb06 0905 	add.w	r9, r6, r5
 8003258:	d110      	bne.n	800327c <__cvt+0x8c>
 800325a:	7833      	ldrb	r3, [r6, #0]
 800325c:	2b30      	cmp	r3, #48	; 0x30
 800325e:	d10a      	bne.n	8003276 <__cvt+0x86>
 8003260:	2200      	movs	r2, #0
 8003262:	2300      	movs	r3, #0
 8003264:	4620      	mov	r0, r4
 8003266:	4639      	mov	r1, r7
 8003268:	f7fd fb9e 	bl	80009a8 <__aeabi_dcmpeq>
 800326c:	b918      	cbnz	r0, 8003276 <__cvt+0x86>
 800326e:	f1c5 0501 	rsb	r5, r5, #1
 8003272:	f8ca 5000 	str.w	r5, [sl]
 8003276:	f8da 3000 	ldr.w	r3, [sl]
 800327a:	4499      	add	r9, r3
 800327c:	2200      	movs	r2, #0
 800327e:	2300      	movs	r3, #0
 8003280:	4620      	mov	r0, r4
 8003282:	4639      	mov	r1, r7
 8003284:	f7fd fb90 	bl	80009a8 <__aeabi_dcmpeq>
 8003288:	b108      	cbz	r0, 800328e <__cvt+0x9e>
 800328a:	f8cd 901c 	str.w	r9, [sp, #28]
 800328e:	2230      	movs	r2, #48	; 0x30
 8003290:	9b07      	ldr	r3, [sp, #28]
 8003292:	454b      	cmp	r3, r9
 8003294:	d307      	bcc.n	80032a6 <__cvt+0xb6>
 8003296:	4630      	mov	r0, r6
 8003298:	9b07      	ldr	r3, [sp, #28]
 800329a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800329c:	1b9b      	subs	r3, r3, r6
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	b008      	add	sp, #32
 80032a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032a6:	1c59      	adds	r1, r3, #1
 80032a8:	9107      	str	r1, [sp, #28]
 80032aa:	701a      	strb	r2, [r3, #0]
 80032ac:	e7f0      	b.n	8003290 <__cvt+0xa0>

080032ae <__exponent>:
 80032ae:	4603      	mov	r3, r0
 80032b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032b2:	2900      	cmp	r1, #0
 80032b4:	f803 2b02 	strb.w	r2, [r3], #2
 80032b8:	bfb6      	itet	lt
 80032ba:	222d      	movlt	r2, #45	; 0x2d
 80032bc:	222b      	movge	r2, #43	; 0x2b
 80032be:	4249      	neglt	r1, r1
 80032c0:	2909      	cmp	r1, #9
 80032c2:	7042      	strb	r2, [r0, #1]
 80032c4:	dd2b      	ble.n	800331e <__exponent+0x70>
 80032c6:	f10d 0407 	add.w	r4, sp, #7
 80032ca:	46a4      	mov	ip, r4
 80032cc:	270a      	movs	r7, #10
 80032ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80032d2:	460a      	mov	r2, r1
 80032d4:	46a6      	mov	lr, r4
 80032d6:	fb07 1516 	mls	r5, r7, r6, r1
 80032da:	2a63      	cmp	r2, #99	; 0x63
 80032dc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80032e0:	4631      	mov	r1, r6
 80032e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80032e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80032ea:	dcf0      	bgt.n	80032ce <__exponent+0x20>
 80032ec:	3130      	adds	r1, #48	; 0x30
 80032ee:	f1ae 0502 	sub.w	r5, lr, #2
 80032f2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80032f6:	4629      	mov	r1, r5
 80032f8:	1c44      	adds	r4, r0, #1
 80032fa:	4561      	cmp	r1, ip
 80032fc:	d30a      	bcc.n	8003314 <__exponent+0x66>
 80032fe:	f10d 0209 	add.w	r2, sp, #9
 8003302:	eba2 020e 	sub.w	r2, r2, lr
 8003306:	4565      	cmp	r5, ip
 8003308:	bf88      	it	hi
 800330a:	2200      	movhi	r2, #0
 800330c:	4413      	add	r3, r2
 800330e:	1a18      	subs	r0, r3, r0
 8003310:	b003      	add	sp, #12
 8003312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003314:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003318:	f804 2f01 	strb.w	r2, [r4, #1]!
 800331c:	e7ed      	b.n	80032fa <__exponent+0x4c>
 800331e:	2330      	movs	r3, #48	; 0x30
 8003320:	3130      	adds	r1, #48	; 0x30
 8003322:	7083      	strb	r3, [r0, #2]
 8003324:	70c1      	strb	r1, [r0, #3]
 8003326:	1d03      	adds	r3, r0, #4
 8003328:	e7f1      	b.n	800330e <__exponent+0x60>
	...

0800332c <_printf_float>:
 800332c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003330:	b091      	sub	sp, #68	; 0x44
 8003332:	460c      	mov	r4, r1
 8003334:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003338:	4616      	mov	r6, r2
 800333a:	461f      	mov	r7, r3
 800333c:	4605      	mov	r5, r0
 800333e:	f001 fd35 	bl	8004dac <_localeconv_r>
 8003342:	6803      	ldr	r3, [r0, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	9309      	str	r3, [sp, #36]	; 0x24
 8003348:	f7fc ff02 	bl	8000150 <strlen>
 800334c:	2300      	movs	r3, #0
 800334e:	930e      	str	r3, [sp, #56]	; 0x38
 8003350:	f8d8 3000 	ldr.w	r3, [r8]
 8003354:	900a      	str	r0, [sp, #40]	; 0x28
 8003356:	3307      	adds	r3, #7
 8003358:	f023 0307 	bic.w	r3, r3, #7
 800335c:	f103 0208 	add.w	r2, r3, #8
 8003360:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003364:	f8d4 b000 	ldr.w	fp, [r4]
 8003368:	f8c8 2000 	str.w	r2, [r8]
 800336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003370:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003374:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003378:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800337c:	930b      	str	r3, [sp, #44]	; 0x2c
 800337e:	f04f 32ff 	mov.w	r2, #4294967295
 8003382:	4640      	mov	r0, r8
 8003384:	4b9c      	ldr	r3, [pc, #624]	; (80035f8 <_printf_float+0x2cc>)
 8003386:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003388:	f7fd fb40 	bl	8000a0c <__aeabi_dcmpun>
 800338c:	bb70      	cbnz	r0, 80033ec <_printf_float+0xc0>
 800338e:	f04f 32ff 	mov.w	r2, #4294967295
 8003392:	4640      	mov	r0, r8
 8003394:	4b98      	ldr	r3, [pc, #608]	; (80035f8 <_printf_float+0x2cc>)
 8003396:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003398:	f7fd fb1a 	bl	80009d0 <__aeabi_dcmple>
 800339c:	bb30      	cbnz	r0, 80033ec <_printf_float+0xc0>
 800339e:	2200      	movs	r2, #0
 80033a0:	2300      	movs	r3, #0
 80033a2:	4640      	mov	r0, r8
 80033a4:	4651      	mov	r1, sl
 80033a6:	f7fd fb09 	bl	80009bc <__aeabi_dcmplt>
 80033aa:	b110      	cbz	r0, 80033b2 <_printf_float+0x86>
 80033ac:	232d      	movs	r3, #45	; 0x2d
 80033ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033b2:	4b92      	ldr	r3, [pc, #584]	; (80035fc <_printf_float+0x2d0>)
 80033b4:	4892      	ldr	r0, [pc, #584]	; (8003600 <_printf_float+0x2d4>)
 80033b6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80033ba:	bf94      	ite	ls
 80033bc:	4698      	movls	r8, r3
 80033be:	4680      	movhi	r8, r0
 80033c0:	2303      	movs	r3, #3
 80033c2:	f04f 0a00 	mov.w	sl, #0
 80033c6:	6123      	str	r3, [r4, #16]
 80033c8:	f02b 0304 	bic.w	r3, fp, #4
 80033cc:	6023      	str	r3, [r4, #0]
 80033ce:	4633      	mov	r3, r6
 80033d0:	4621      	mov	r1, r4
 80033d2:	4628      	mov	r0, r5
 80033d4:	9700      	str	r7, [sp, #0]
 80033d6:	aa0f      	add	r2, sp, #60	; 0x3c
 80033d8:	f000 f9d4 	bl	8003784 <_printf_common>
 80033dc:	3001      	adds	r0, #1
 80033de:	f040 8090 	bne.w	8003502 <_printf_float+0x1d6>
 80033e2:	f04f 30ff 	mov.w	r0, #4294967295
 80033e6:	b011      	add	sp, #68	; 0x44
 80033e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033ec:	4642      	mov	r2, r8
 80033ee:	4653      	mov	r3, sl
 80033f0:	4640      	mov	r0, r8
 80033f2:	4651      	mov	r1, sl
 80033f4:	f7fd fb0a 	bl	8000a0c <__aeabi_dcmpun>
 80033f8:	b148      	cbz	r0, 800340e <_printf_float+0xe2>
 80033fa:	f1ba 0f00 	cmp.w	sl, #0
 80033fe:	bfb8      	it	lt
 8003400:	232d      	movlt	r3, #45	; 0x2d
 8003402:	4880      	ldr	r0, [pc, #512]	; (8003604 <_printf_float+0x2d8>)
 8003404:	bfb8      	it	lt
 8003406:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800340a:	4b7f      	ldr	r3, [pc, #508]	; (8003608 <_printf_float+0x2dc>)
 800340c:	e7d3      	b.n	80033b6 <_printf_float+0x8a>
 800340e:	6863      	ldr	r3, [r4, #4]
 8003410:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	d142      	bne.n	800349e <_printf_float+0x172>
 8003418:	2306      	movs	r3, #6
 800341a:	6063      	str	r3, [r4, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	9206      	str	r2, [sp, #24]
 8003420:	aa0e      	add	r2, sp, #56	; 0x38
 8003422:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003426:	aa0d      	add	r2, sp, #52	; 0x34
 8003428:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800342c:	9203      	str	r2, [sp, #12]
 800342e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003432:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003436:	6023      	str	r3, [r4, #0]
 8003438:	6863      	ldr	r3, [r4, #4]
 800343a:	4642      	mov	r2, r8
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	4628      	mov	r0, r5
 8003440:	4653      	mov	r3, sl
 8003442:	910b      	str	r1, [sp, #44]	; 0x2c
 8003444:	f7ff fed4 	bl	80031f0 <__cvt>
 8003448:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800344a:	4680      	mov	r8, r0
 800344c:	2947      	cmp	r1, #71	; 0x47
 800344e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003450:	d108      	bne.n	8003464 <_printf_float+0x138>
 8003452:	1cc8      	adds	r0, r1, #3
 8003454:	db02      	blt.n	800345c <_printf_float+0x130>
 8003456:	6863      	ldr	r3, [r4, #4]
 8003458:	4299      	cmp	r1, r3
 800345a:	dd40      	ble.n	80034de <_printf_float+0x1b2>
 800345c:	f1a9 0902 	sub.w	r9, r9, #2
 8003460:	fa5f f989 	uxtb.w	r9, r9
 8003464:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003468:	d81f      	bhi.n	80034aa <_printf_float+0x17e>
 800346a:	464a      	mov	r2, r9
 800346c:	3901      	subs	r1, #1
 800346e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003472:	910d      	str	r1, [sp, #52]	; 0x34
 8003474:	f7ff ff1b 	bl	80032ae <__exponent>
 8003478:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800347a:	4682      	mov	sl, r0
 800347c:	1813      	adds	r3, r2, r0
 800347e:	2a01      	cmp	r2, #1
 8003480:	6123      	str	r3, [r4, #16]
 8003482:	dc02      	bgt.n	800348a <_printf_float+0x15e>
 8003484:	6822      	ldr	r2, [r4, #0]
 8003486:	07d2      	lsls	r2, r2, #31
 8003488:	d501      	bpl.n	800348e <_printf_float+0x162>
 800348a:	3301      	adds	r3, #1
 800348c:	6123      	str	r3, [r4, #16]
 800348e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003492:	2b00      	cmp	r3, #0
 8003494:	d09b      	beq.n	80033ce <_printf_float+0xa2>
 8003496:	232d      	movs	r3, #45	; 0x2d
 8003498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800349c:	e797      	b.n	80033ce <_printf_float+0xa2>
 800349e:	2947      	cmp	r1, #71	; 0x47
 80034a0:	d1bc      	bne.n	800341c <_printf_float+0xf0>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1ba      	bne.n	800341c <_printf_float+0xf0>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e7b7      	b.n	800341a <_printf_float+0xee>
 80034aa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80034ae:	d118      	bne.n	80034e2 <_printf_float+0x1b6>
 80034b0:	2900      	cmp	r1, #0
 80034b2:	6863      	ldr	r3, [r4, #4]
 80034b4:	dd0b      	ble.n	80034ce <_printf_float+0x1a2>
 80034b6:	6121      	str	r1, [r4, #16]
 80034b8:	b913      	cbnz	r3, 80034c0 <_printf_float+0x194>
 80034ba:	6822      	ldr	r2, [r4, #0]
 80034bc:	07d0      	lsls	r0, r2, #31
 80034be:	d502      	bpl.n	80034c6 <_printf_float+0x19a>
 80034c0:	3301      	adds	r3, #1
 80034c2:	440b      	add	r3, r1
 80034c4:	6123      	str	r3, [r4, #16]
 80034c6:	f04f 0a00 	mov.w	sl, #0
 80034ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80034cc:	e7df      	b.n	800348e <_printf_float+0x162>
 80034ce:	b913      	cbnz	r3, 80034d6 <_printf_float+0x1aa>
 80034d0:	6822      	ldr	r2, [r4, #0]
 80034d2:	07d2      	lsls	r2, r2, #31
 80034d4:	d501      	bpl.n	80034da <_printf_float+0x1ae>
 80034d6:	3302      	adds	r3, #2
 80034d8:	e7f4      	b.n	80034c4 <_printf_float+0x198>
 80034da:	2301      	movs	r3, #1
 80034dc:	e7f2      	b.n	80034c4 <_printf_float+0x198>
 80034de:	f04f 0967 	mov.w	r9, #103	; 0x67
 80034e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034e4:	4299      	cmp	r1, r3
 80034e6:	db05      	blt.n	80034f4 <_printf_float+0x1c8>
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	6121      	str	r1, [r4, #16]
 80034ec:	07d8      	lsls	r0, r3, #31
 80034ee:	d5ea      	bpl.n	80034c6 <_printf_float+0x19a>
 80034f0:	1c4b      	adds	r3, r1, #1
 80034f2:	e7e7      	b.n	80034c4 <_printf_float+0x198>
 80034f4:	2900      	cmp	r1, #0
 80034f6:	bfcc      	ite	gt
 80034f8:	2201      	movgt	r2, #1
 80034fa:	f1c1 0202 	rsble	r2, r1, #2
 80034fe:	4413      	add	r3, r2
 8003500:	e7e0      	b.n	80034c4 <_printf_float+0x198>
 8003502:	6823      	ldr	r3, [r4, #0]
 8003504:	055a      	lsls	r2, r3, #21
 8003506:	d407      	bmi.n	8003518 <_printf_float+0x1ec>
 8003508:	6923      	ldr	r3, [r4, #16]
 800350a:	4642      	mov	r2, r8
 800350c:	4631      	mov	r1, r6
 800350e:	4628      	mov	r0, r5
 8003510:	47b8      	blx	r7
 8003512:	3001      	adds	r0, #1
 8003514:	d12b      	bne.n	800356e <_printf_float+0x242>
 8003516:	e764      	b.n	80033e2 <_printf_float+0xb6>
 8003518:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800351c:	f240 80dd 	bls.w	80036da <_printf_float+0x3ae>
 8003520:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003524:	2200      	movs	r2, #0
 8003526:	2300      	movs	r3, #0
 8003528:	f7fd fa3e 	bl	80009a8 <__aeabi_dcmpeq>
 800352c:	2800      	cmp	r0, #0
 800352e:	d033      	beq.n	8003598 <_printf_float+0x26c>
 8003530:	2301      	movs	r3, #1
 8003532:	4631      	mov	r1, r6
 8003534:	4628      	mov	r0, r5
 8003536:	4a35      	ldr	r2, [pc, #212]	; (800360c <_printf_float+0x2e0>)
 8003538:	47b8      	blx	r7
 800353a:	3001      	adds	r0, #1
 800353c:	f43f af51 	beq.w	80033e2 <_printf_float+0xb6>
 8003540:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003544:	429a      	cmp	r2, r3
 8003546:	db02      	blt.n	800354e <_printf_float+0x222>
 8003548:	6823      	ldr	r3, [r4, #0]
 800354a:	07d8      	lsls	r0, r3, #31
 800354c:	d50f      	bpl.n	800356e <_printf_float+0x242>
 800354e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003552:	4631      	mov	r1, r6
 8003554:	4628      	mov	r0, r5
 8003556:	47b8      	blx	r7
 8003558:	3001      	adds	r0, #1
 800355a:	f43f af42 	beq.w	80033e2 <_printf_float+0xb6>
 800355e:	f04f 0800 	mov.w	r8, #0
 8003562:	f104 091a 	add.w	r9, r4, #26
 8003566:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003568:	3b01      	subs	r3, #1
 800356a:	4543      	cmp	r3, r8
 800356c:	dc09      	bgt.n	8003582 <_printf_float+0x256>
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	079b      	lsls	r3, r3, #30
 8003572:	f100 8102 	bmi.w	800377a <_printf_float+0x44e>
 8003576:	68e0      	ldr	r0, [r4, #12]
 8003578:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800357a:	4298      	cmp	r0, r3
 800357c:	bfb8      	it	lt
 800357e:	4618      	movlt	r0, r3
 8003580:	e731      	b.n	80033e6 <_printf_float+0xba>
 8003582:	2301      	movs	r3, #1
 8003584:	464a      	mov	r2, r9
 8003586:	4631      	mov	r1, r6
 8003588:	4628      	mov	r0, r5
 800358a:	47b8      	blx	r7
 800358c:	3001      	adds	r0, #1
 800358e:	f43f af28 	beq.w	80033e2 <_printf_float+0xb6>
 8003592:	f108 0801 	add.w	r8, r8, #1
 8003596:	e7e6      	b.n	8003566 <_printf_float+0x23a>
 8003598:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800359a:	2b00      	cmp	r3, #0
 800359c:	dc38      	bgt.n	8003610 <_printf_float+0x2e4>
 800359e:	2301      	movs	r3, #1
 80035a0:	4631      	mov	r1, r6
 80035a2:	4628      	mov	r0, r5
 80035a4:	4a19      	ldr	r2, [pc, #100]	; (800360c <_printf_float+0x2e0>)
 80035a6:	47b8      	blx	r7
 80035a8:	3001      	adds	r0, #1
 80035aa:	f43f af1a 	beq.w	80033e2 <_printf_float+0xb6>
 80035ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035b2:	4313      	orrs	r3, r2
 80035b4:	d102      	bne.n	80035bc <_printf_float+0x290>
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	07d9      	lsls	r1, r3, #31
 80035ba:	d5d8      	bpl.n	800356e <_printf_float+0x242>
 80035bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035c0:	4631      	mov	r1, r6
 80035c2:	4628      	mov	r0, r5
 80035c4:	47b8      	blx	r7
 80035c6:	3001      	adds	r0, #1
 80035c8:	f43f af0b 	beq.w	80033e2 <_printf_float+0xb6>
 80035cc:	f04f 0900 	mov.w	r9, #0
 80035d0:	f104 0a1a 	add.w	sl, r4, #26
 80035d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035d6:	425b      	negs	r3, r3
 80035d8:	454b      	cmp	r3, r9
 80035da:	dc01      	bgt.n	80035e0 <_printf_float+0x2b4>
 80035dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035de:	e794      	b.n	800350a <_printf_float+0x1de>
 80035e0:	2301      	movs	r3, #1
 80035e2:	4652      	mov	r2, sl
 80035e4:	4631      	mov	r1, r6
 80035e6:	4628      	mov	r0, r5
 80035e8:	47b8      	blx	r7
 80035ea:	3001      	adds	r0, #1
 80035ec:	f43f aef9 	beq.w	80033e2 <_printf_float+0xb6>
 80035f0:	f109 0901 	add.w	r9, r9, #1
 80035f4:	e7ee      	b.n	80035d4 <_printf_float+0x2a8>
 80035f6:	bf00      	nop
 80035f8:	7fefffff 	.word	0x7fefffff
 80035fc:	08005d90 	.word	0x08005d90
 8003600:	08005d94 	.word	0x08005d94
 8003604:	08005d9c 	.word	0x08005d9c
 8003608:	08005d98 	.word	0x08005d98
 800360c:	08005da0 	.word	0x08005da0
 8003610:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003612:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003614:	429a      	cmp	r2, r3
 8003616:	bfa8      	it	ge
 8003618:	461a      	movge	r2, r3
 800361a:	2a00      	cmp	r2, #0
 800361c:	4691      	mov	r9, r2
 800361e:	dc37      	bgt.n	8003690 <_printf_float+0x364>
 8003620:	f04f 0b00 	mov.w	fp, #0
 8003624:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003628:	f104 021a 	add.w	r2, r4, #26
 800362c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003630:	ebaa 0309 	sub.w	r3, sl, r9
 8003634:	455b      	cmp	r3, fp
 8003636:	dc33      	bgt.n	80036a0 <_printf_float+0x374>
 8003638:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800363c:	429a      	cmp	r2, r3
 800363e:	db3b      	blt.n	80036b8 <_printf_float+0x38c>
 8003640:	6823      	ldr	r3, [r4, #0]
 8003642:	07da      	lsls	r2, r3, #31
 8003644:	d438      	bmi.n	80036b8 <_printf_float+0x38c>
 8003646:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003648:	990d      	ldr	r1, [sp, #52]	; 0x34
 800364a:	eba3 020a 	sub.w	r2, r3, sl
 800364e:	eba3 0901 	sub.w	r9, r3, r1
 8003652:	4591      	cmp	r9, r2
 8003654:	bfa8      	it	ge
 8003656:	4691      	movge	r9, r2
 8003658:	f1b9 0f00 	cmp.w	r9, #0
 800365c:	dc34      	bgt.n	80036c8 <_printf_float+0x39c>
 800365e:	f04f 0800 	mov.w	r8, #0
 8003662:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003666:	f104 0a1a 	add.w	sl, r4, #26
 800366a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	eba3 0309 	sub.w	r3, r3, r9
 8003674:	4543      	cmp	r3, r8
 8003676:	f77f af7a 	ble.w	800356e <_printf_float+0x242>
 800367a:	2301      	movs	r3, #1
 800367c:	4652      	mov	r2, sl
 800367e:	4631      	mov	r1, r6
 8003680:	4628      	mov	r0, r5
 8003682:	47b8      	blx	r7
 8003684:	3001      	adds	r0, #1
 8003686:	f43f aeac 	beq.w	80033e2 <_printf_float+0xb6>
 800368a:	f108 0801 	add.w	r8, r8, #1
 800368e:	e7ec      	b.n	800366a <_printf_float+0x33e>
 8003690:	4613      	mov	r3, r2
 8003692:	4631      	mov	r1, r6
 8003694:	4642      	mov	r2, r8
 8003696:	4628      	mov	r0, r5
 8003698:	47b8      	blx	r7
 800369a:	3001      	adds	r0, #1
 800369c:	d1c0      	bne.n	8003620 <_printf_float+0x2f4>
 800369e:	e6a0      	b.n	80033e2 <_printf_float+0xb6>
 80036a0:	2301      	movs	r3, #1
 80036a2:	4631      	mov	r1, r6
 80036a4:	4628      	mov	r0, r5
 80036a6:	920b      	str	r2, [sp, #44]	; 0x2c
 80036a8:	47b8      	blx	r7
 80036aa:	3001      	adds	r0, #1
 80036ac:	f43f ae99 	beq.w	80033e2 <_printf_float+0xb6>
 80036b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80036b2:	f10b 0b01 	add.w	fp, fp, #1
 80036b6:	e7b9      	b.n	800362c <_printf_float+0x300>
 80036b8:	4631      	mov	r1, r6
 80036ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036be:	4628      	mov	r0, r5
 80036c0:	47b8      	blx	r7
 80036c2:	3001      	adds	r0, #1
 80036c4:	d1bf      	bne.n	8003646 <_printf_float+0x31a>
 80036c6:	e68c      	b.n	80033e2 <_printf_float+0xb6>
 80036c8:	464b      	mov	r3, r9
 80036ca:	4631      	mov	r1, r6
 80036cc:	4628      	mov	r0, r5
 80036ce:	eb08 020a 	add.w	r2, r8, sl
 80036d2:	47b8      	blx	r7
 80036d4:	3001      	adds	r0, #1
 80036d6:	d1c2      	bne.n	800365e <_printf_float+0x332>
 80036d8:	e683      	b.n	80033e2 <_printf_float+0xb6>
 80036da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036dc:	2a01      	cmp	r2, #1
 80036de:	dc01      	bgt.n	80036e4 <_printf_float+0x3b8>
 80036e0:	07db      	lsls	r3, r3, #31
 80036e2:	d537      	bpl.n	8003754 <_printf_float+0x428>
 80036e4:	2301      	movs	r3, #1
 80036e6:	4642      	mov	r2, r8
 80036e8:	4631      	mov	r1, r6
 80036ea:	4628      	mov	r0, r5
 80036ec:	47b8      	blx	r7
 80036ee:	3001      	adds	r0, #1
 80036f0:	f43f ae77 	beq.w	80033e2 <_printf_float+0xb6>
 80036f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036f8:	4631      	mov	r1, r6
 80036fa:	4628      	mov	r0, r5
 80036fc:	47b8      	blx	r7
 80036fe:	3001      	adds	r0, #1
 8003700:	f43f ae6f 	beq.w	80033e2 <_printf_float+0xb6>
 8003704:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003708:	2200      	movs	r2, #0
 800370a:	2300      	movs	r3, #0
 800370c:	f7fd f94c 	bl	80009a8 <__aeabi_dcmpeq>
 8003710:	b9d8      	cbnz	r0, 800374a <_printf_float+0x41e>
 8003712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003714:	f108 0201 	add.w	r2, r8, #1
 8003718:	3b01      	subs	r3, #1
 800371a:	4631      	mov	r1, r6
 800371c:	4628      	mov	r0, r5
 800371e:	47b8      	blx	r7
 8003720:	3001      	adds	r0, #1
 8003722:	d10e      	bne.n	8003742 <_printf_float+0x416>
 8003724:	e65d      	b.n	80033e2 <_printf_float+0xb6>
 8003726:	2301      	movs	r3, #1
 8003728:	464a      	mov	r2, r9
 800372a:	4631      	mov	r1, r6
 800372c:	4628      	mov	r0, r5
 800372e:	47b8      	blx	r7
 8003730:	3001      	adds	r0, #1
 8003732:	f43f ae56 	beq.w	80033e2 <_printf_float+0xb6>
 8003736:	f108 0801 	add.w	r8, r8, #1
 800373a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800373c:	3b01      	subs	r3, #1
 800373e:	4543      	cmp	r3, r8
 8003740:	dcf1      	bgt.n	8003726 <_printf_float+0x3fa>
 8003742:	4653      	mov	r3, sl
 8003744:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003748:	e6e0      	b.n	800350c <_printf_float+0x1e0>
 800374a:	f04f 0800 	mov.w	r8, #0
 800374e:	f104 091a 	add.w	r9, r4, #26
 8003752:	e7f2      	b.n	800373a <_printf_float+0x40e>
 8003754:	2301      	movs	r3, #1
 8003756:	4642      	mov	r2, r8
 8003758:	e7df      	b.n	800371a <_printf_float+0x3ee>
 800375a:	2301      	movs	r3, #1
 800375c:	464a      	mov	r2, r9
 800375e:	4631      	mov	r1, r6
 8003760:	4628      	mov	r0, r5
 8003762:	47b8      	blx	r7
 8003764:	3001      	adds	r0, #1
 8003766:	f43f ae3c 	beq.w	80033e2 <_printf_float+0xb6>
 800376a:	f108 0801 	add.w	r8, r8, #1
 800376e:	68e3      	ldr	r3, [r4, #12]
 8003770:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003772:	1a5b      	subs	r3, r3, r1
 8003774:	4543      	cmp	r3, r8
 8003776:	dcf0      	bgt.n	800375a <_printf_float+0x42e>
 8003778:	e6fd      	b.n	8003576 <_printf_float+0x24a>
 800377a:	f04f 0800 	mov.w	r8, #0
 800377e:	f104 0919 	add.w	r9, r4, #25
 8003782:	e7f4      	b.n	800376e <_printf_float+0x442>

08003784 <_printf_common>:
 8003784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003788:	4616      	mov	r6, r2
 800378a:	4699      	mov	r9, r3
 800378c:	688a      	ldr	r2, [r1, #8]
 800378e:	690b      	ldr	r3, [r1, #16]
 8003790:	4607      	mov	r7, r0
 8003792:	4293      	cmp	r3, r2
 8003794:	bfb8      	it	lt
 8003796:	4613      	movlt	r3, r2
 8003798:	6033      	str	r3, [r6, #0]
 800379a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800379e:	460c      	mov	r4, r1
 80037a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037a4:	b10a      	cbz	r2, 80037aa <_printf_common+0x26>
 80037a6:	3301      	adds	r3, #1
 80037a8:	6033      	str	r3, [r6, #0]
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	0699      	lsls	r1, r3, #26
 80037ae:	bf42      	ittt	mi
 80037b0:	6833      	ldrmi	r3, [r6, #0]
 80037b2:	3302      	addmi	r3, #2
 80037b4:	6033      	strmi	r3, [r6, #0]
 80037b6:	6825      	ldr	r5, [r4, #0]
 80037b8:	f015 0506 	ands.w	r5, r5, #6
 80037bc:	d106      	bne.n	80037cc <_printf_common+0x48>
 80037be:	f104 0a19 	add.w	sl, r4, #25
 80037c2:	68e3      	ldr	r3, [r4, #12]
 80037c4:	6832      	ldr	r2, [r6, #0]
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	42ab      	cmp	r3, r5
 80037ca:	dc28      	bgt.n	800381e <_printf_common+0x9a>
 80037cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037d0:	1e13      	subs	r3, r2, #0
 80037d2:	6822      	ldr	r2, [r4, #0]
 80037d4:	bf18      	it	ne
 80037d6:	2301      	movne	r3, #1
 80037d8:	0692      	lsls	r2, r2, #26
 80037da:	d42d      	bmi.n	8003838 <_printf_common+0xb4>
 80037dc:	4649      	mov	r1, r9
 80037de:	4638      	mov	r0, r7
 80037e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037e4:	47c0      	blx	r8
 80037e6:	3001      	adds	r0, #1
 80037e8:	d020      	beq.n	800382c <_printf_common+0xa8>
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	68e5      	ldr	r5, [r4, #12]
 80037ee:	f003 0306 	and.w	r3, r3, #6
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	bf18      	it	ne
 80037f6:	2500      	movne	r5, #0
 80037f8:	6832      	ldr	r2, [r6, #0]
 80037fa:	f04f 0600 	mov.w	r6, #0
 80037fe:	68a3      	ldr	r3, [r4, #8]
 8003800:	bf08      	it	eq
 8003802:	1aad      	subeq	r5, r5, r2
 8003804:	6922      	ldr	r2, [r4, #16]
 8003806:	bf08      	it	eq
 8003808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800380c:	4293      	cmp	r3, r2
 800380e:	bfc4      	itt	gt
 8003810:	1a9b      	subgt	r3, r3, r2
 8003812:	18ed      	addgt	r5, r5, r3
 8003814:	341a      	adds	r4, #26
 8003816:	42b5      	cmp	r5, r6
 8003818:	d11a      	bne.n	8003850 <_printf_common+0xcc>
 800381a:	2000      	movs	r0, #0
 800381c:	e008      	b.n	8003830 <_printf_common+0xac>
 800381e:	2301      	movs	r3, #1
 8003820:	4652      	mov	r2, sl
 8003822:	4649      	mov	r1, r9
 8003824:	4638      	mov	r0, r7
 8003826:	47c0      	blx	r8
 8003828:	3001      	adds	r0, #1
 800382a:	d103      	bne.n	8003834 <_printf_common+0xb0>
 800382c:	f04f 30ff 	mov.w	r0, #4294967295
 8003830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003834:	3501      	adds	r5, #1
 8003836:	e7c4      	b.n	80037c2 <_printf_common+0x3e>
 8003838:	2030      	movs	r0, #48	; 0x30
 800383a:	18e1      	adds	r1, r4, r3
 800383c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003846:	4422      	add	r2, r4
 8003848:	3302      	adds	r3, #2
 800384a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800384e:	e7c5      	b.n	80037dc <_printf_common+0x58>
 8003850:	2301      	movs	r3, #1
 8003852:	4622      	mov	r2, r4
 8003854:	4649      	mov	r1, r9
 8003856:	4638      	mov	r0, r7
 8003858:	47c0      	blx	r8
 800385a:	3001      	adds	r0, #1
 800385c:	d0e6      	beq.n	800382c <_printf_common+0xa8>
 800385e:	3601      	adds	r6, #1
 8003860:	e7d9      	b.n	8003816 <_printf_common+0x92>
	...

08003864 <_printf_i>:
 8003864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003868:	7e0f      	ldrb	r7, [r1, #24]
 800386a:	4691      	mov	r9, r2
 800386c:	2f78      	cmp	r7, #120	; 0x78
 800386e:	4680      	mov	r8, r0
 8003870:	460c      	mov	r4, r1
 8003872:	469a      	mov	sl, r3
 8003874:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003876:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800387a:	d807      	bhi.n	800388c <_printf_i+0x28>
 800387c:	2f62      	cmp	r7, #98	; 0x62
 800387e:	d80a      	bhi.n	8003896 <_printf_i+0x32>
 8003880:	2f00      	cmp	r7, #0
 8003882:	f000 80d9 	beq.w	8003a38 <_printf_i+0x1d4>
 8003886:	2f58      	cmp	r7, #88	; 0x58
 8003888:	f000 80a4 	beq.w	80039d4 <_printf_i+0x170>
 800388c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003890:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003894:	e03a      	b.n	800390c <_printf_i+0xa8>
 8003896:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800389a:	2b15      	cmp	r3, #21
 800389c:	d8f6      	bhi.n	800388c <_printf_i+0x28>
 800389e:	a101      	add	r1, pc, #4	; (adr r1, 80038a4 <_printf_i+0x40>)
 80038a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038a4:	080038fd 	.word	0x080038fd
 80038a8:	08003911 	.word	0x08003911
 80038ac:	0800388d 	.word	0x0800388d
 80038b0:	0800388d 	.word	0x0800388d
 80038b4:	0800388d 	.word	0x0800388d
 80038b8:	0800388d 	.word	0x0800388d
 80038bc:	08003911 	.word	0x08003911
 80038c0:	0800388d 	.word	0x0800388d
 80038c4:	0800388d 	.word	0x0800388d
 80038c8:	0800388d 	.word	0x0800388d
 80038cc:	0800388d 	.word	0x0800388d
 80038d0:	08003a1f 	.word	0x08003a1f
 80038d4:	08003941 	.word	0x08003941
 80038d8:	08003a01 	.word	0x08003a01
 80038dc:	0800388d 	.word	0x0800388d
 80038e0:	0800388d 	.word	0x0800388d
 80038e4:	08003a41 	.word	0x08003a41
 80038e8:	0800388d 	.word	0x0800388d
 80038ec:	08003941 	.word	0x08003941
 80038f0:	0800388d 	.word	0x0800388d
 80038f4:	0800388d 	.word	0x0800388d
 80038f8:	08003a09 	.word	0x08003a09
 80038fc:	682b      	ldr	r3, [r5, #0]
 80038fe:	1d1a      	adds	r2, r3, #4
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	602a      	str	r2, [r5, #0]
 8003904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003908:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800390c:	2301      	movs	r3, #1
 800390e:	e0a4      	b.n	8003a5a <_printf_i+0x1f6>
 8003910:	6820      	ldr	r0, [r4, #0]
 8003912:	6829      	ldr	r1, [r5, #0]
 8003914:	0606      	lsls	r6, r0, #24
 8003916:	f101 0304 	add.w	r3, r1, #4
 800391a:	d50a      	bpl.n	8003932 <_printf_i+0xce>
 800391c:	680e      	ldr	r6, [r1, #0]
 800391e:	602b      	str	r3, [r5, #0]
 8003920:	2e00      	cmp	r6, #0
 8003922:	da03      	bge.n	800392c <_printf_i+0xc8>
 8003924:	232d      	movs	r3, #45	; 0x2d
 8003926:	4276      	negs	r6, r6
 8003928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800392c:	230a      	movs	r3, #10
 800392e:	485e      	ldr	r0, [pc, #376]	; (8003aa8 <_printf_i+0x244>)
 8003930:	e019      	b.n	8003966 <_printf_i+0x102>
 8003932:	680e      	ldr	r6, [r1, #0]
 8003934:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003938:	602b      	str	r3, [r5, #0]
 800393a:	bf18      	it	ne
 800393c:	b236      	sxthne	r6, r6
 800393e:	e7ef      	b.n	8003920 <_printf_i+0xbc>
 8003940:	682b      	ldr	r3, [r5, #0]
 8003942:	6820      	ldr	r0, [r4, #0]
 8003944:	1d19      	adds	r1, r3, #4
 8003946:	6029      	str	r1, [r5, #0]
 8003948:	0601      	lsls	r1, r0, #24
 800394a:	d501      	bpl.n	8003950 <_printf_i+0xec>
 800394c:	681e      	ldr	r6, [r3, #0]
 800394e:	e002      	b.n	8003956 <_printf_i+0xf2>
 8003950:	0646      	lsls	r6, r0, #25
 8003952:	d5fb      	bpl.n	800394c <_printf_i+0xe8>
 8003954:	881e      	ldrh	r6, [r3, #0]
 8003956:	2f6f      	cmp	r7, #111	; 0x6f
 8003958:	bf0c      	ite	eq
 800395a:	2308      	moveq	r3, #8
 800395c:	230a      	movne	r3, #10
 800395e:	4852      	ldr	r0, [pc, #328]	; (8003aa8 <_printf_i+0x244>)
 8003960:	2100      	movs	r1, #0
 8003962:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003966:	6865      	ldr	r5, [r4, #4]
 8003968:	2d00      	cmp	r5, #0
 800396a:	bfa8      	it	ge
 800396c:	6821      	ldrge	r1, [r4, #0]
 800396e:	60a5      	str	r5, [r4, #8]
 8003970:	bfa4      	itt	ge
 8003972:	f021 0104 	bicge.w	r1, r1, #4
 8003976:	6021      	strge	r1, [r4, #0]
 8003978:	b90e      	cbnz	r6, 800397e <_printf_i+0x11a>
 800397a:	2d00      	cmp	r5, #0
 800397c:	d04d      	beq.n	8003a1a <_printf_i+0x1b6>
 800397e:	4615      	mov	r5, r2
 8003980:	fbb6 f1f3 	udiv	r1, r6, r3
 8003984:	fb03 6711 	mls	r7, r3, r1, r6
 8003988:	5dc7      	ldrb	r7, [r0, r7]
 800398a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800398e:	4637      	mov	r7, r6
 8003990:	42bb      	cmp	r3, r7
 8003992:	460e      	mov	r6, r1
 8003994:	d9f4      	bls.n	8003980 <_printf_i+0x11c>
 8003996:	2b08      	cmp	r3, #8
 8003998:	d10b      	bne.n	80039b2 <_printf_i+0x14e>
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	07de      	lsls	r6, r3, #31
 800399e:	d508      	bpl.n	80039b2 <_printf_i+0x14e>
 80039a0:	6923      	ldr	r3, [r4, #16]
 80039a2:	6861      	ldr	r1, [r4, #4]
 80039a4:	4299      	cmp	r1, r3
 80039a6:	bfde      	ittt	le
 80039a8:	2330      	movle	r3, #48	; 0x30
 80039aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039b2:	1b52      	subs	r2, r2, r5
 80039b4:	6122      	str	r2, [r4, #16]
 80039b6:	464b      	mov	r3, r9
 80039b8:	4621      	mov	r1, r4
 80039ba:	4640      	mov	r0, r8
 80039bc:	f8cd a000 	str.w	sl, [sp]
 80039c0:	aa03      	add	r2, sp, #12
 80039c2:	f7ff fedf 	bl	8003784 <_printf_common>
 80039c6:	3001      	adds	r0, #1
 80039c8:	d14c      	bne.n	8003a64 <_printf_i+0x200>
 80039ca:	f04f 30ff 	mov.w	r0, #4294967295
 80039ce:	b004      	add	sp, #16
 80039d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039d4:	4834      	ldr	r0, [pc, #208]	; (8003aa8 <_printf_i+0x244>)
 80039d6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80039da:	6829      	ldr	r1, [r5, #0]
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	f851 6b04 	ldr.w	r6, [r1], #4
 80039e2:	6029      	str	r1, [r5, #0]
 80039e4:	061d      	lsls	r5, r3, #24
 80039e6:	d514      	bpl.n	8003a12 <_printf_i+0x1ae>
 80039e8:	07df      	lsls	r7, r3, #31
 80039ea:	bf44      	itt	mi
 80039ec:	f043 0320 	orrmi.w	r3, r3, #32
 80039f0:	6023      	strmi	r3, [r4, #0]
 80039f2:	b91e      	cbnz	r6, 80039fc <_printf_i+0x198>
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	f023 0320 	bic.w	r3, r3, #32
 80039fa:	6023      	str	r3, [r4, #0]
 80039fc:	2310      	movs	r3, #16
 80039fe:	e7af      	b.n	8003960 <_printf_i+0xfc>
 8003a00:	6823      	ldr	r3, [r4, #0]
 8003a02:	f043 0320 	orr.w	r3, r3, #32
 8003a06:	6023      	str	r3, [r4, #0]
 8003a08:	2378      	movs	r3, #120	; 0x78
 8003a0a:	4828      	ldr	r0, [pc, #160]	; (8003aac <_printf_i+0x248>)
 8003a0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a10:	e7e3      	b.n	80039da <_printf_i+0x176>
 8003a12:	0659      	lsls	r1, r3, #25
 8003a14:	bf48      	it	mi
 8003a16:	b2b6      	uxthmi	r6, r6
 8003a18:	e7e6      	b.n	80039e8 <_printf_i+0x184>
 8003a1a:	4615      	mov	r5, r2
 8003a1c:	e7bb      	b.n	8003996 <_printf_i+0x132>
 8003a1e:	682b      	ldr	r3, [r5, #0]
 8003a20:	6826      	ldr	r6, [r4, #0]
 8003a22:	1d18      	adds	r0, r3, #4
 8003a24:	6961      	ldr	r1, [r4, #20]
 8003a26:	6028      	str	r0, [r5, #0]
 8003a28:	0635      	lsls	r5, r6, #24
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	d501      	bpl.n	8003a32 <_printf_i+0x1ce>
 8003a2e:	6019      	str	r1, [r3, #0]
 8003a30:	e002      	b.n	8003a38 <_printf_i+0x1d4>
 8003a32:	0670      	lsls	r0, r6, #25
 8003a34:	d5fb      	bpl.n	8003a2e <_printf_i+0x1ca>
 8003a36:	8019      	strh	r1, [r3, #0]
 8003a38:	2300      	movs	r3, #0
 8003a3a:	4615      	mov	r5, r2
 8003a3c:	6123      	str	r3, [r4, #16]
 8003a3e:	e7ba      	b.n	80039b6 <_printf_i+0x152>
 8003a40:	682b      	ldr	r3, [r5, #0]
 8003a42:	2100      	movs	r1, #0
 8003a44:	1d1a      	adds	r2, r3, #4
 8003a46:	602a      	str	r2, [r5, #0]
 8003a48:	681d      	ldr	r5, [r3, #0]
 8003a4a:	6862      	ldr	r2, [r4, #4]
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	f001 fa21 	bl	8004e94 <memchr>
 8003a52:	b108      	cbz	r0, 8003a58 <_printf_i+0x1f4>
 8003a54:	1b40      	subs	r0, r0, r5
 8003a56:	6060      	str	r0, [r4, #4]
 8003a58:	6863      	ldr	r3, [r4, #4]
 8003a5a:	6123      	str	r3, [r4, #16]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a62:	e7a8      	b.n	80039b6 <_printf_i+0x152>
 8003a64:	462a      	mov	r2, r5
 8003a66:	4649      	mov	r1, r9
 8003a68:	4640      	mov	r0, r8
 8003a6a:	6923      	ldr	r3, [r4, #16]
 8003a6c:	47d0      	blx	sl
 8003a6e:	3001      	adds	r0, #1
 8003a70:	d0ab      	beq.n	80039ca <_printf_i+0x166>
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	079b      	lsls	r3, r3, #30
 8003a76:	d413      	bmi.n	8003aa0 <_printf_i+0x23c>
 8003a78:	68e0      	ldr	r0, [r4, #12]
 8003a7a:	9b03      	ldr	r3, [sp, #12]
 8003a7c:	4298      	cmp	r0, r3
 8003a7e:	bfb8      	it	lt
 8003a80:	4618      	movlt	r0, r3
 8003a82:	e7a4      	b.n	80039ce <_printf_i+0x16a>
 8003a84:	2301      	movs	r3, #1
 8003a86:	4632      	mov	r2, r6
 8003a88:	4649      	mov	r1, r9
 8003a8a:	4640      	mov	r0, r8
 8003a8c:	47d0      	blx	sl
 8003a8e:	3001      	adds	r0, #1
 8003a90:	d09b      	beq.n	80039ca <_printf_i+0x166>
 8003a92:	3501      	adds	r5, #1
 8003a94:	68e3      	ldr	r3, [r4, #12]
 8003a96:	9903      	ldr	r1, [sp, #12]
 8003a98:	1a5b      	subs	r3, r3, r1
 8003a9a:	42ab      	cmp	r3, r5
 8003a9c:	dcf2      	bgt.n	8003a84 <_printf_i+0x220>
 8003a9e:	e7eb      	b.n	8003a78 <_printf_i+0x214>
 8003aa0:	2500      	movs	r5, #0
 8003aa2:	f104 0619 	add.w	r6, r4, #25
 8003aa6:	e7f5      	b.n	8003a94 <_printf_i+0x230>
 8003aa8:	08005da2 	.word	0x08005da2
 8003aac:	08005db3 	.word	0x08005db3

08003ab0 <iprintf>:
 8003ab0:	b40f      	push	{r0, r1, r2, r3}
 8003ab2:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <iprintf+0x2c>)
 8003ab4:	b513      	push	{r0, r1, r4, lr}
 8003ab6:	681c      	ldr	r4, [r3, #0]
 8003ab8:	b124      	cbz	r4, 8003ac4 <iprintf+0x14>
 8003aba:	69a3      	ldr	r3, [r4, #24]
 8003abc:	b913      	cbnz	r3, 8003ac4 <iprintf+0x14>
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f001 f8d6 	bl	8004c70 <__sinit>
 8003ac4:	ab05      	add	r3, sp, #20
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	9a04      	ldr	r2, [sp, #16]
 8003aca:	68a1      	ldr	r1, [r4, #8]
 8003acc:	9301      	str	r3, [sp, #4]
 8003ace:	f001 fe97 	bl	8005800 <_vfiprintf_r>
 8003ad2:	b002      	add	sp, #8
 8003ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ad8:	b004      	add	sp, #16
 8003ada:	4770      	bx	lr
 8003adc:	2000000c 	.word	0x2000000c

08003ae0 <_puts_r>:
 8003ae0:	b570      	push	{r4, r5, r6, lr}
 8003ae2:	460e      	mov	r6, r1
 8003ae4:	4605      	mov	r5, r0
 8003ae6:	b118      	cbz	r0, 8003af0 <_puts_r+0x10>
 8003ae8:	6983      	ldr	r3, [r0, #24]
 8003aea:	b90b      	cbnz	r3, 8003af0 <_puts_r+0x10>
 8003aec:	f001 f8c0 	bl	8004c70 <__sinit>
 8003af0:	69ab      	ldr	r3, [r5, #24]
 8003af2:	68ac      	ldr	r4, [r5, #8]
 8003af4:	b913      	cbnz	r3, 8003afc <_puts_r+0x1c>
 8003af6:	4628      	mov	r0, r5
 8003af8:	f001 f8ba 	bl	8004c70 <__sinit>
 8003afc:	4b2c      	ldr	r3, [pc, #176]	; (8003bb0 <_puts_r+0xd0>)
 8003afe:	429c      	cmp	r4, r3
 8003b00:	d120      	bne.n	8003b44 <_puts_r+0x64>
 8003b02:	686c      	ldr	r4, [r5, #4]
 8003b04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b06:	07db      	lsls	r3, r3, #31
 8003b08:	d405      	bmi.n	8003b16 <_puts_r+0x36>
 8003b0a:	89a3      	ldrh	r3, [r4, #12]
 8003b0c:	0598      	lsls	r0, r3, #22
 8003b0e:	d402      	bmi.n	8003b16 <_puts_r+0x36>
 8003b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b12:	f001 f950 	bl	8004db6 <__retarget_lock_acquire_recursive>
 8003b16:	89a3      	ldrh	r3, [r4, #12]
 8003b18:	0719      	lsls	r1, r3, #28
 8003b1a:	d51d      	bpl.n	8003b58 <_puts_r+0x78>
 8003b1c:	6923      	ldr	r3, [r4, #16]
 8003b1e:	b1db      	cbz	r3, 8003b58 <_puts_r+0x78>
 8003b20:	3e01      	subs	r6, #1
 8003b22:	68a3      	ldr	r3, [r4, #8]
 8003b24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	60a3      	str	r3, [r4, #8]
 8003b2c:	bb39      	cbnz	r1, 8003b7e <_puts_r+0x9e>
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	da38      	bge.n	8003ba4 <_puts_r+0xc4>
 8003b32:	4622      	mov	r2, r4
 8003b34:	210a      	movs	r1, #10
 8003b36:	4628      	mov	r0, r5
 8003b38:	f000 f848 	bl	8003bcc <__swbuf_r>
 8003b3c:	3001      	adds	r0, #1
 8003b3e:	d011      	beq.n	8003b64 <_puts_r+0x84>
 8003b40:	250a      	movs	r5, #10
 8003b42:	e011      	b.n	8003b68 <_puts_r+0x88>
 8003b44:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <_puts_r+0xd4>)
 8003b46:	429c      	cmp	r4, r3
 8003b48:	d101      	bne.n	8003b4e <_puts_r+0x6e>
 8003b4a:	68ac      	ldr	r4, [r5, #8]
 8003b4c:	e7da      	b.n	8003b04 <_puts_r+0x24>
 8003b4e:	4b1a      	ldr	r3, [pc, #104]	; (8003bb8 <_puts_r+0xd8>)
 8003b50:	429c      	cmp	r4, r3
 8003b52:	bf08      	it	eq
 8003b54:	68ec      	ldreq	r4, [r5, #12]
 8003b56:	e7d5      	b.n	8003b04 <_puts_r+0x24>
 8003b58:	4621      	mov	r1, r4
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	f000 f888 	bl	8003c70 <__swsetup_r>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d0dd      	beq.n	8003b20 <_puts_r+0x40>
 8003b64:	f04f 35ff 	mov.w	r5, #4294967295
 8003b68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b6a:	07da      	lsls	r2, r3, #31
 8003b6c:	d405      	bmi.n	8003b7a <_puts_r+0x9a>
 8003b6e:	89a3      	ldrh	r3, [r4, #12]
 8003b70:	059b      	lsls	r3, r3, #22
 8003b72:	d402      	bmi.n	8003b7a <_puts_r+0x9a>
 8003b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b76:	f001 f91f 	bl	8004db8 <__retarget_lock_release_recursive>
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	bd70      	pop	{r4, r5, r6, pc}
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	da04      	bge.n	8003b8c <_puts_r+0xac>
 8003b82:	69a2      	ldr	r2, [r4, #24]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	dc06      	bgt.n	8003b96 <_puts_r+0xb6>
 8003b88:	290a      	cmp	r1, #10
 8003b8a:	d004      	beq.n	8003b96 <_puts_r+0xb6>
 8003b8c:	6823      	ldr	r3, [r4, #0]
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	6022      	str	r2, [r4, #0]
 8003b92:	7019      	strb	r1, [r3, #0]
 8003b94:	e7c5      	b.n	8003b22 <_puts_r+0x42>
 8003b96:	4622      	mov	r2, r4
 8003b98:	4628      	mov	r0, r5
 8003b9a:	f000 f817 	bl	8003bcc <__swbuf_r>
 8003b9e:	3001      	adds	r0, #1
 8003ba0:	d1bf      	bne.n	8003b22 <_puts_r+0x42>
 8003ba2:	e7df      	b.n	8003b64 <_puts_r+0x84>
 8003ba4:	250a      	movs	r5, #10
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	6022      	str	r2, [r4, #0]
 8003bac:	701d      	strb	r5, [r3, #0]
 8003bae:	e7db      	b.n	8003b68 <_puts_r+0x88>
 8003bb0:	08005e74 	.word	0x08005e74
 8003bb4:	08005e94 	.word	0x08005e94
 8003bb8:	08005e54 	.word	0x08005e54

08003bbc <puts>:
 8003bbc:	4b02      	ldr	r3, [pc, #8]	; (8003bc8 <puts+0xc>)
 8003bbe:	4601      	mov	r1, r0
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	f7ff bf8d 	b.w	8003ae0 <_puts_r>
 8003bc6:	bf00      	nop
 8003bc8:	2000000c 	.word	0x2000000c

08003bcc <__swbuf_r>:
 8003bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bce:	460e      	mov	r6, r1
 8003bd0:	4614      	mov	r4, r2
 8003bd2:	4605      	mov	r5, r0
 8003bd4:	b118      	cbz	r0, 8003bde <__swbuf_r+0x12>
 8003bd6:	6983      	ldr	r3, [r0, #24]
 8003bd8:	b90b      	cbnz	r3, 8003bde <__swbuf_r+0x12>
 8003bda:	f001 f849 	bl	8004c70 <__sinit>
 8003bde:	4b21      	ldr	r3, [pc, #132]	; (8003c64 <__swbuf_r+0x98>)
 8003be0:	429c      	cmp	r4, r3
 8003be2:	d12b      	bne.n	8003c3c <__swbuf_r+0x70>
 8003be4:	686c      	ldr	r4, [r5, #4]
 8003be6:	69a3      	ldr	r3, [r4, #24]
 8003be8:	60a3      	str	r3, [r4, #8]
 8003bea:	89a3      	ldrh	r3, [r4, #12]
 8003bec:	071a      	lsls	r2, r3, #28
 8003bee:	d52f      	bpl.n	8003c50 <__swbuf_r+0x84>
 8003bf0:	6923      	ldr	r3, [r4, #16]
 8003bf2:	b36b      	cbz	r3, 8003c50 <__swbuf_r+0x84>
 8003bf4:	6923      	ldr	r3, [r4, #16]
 8003bf6:	6820      	ldr	r0, [r4, #0]
 8003bf8:	b2f6      	uxtb	r6, r6
 8003bfa:	1ac0      	subs	r0, r0, r3
 8003bfc:	6963      	ldr	r3, [r4, #20]
 8003bfe:	4637      	mov	r7, r6
 8003c00:	4283      	cmp	r3, r0
 8003c02:	dc04      	bgt.n	8003c0e <__swbuf_r+0x42>
 8003c04:	4621      	mov	r1, r4
 8003c06:	4628      	mov	r0, r5
 8003c08:	f000 ff9e 	bl	8004b48 <_fflush_r>
 8003c0c:	bb30      	cbnz	r0, 8003c5c <__swbuf_r+0x90>
 8003c0e:	68a3      	ldr	r3, [r4, #8]
 8003c10:	3001      	adds	r0, #1
 8003c12:	3b01      	subs	r3, #1
 8003c14:	60a3      	str	r3, [r4, #8]
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	6022      	str	r2, [r4, #0]
 8003c1c:	701e      	strb	r6, [r3, #0]
 8003c1e:	6963      	ldr	r3, [r4, #20]
 8003c20:	4283      	cmp	r3, r0
 8003c22:	d004      	beq.n	8003c2e <__swbuf_r+0x62>
 8003c24:	89a3      	ldrh	r3, [r4, #12]
 8003c26:	07db      	lsls	r3, r3, #31
 8003c28:	d506      	bpl.n	8003c38 <__swbuf_r+0x6c>
 8003c2a:	2e0a      	cmp	r6, #10
 8003c2c:	d104      	bne.n	8003c38 <__swbuf_r+0x6c>
 8003c2e:	4621      	mov	r1, r4
 8003c30:	4628      	mov	r0, r5
 8003c32:	f000 ff89 	bl	8004b48 <_fflush_r>
 8003c36:	b988      	cbnz	r0, 8003c5c <__swbuf_r+0x90>
 8003c38:	4638      	mov	r0, r7
 8003c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <__swbuf_r+0x9c>)
 8003c3e:	429c      	cmp	r4, r3
 8003c40:	d101      	bne.n	8003c46 <__swbuf_r+0x7a>
 8003c42:	68ac      	ldr	r4, [r5, #8]
 8003c44:	e7cf      	b.n	8003be6 <__swbuf_r+0x1a>
 8003c46:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <__swbuf_r+0xa0>)
 8003c48:	429c      	cmp	r4, r3
 8003c4a:	bf08      	it	eq
 8003c4c:	68ec      	ldreq	r4, [r5, #12]
 8003c4e:	e7ca      	b.n	8003be6 <__swbuf_r+0x1a>
 8003c50:	4621      	mov	r1, r4
 8003c52:	4628      	mov	r0, r5
 8003c54:	f000 f80c 	bl	8003c70 <__swsetup_r>
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	d0cb      	beq.n	8003bf4 <__swbuf_r+0x28>
 8003c5c:	f04f 37ff 	mov.w	r7, #4294967295
 8003c60:	e7ea      	b.n	8003c38 <__swbuf_r+0x6c>
 8003c62:	bf00      	nop
 8003c64:	08005e74 	.word	0x08005e74
 8003c68:	08005e94 	.word	0x08005e94
 8003c6c:	08005e54 	.word	0x08005e54

08003c70 <__swsetup_r>:
 8003c70:	4b32      	ldr	r3, [pc, #200]	; (8003d3c <__swsetup_r+0xcc>)
 8003c72:	b570      	push	{r4, r5, r6, lr}
 8003c74:	681d      	ldr	r5, [r3, #0]
 8003c76:	4606      	mov	r6, r0
 8003c78:	460c      	mov	r4, r1
 8003c7a:	b125      	cbz	r5, 8003c86 <__swsetup_r+0x16>
 8003c7c:	69ab      	ldr	r3, [r5, #24]
 8003c7e:	b913      	cbnz	r3, 8003c86 <__swsetup_r+0x16>
 8003c80:	4628      	mov	r0, r5
 8003c82:	f000 fff5 	bl	8004c70 <__sinit>
 8003c86:	4b2e      	ldr	r3, [pc, #184]	; (8003d40 <__swsetup_r+0xd0>)
 8003c88:	429c      	cmp	r4, r3
 8003c8a:	d10f      	bne.n	8003cac <__swsetup_r+0x3c>
 8003c8c:	686c      	ldr	r4, [r5, #4]
 8003c8e:	89a3      	ldrh	r3, [r4, #12]
 8003c90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c94:	0719      	lsls	r1, r3, #28
 8003c96:	d42c      	bmi.n	8003cf2 <__swsetup_r+0x82>
 8003c98:	06dd      	lsls	r5, r3, #27
 8003c9a:	d411      	bmi.n	8003cc0 <__swsetup_r+0x50>
 8003c9c:	2309      	movs	r3, #9
 8003c9e:	6033      	str	r3, [r6, #0]
 8003ca0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca8:	81a3      	strh	r3, [r4, #12]
 8003caa:	e03e      	b.n	8003d2a <__swsetup_r+0xba>
 8003cac:	4b25      	ldr	r3, [pc, #148]	; (8003d44 <__swsetup_r+0xd4>)
 8003cae:	429c      	cmp	r4, r3
 8003cb0:	d101      	bne.n	8003cb6 <__swsetup_r+0x46>
 8003cb2:	68ac      	ldr	r4, [r5, #8]
 8003cb4:	e7eb      	b.n	8003c8e <__swsetup_r+0x1e>
 8003cb6:	4b24      	ldr	r3, [pc, #144]	; (8003d48 <__swsetup_r+0xd8>)
 8003cb8:	429c      	cmp	r4, r3
 8003cba:	bf08      	it	eq
 8003cbc:	68ec      	ldreq	r4, [r5, #12]
 8003cbe:	e7e6      	b.n	8003c8e <__swsetup_r+0x1e>
 8003cc0:	0758      	lsls	r0, r3, #29
 8003cc2:	d512      	bpl.n	8003cea <__swsetup_r+0x7a>
 8003cc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cc6:	b141      	cbz	r1, 8003cda <__swsetup_r+0x6a>
 8003cc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ccc:	4299      	cmp	r1, r3
 8003cce:	d002      	beq.n	8003cd6 <__swsetup_r+0x66>
 8003cd0:	4630      	mov	r0, r6
 8003cd2:	f001 fc91 	bl	80055f8 <_free_r>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	6363      	str	r3, [r4, #52]	; 0x34
 8003cda:	89a3      	ldrh	r3, [r4, #12]
 8003cdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ce0:	81a3      	strh	r3, [r4, #12]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	6063      	str	r3, [r4, #4]
 8003ce6:	6923      	ldr	r3, [r4, #16]
 8003ce8:	6023      	str	r3, [r4, #0]
 8003cea:	89a3      	ldrh	r3, [r4, #12]
 8003cec:	f043 0308 	orr.w	r3, r3, #8
 8003cf0:	81a3      	strh	r3, [r4, #12]
 8003cf2:	6923      	ldr	r3, [r4, #16]
 8003cf4:	b94b      	cbnz	r3, 8003d0a <__swsetup_r+0x9a>
 8003cf6:	89a3      	ldrh	r3, [r4, #12]
 8003cf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d00:	d003      	beq.n	8003d0a <__swsetup_r+0x9a>
 8003d02:	4621      	mov	r1, r4
 8003d04:	4630      	mov	r0, r6
 8003d06:	f001 f87d 	bl	8004e04 <__smakebuf_r>
 8003d0a:	89a0      	ldrh	r0, [r4, #12]
 8003d0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d10:	f010 0301 	ands.w	r3, r0, #1
 8003d14:	d00a      	beq.n	8003d2c <__swsetup_r+0xbc>
 8003d16:	2300      	movs	r3, #0
 8003d18:	60a3      	str	r3, [r4, #8]
 8003d1a:	6963      	ldr	r3, [r4, #20]
 8003d1c:	425b      	negs	r3, r3
 8003d1e:	61a3      	str	r3, [r4, #24]
 8003d20:	6923      	ldr	r3, [r4, #16]
 8003d22:	b943      	cbnz	r3, 8003d36 <__swsetup_r+0xc6>
 8003d24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003d28:	d1ba      	bne.n	8003ca0 <__swsetup_r+0x30>
 8003d2a:	bd70      	pop	{r4, r5, r6, pc}
 8003d2c:	0781      	lsls	r1, r0, #30
 8003d2e:	bf58      	it	pl
 8003d30:	6963      	ldrpl	r3, [r4, #20]
 8003d32:	60a3      	str	r3, [r4, #8]
 8003d34:	e7f4      	b.n	8003d20 <__swsetup_r+0xb0>
 8003d36:	2000      	movs	r0, #0
 8003d38:	e7f7      	b.n	8003d2a <__swsetup_r+0xba>
 8003d3a:	bf00      	nop
 8003d3c:	2000000c 	.word	0x2000000c
 8003d40:	08005e74 	.word	0x08005e74
 8003d44:	08005e94 	.word	0x08005e94
 8003d48:	08005e54 	.word	0x08005e54

08003d4c <quorem>:
 8003d4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d50:	6903      	ldr	r3, [r0, #16]
 8003d52:	690c      	ldr	r4, [r1, #16]
 8003d54:	4607      	mov	r7, r0
 8003d56:	42a3      	cmp	r3, r4
 8003d58:	f2c0 8082 	blt.w	8003e60 <quorem+0x114>
 8003d5c:	3c01      	subs	r4, #1
 8003d5e:	f100 0514 	add.w	r5, r0, #20
 8003d62:	f101 0814 	add.w	r8, r1, #20
 8003d66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003d6a:	9301      	str	r3, [sp, #4]
 8003d6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003d70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003d74:	3301      	adds	r3, #1
 8003d76:	429a      	cmp	r2, r3
 8003d78:	fbb2 f6f3 	udiv	r6, r2, r3
 8003d7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003d80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003d84:	d331      	bcc.n	8003dea <quorem+0x9e>
 8003d86:	f04f 0e00 	mov.w	lr, #0
 8003d8a:	4640      	mov	r0, r8
 8003d8c:	46ac      	mov	ip, r5
 8003d8e:	46f2      	mov	sl, lr
 8003d90:	f850 2b04 	ldr.w	r2, [r0], #4
 8003d94:	b293      	uxth	r3, r2
 8003d96:	fb06 e303 	mla	r3, r6, r3, lr
 8003d9a:	0c12      	lsrs	r2, r2, #16
 8003d9c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	fb06 e202 	mla	r2, r6, r2, lr
 8003da6:	ebaa 0303 	sub.w	r3, sl, r3
 8003daa:	f8dc a000 	ldr.w	sl, [ip]
 8003dae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003db2:	fa1f fa8a 	uxth.w	sl, sl
 8003db6:	4453      	add	r3, sl
 8003db8:	f8dc a000 	ldr.w	sl, [ip]
 8003dbc:	b292      	uxth	r2, r2
 8003dbe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003dc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003dcc:	4581      	cmp	r9, r0
 8003dce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003dd2:	f84c 3b04 	str.w	r3, [ip], #4
 8003dd6:	d2db      	bcs.n	8003d90 <quorem+0x44>
 8003dd8:	f855 300b 	ldr.w	r3, [r5, fp]
 8003ddc:	b92b      	cbnz	r3, 8003dea <quorem+0x9e>
 8003dde:	9b01      	ldr	r3, [sp, #4]
 8003de0:	3b04      	subs	r3, #4
 8003de2:	429d      	cmp	r5, r3
 8003de4:	461a      	mov	r2, r3
 8003de6:	d32f      	bcc.n	8003e48 <quorem+0xfc>
 8003de8:	613c      	str	r4, [r7, #16]
 8003dea:	4638      	mov	r0, r7
 8003dec:	f001 faec 	bl	80053c8 <__mcmp>
 8003df0:	2800      	cmp	r0, #0
 8003df2:	db25      	blt.n	8003e40 <quorem+0xf4>
 8003df4:	4628      	mov	r0, r5
 8003df6:	f04f 0c00 	mov.w	ip, #0
 8003dfa:	3601      	adds	r6, #1
 8003dfc:	f858 1b04 	ldr.w	r1, [r8], #4
 8003e00:	f8d0 e000 	ldr.w	lr, [r0]
 8003e04:	b28b      	uxth	r3, r1
 8003e06:	ebac 0303 	sub.w	r3, ip, r3
 8003e0a:	fa1f f28e 	uxth.w	r2, lr
 8003e0e:	4413      	add	r3, r2
 8003e10:	0c0a      	lsrs	r2, r1, #16
 8003e12:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003e16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e20:	45c1      	cmp	r9, r8
 8003e22:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003e26:	f840 3b04 	str.w	r3, [r0], #4
 8003e2a:	d2e7      	bcs.n	8003dfc <quorem+0xb0>
 8003e2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003e30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003e34:	b922      	cbnz	r2, 8003e40 <quorem+0xf4>
 8003e36:	3b04      	subs	r3, #4
 8003e38:	429d      	cmp	r5, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	d30a      	bcc.n	8003e54 <quorem+0x108>
 8003e3e:	613c      	str	r4, [r7, #16]
 8003e40:	4630      	mov	r0, r6
 8003e42:	b003      	add	sp, #12
 8003e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e48:	6812      	ldr	r2, [r2, #0]
 8003e4a:	3b04      	subs	r3, #4
 8003e4c:	2a00      	cmp	r2, #0
 8003e4e:	d1cb      	bne.n	8003de8 <quorem+0x9c>
 8003e50:	3c01      	subs	r4, #1
 8003e52:	e7c6      	b.n	8003de2 <quorem+0x96>
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	3b04      	subs	r3, #4
 8003e58:	2a00      	cmp	r2, #0
 8003e5a:	d1f0      	bne.n	8003e3e <quorem+0xf2>
 8003e5c:	3c01      	subs	r4, #1
 8003e5e:	e7eb      	b.n	8003e38 <quorem+0xec>
 8003e60:	2000      	movs	r0, #0
 8003e62:	e7ee      	b.n	8003e42 <quorem+0xf6>
 8003e64:	0000      	movs	r0, r0
	...

08003e68 <_dtoa_r>:
 8003e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e6c:	4616      	mov	r6, r2
 8003e6e:	461f      	mov	r7, r3
 8003e70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003e72:	b099      	sub	sp, #100	; 0x64
 8003e74:	4605      	mov	r5, r0
 8003e76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003e7a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003e7e:	b974      	cbnz	r4, 8003e9e <_dtoa_r+0x36>
 8003e80:	2010      	movs	r0, #16
 8003e82:	f000 ffff 	bl	8004e84 <malloc>
 8003e86:	4602      	mov	r2, r0
 8003e88:	6268      	str	r0, [r5, #36]	; 0x24
 8003e8a:	b920      	cbnz	r0, 8003e96 <_dtoa_r+0x2e>
 8003e8c:	21ea      	movs	r1, #234	; 0xea
 8003e8e:	4ba8      	ldr	r3, [pc, #672]	; (8004130 <_dtoa_r+0x2c8>)
 8003e90:	48a8      	ldr	r0, [pc, #672]	; (8004134 <_dtoa_r+0x2cc>)
 8003e92:	f001 fe4b 	bl	8005b2c <__assert_func>
 8003e96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003e9a:	6004      	str	r4, [r0, #0]
 8003e9c:	60c4      	str	r4, [r0, #12]
 8003e9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ea0:	6819      	ldr	r1, [r3, #0]
 8003ea2:	b151      	cbz	r1, 8003eba <_dtoa_r+0x52>
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	4093      	lsls	r3, r2
 8003eaa:	604a      	str	r2, [r1, #4]
 8003eac:	608b      	str	r3, [r1, #8]
 8003eae:	4628      	mov	r0, r5
 8003eb0:	f001 f84c 	bl	8004f4c <_Bfree>
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	1e3b      	subs	r3, r7, #0
 8003ebc:	bfaf      	iteee	ge
 8003ebe:	2300      	movge	r3, #0
 8003ec0:	2201      	movlt	r2, #1
 8003ec2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003ec6:	9305      	strlt	r3, [sp, #20]
 8003ec8:	bfa8      	it	ge
 8003eca:	f8c8 3000 	strge.w	r3, [r8]
 8003ece:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003ed2:	4b99      	ldr	r3, [pc, #612]	; (8004138 <_dtoa_r+0x2d0>)
 8003ed4:	bfb8      	it	lt
 8003ed6:	f8c8 2000 	strlt.w	r2, [r8]
 8003eda:	ea33 0309 	bics.w	r3, r3, r9
 8003ede:	d119      	bne.n	8003f14 <_dtoa_r+0xac>
 8003ee0:	f242 730f 	movw	r3, #9999	; 0x270f
 8003ee4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003eec:	4333      	orrs	r3, r6
 8003eee:	f000 857f 	beq.w	80049f0 <_dtoa_r+0xb88>
 8003ef2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003ef4:	b953      	cbnz	r3, 8003f0c <_dtoa_r+0xa4>
 8003ef6:	4b91      	ldr	r3, [pc, #580]	; (800413c <_dtoa_r+0x2d4>)
 8003ef8:	e022      	b.n	8003f40 <_dtoa_r+0xd8>
 8003efa:	4b91      	ldr	r3, [pc, #580]	; (8004140 <_dtoa_r+0x2d8>)
 8003efc:	9303      	str	r3, [sp, #12]
 8003efe:	3308      	adds	r3, #8
 8003f00:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	9803      	ldr	r0, [sp, #12]
 8003f06:	b019      	add	sp, #100	; 0x64
 8003f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f0c:	4b8b      	ldr	r3, [pc, #556]	; (800413c <_dtoa_r+0x2d4>)
 8003f0e:	9303      	str	r3, [sp, #12]
 8003f10:	3303      	adds	r3, #3
 8003f12:	e7f5      	b.n	8003f00 <_dtoa_r+0x98>
 8003f14:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003f18:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003f1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003f20:	2200      	movs	r2, #0
 8003f22:	2300      	movs	r3, #0
 8003f24:	f7fc fd40 	bl	80009a8 <__aeabi_dcmpeq>
 8003f28:	4680      	mov	r8, r0
 8003f2a:	b158      	cbz	r0, 8003f44 <_dtoa_r+0xdc>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003f30:	6013      	str	r3, [r2, #0]
 8003f32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 8558 	beq.w	80049ea <_dtoa_r+0xb82>
 8003f3a:	4882      	ldr	r0, [pc, #520]	; (8004144 <_dtoa_r+0x2dc>)
 8003f3c:	6018      	str	r0, [r3, #0]
 8003f3e:	1e43      	subs	r3, r0, #1
 8003f40:	9303      	str	r3, [sp, #12]
 8003f42:	e7df      	b.n	8003f04 <_dtoa_r+0x9c>
 8003f44:	ab16      	add	r3, sp, #88	; 0x58
 8003f46:	9301      	str	r3, [sp, #4]
 8003f48:	ab17      	add	r3, sp, #92	; 0x5c
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003f52:	f001 fae1 	bl	8005518 <__d2b>
 8003f56:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003f5a:	4683      	mov	fp, r0
 8003f5c:	2c00      	cmp	r4, #0
 8003f5e:	d07f      	beq.n	8004060 <_dtoa_r+0x1f8>
 8003f60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003f64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f66:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003f6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f6e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003f72:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003f76:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	4b72      	ldr	r3, [pc, #456]	; (8004148 <_dtoa_r+0x2e0>)
 8003f7e:	f7fc f8f3 	bl	8000168 <__aeabi_dsub>
 8003f82:	a365      	add	r3, pc, #404	; (adr r3, 8004118 <_dtoa_r+0x2b0>)
 8003f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f88:	f7fc faa6 	bl	80004d8 <__aeabi_dmul>
 8003f8c:	a364      	add	r3, pc, #400	; (adr r3, 8004120 <_dtoa_r+0x2b8>)
 8003f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f92:	f7fc f8eb 	bl	800016c <__adddf3>
 8003f96:	4606      	mov	r6, r0
 8003f98:	4620      	mov	r0, r4
 8003f9a:	460f      	mov	r7, r1
 8003f9c:	f7fc fa32 	bl	8000404 <__aeabi_i2d>
 8003fa0:	a361      	add	r3, pc, #388	; (adr r3, 8004128 <_dtoa_r+0x2c0>)
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	f7fc fa97 	bl	80004d8 <__aeabi_dmul>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4630      	mov	r0, r6
 8003fb0:	4639      	mov	r1, r7
 8003fb2:	f7fc f8db 	bl	800016c <__adddf3>
 8003fb6:	4606      	mov	r6, r0
 8003fb8:	460f      	mov	r7, r1
 8003fba:	f7fc fd3d 	bl	8000a38 <__aeabi_d2iz>
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	4682      	mov	sl, r0
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	4639      	mov	r1, r7
 8003fc8:	f7fc fcf8 	bl	80009bc <__aeabi_dcmplt>
 8003fcc:	b148      	cbz	r0, 8003fe2 <_dtoa_r+0x17a>
 8003fce:	4650      	mov	r0, sl
 8003fd0:	f7fc fa18 	bl	8000404 <__aeabi_i2d>
 8003fd4:	4632      	mov	r2, r6
 8003fd6:	463b      	mov	r3, r7
 8003fd8:	f7fc fce6 	bl	80009a8 <__aeabi_dcmpeq>
 8003fdc:	b908      	cbnz	r0, 8003fe2 <_dtoa_r+0x17a>
 8003fde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003fe2:	f1ba 0f16 	cmp.w	sl, #22
 8003fe6:	d858      	bhi.n	800409a <_dtoa_r+0x232>
 8003fe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003fec:	4b57      	ldr	r3, [pc, #348]	; (800414c <_dtoa_r+0x2e4>)
 8003fee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff6:	f7fc fce1 	bl	80009bc <__aeabi_dcmplt>
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	d04f      	beq.n	800409e <_dtoa_r+0x236>
 8003ffe:	2300      	movs	r3, #0
 8004000:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004004:	930f      	str	r3, [sp, #60]	; 0x3c
 8004006:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004008:	1b1c      	subs	r4, r3, r4
 800400a:	1e63      	subs	r3, r4, #1
 800400c:	9309      	str	r3, [sp, #36]	; 0x24
 800400e:	bf49      	itett	mi
 8004010:	f1c4 0301 	rsbmi	r3, r4, #1
 8004014:	2300      	movpl	r3, #0
 8004016:	9306      	strmi	r3, [sp, #24]
 8004018:	2300      	movmi	r3, #0
 800401a:	bf54      	ite	pl
 800401c:	9306      	strpl	r3, [sp, #24]
 800401e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004020:	f1ba 0f00 	cmp.w	sl, #0
 8004024:	db3d      	blt.n	80040a2 <_dtoa_r+0x23a>
 8004026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004028:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800402c:	4453      	add	r3, sl
 800402e:	9309      	str	r3, [sp, #36]	; 0x24
 8004030:	2300      	movs	r3, #0
 8004032:	930a      	str	r3, [sp, #40]	; 0x28
 8004034:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004036:	2b09      	cmp	r3, #9
 8004038:	f200 808c 	bhi.w	8004154 <_dtoa_r+0x2ec>
 800403c:	2b05      	cmp	r3, #5
 800403e:	bfc4      	itt	gt
 8004040:	3b04      	subgt	r3, #4
 8004042:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004044:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004046:	bfc8      	it	gt
 8004048:	2400      	movgt	r4, #0
 800404a:	f1a3 0302 	sub.w	r3, r3, #2
 800404e:	bfd8      	it	le
 8004050:	2401      	movle	r4, #1
 8004052:	2b03      	cmp	r3, #3
 8004054:	f200 808a 	bhi.w	800416c <_dtoa_r+0x304>
 8004058:	e8df f003 	tbb	[pc, r3]
 800405c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004060:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004064:	441c      	add	r4, r3
 8004066:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800406a:	2b20      	cmp	r3, #32
 800406c:	bfc3      	ittte	gt
 800406e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004072:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004076:	fa09 f303 	lslgt.w	r3, r9, r3
 800407a:	f1c3 0320 	rsble	r3, r3, #32
 800407e:	bfc6      	itte	gt
 8004080:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004084:	4318      	orrgt	r0, r3
 8004086:	fa06 f003 	lslle.w	r0, r6, r3
 800408a:	f7fc f9ab 	bl	80003e4 <__aeabi_ui2d>
 800408e:	2301      	movs	r3, #1
 8004090:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004094:	3c01      	subs	r4, #1
 8004096:	9313      	str	r3, [sp, #76]	; 0x4c
 8004098:	e76f      	b.n	8003f7a <_dtoa_r+0x112>
 800409a:	2301      	movs	r3, #1
 800409c:	e7b2      	b.n	8004004 <_dtoa_r+0x19c>
 800409e:	900f      	str	r0, [sp, #60]	; 0x3c
 80040a0:	e7b1      	b.n	8004006 <_dtoa_r+0x19e>
 80040a2:	9b06      	ldr	r3, [sp, #24]
 80040a4:	eba3 030a 	sub.w	r3, r3, sl
 80040a8:	9306      	str	r3, [sp, #24]
 80040aa:	f1ca 0300 	rsb	r3, sl, #0
 80040ae:	930a      	str	r3, [sp, #40]	; 0x28
 80040b0:	2300      	movs	r3, #0
 80040b2:	930e      	str	r3, [sp, #56]	; 0x38
 80040b4:	e7be      	b.n	8004034 <_dtoa_r+0x1cc>
 80040b6:	2300      	movs	r3, #0
 80040b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80040ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80040bc:	2b00      	cmp	r3, #0
 80040be:	dc58      	bgt.n	8004172 <_dtoa_r+0x30a>
 80040c0:	f04f 0901 	mov.w	r9, #1
 80040c4:	464b      	mov	r3, r9
 80040c6:	f8cd 9020 	str.w	r9, [sp, #32]
 80040ca:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80040ce:	2200      	movs	r2, #0
 80040d0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80040d2:	6042      	str	r2, [r0, #4]
 80040d4:	2204      	movs	r2, #4
 80040d6:	f102 0614 	add.w	r6, r2, #20
 80040da:	429e      	cmp	r6, r3
 80040dc:	6841      	ldr	r1, [r0, #4]
 80040de:	d94e      	bls.n	800417e <_dtoa_r+0x316>
 80040e0:	4628      	mov	r0, r5
 80040e2:	f000 fef3 	bl	8004ecc <_Balloc>
 80040e6:	9003      	str	r0, [sp, #12]
 80040e8:	2800      	cmp	r0, #0
 80040ea:	d14c      	bne.n	8004186 <_dtoa_r+0x31e>
 80040ec:	4602      	mov	r2, r0
 80040ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80040f2:	4b17      	ldr	r3, [pc, #92]	; (8004150 <_dtoa_r+0x2e8>)
 80040f4:	e6cc      	b.n	8003e90 <_dtoa_r+0x28>
 80040f6:	2301      	movs	r3, #1
 80040f8:	e7de      	b.n	80040b8 <_dtoa_r+0x250>
 80040fa:	2300      	movs	r3, #0
 80040fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80040fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004100:	eb0a 0903 	add.w	r9, sl, r3
 8004104:	f109 0301 	add.w	r3, r9, #1
 8004108:	2b01      	cmp	r3, #1
 800410a:	9308      	str	r3, [sp, #32]
 800410c:	bfb8      	it	lt
 800410e:	2301      	movlt	r3, #1
 8004110:	e7dd      	b.n	80040ce <_dtoa_r+0x266>
 8004112:	2301      	movs	r3, #1
 8004114:	e7f2      	b.n	80040fc <_dtoa_r+0x294>
 8004116:	bf00      	nop
 8004118:	636f4361 	.word	0x636f4361
 800411c:	3fd287a7 	.word	0x3fd287a7
 8004120:	8b60c8b3 	.word	0x8b60c8b3
 8004124:	3fc68a28 	.word	0x3fc68a28
 8004128:	509f79fb 	.word	0x509f79fb
 800412c:	3fd34413 	.word	0x3fd34413
 8004130:	08005dd1 	.word	0x08005dd1
 8004134:	08005de8 	.word	0x08005de8
 8004138:	7ff00000 	.word	0x7ff00000
 800413c:	08005dcd 	.word	0x08005dcd
 8004140:	08005dc4 	.word	0x08005dc4
 8004144:	08005da1 	.word	0x08005da1
 8004148:	3ff80000 	.word	0x3ff80000
 800414c:	08005f38 	.word	0x08005f38
 8004150:	08005e43 	.word	0x08005e43
 8004154:	2401      	movs	r4, #1
 8004156:	2300      	movs	r3, #0
 8004158:	940b      	str	r4, [sp, #44]	; 0x2c
 800415a:	9322      	str	r3, [sp, #136]	; 0x88
 800415c:	f04f 39ff 	mov.w	r9, #4294967295
 8004160:	2200      	movs	r2, #0
 8004162:	2312      	movs	r3, #18
 8004164:	f8cd 9020 	str.w	r9, [sp, #32]
 8004168:	9223      	str	r2, [sp, #140]	; 0x8c
 800416a:	e7b0      	b.n	80040ce <_dtoa_r+0x266>
 800416c:	2301      	movs	r3, #1
 800416e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004170:	e7f4      	b.n	800415c <_dtoa_r+0x2f4>
 8004172:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004176:	464b      	mov	r3, r9
 8004178:	f8cd 9020 	str.w	r9, [sp, #32]
 800417c:	e7a7      	b.n	80040ce <_dtoa_r+0x266>
 800417e:	3101      	adds	r1, #1
 8004180:	6041      	str	r1, [r0, #4]
 8004182:	0052      	lsls	r2, r2, #1
 8004184:	e7a7      	b.n	80040d6 <_dtoa_r+0x26e>
 8004186:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004188:	9a03      	ldr	r2, [sp, #12]
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	9b08      	ldr	r3, [sp, #32]
 800418e:	2b0e      	cmp	r3, #14
 8004190:	f200 80a8 	bhi.w	80042e4 <_dtoa_r+0x47c>
 8004194:	2c00      	cmp	r4, #0
 8004196:	f000 80a5 	beq.w	80042e4 <_dtoa_r+0x47c>
 800419a:	f1ba 0f00 	cmp.w	sl, #0
 800419e:	dd34      	ble.n	800420a <_dtoa_r+0x3a2>
 80041a0:	4a9a      	ldr	r2, [pc, #616]	; (800440c <_dtoa_r+0x5a4>)
 80041a2:	f00a 030f 	and.w	r3, sl, #15
 80041a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80041aa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80041ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80041b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80041b6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80041ba:	d016      	beq.n	80041ea <_dtoa_r+0x382>
 80041bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80041c0:	4b93      	ldr	r3, [pc, #588]	; (8004410 <_dtoa_r+0x5a8>)
 80041c2:	2703      	movs	r7, #3
 80041c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80041c8:	f7fc fab0 	bl	800072c <__aeabi_ddiv>
 80041cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80041d0:	f004 040f 	and.w	r4, r4, #15
 80041d4:	4e8e      	ldr	r6, [pc, #568]	; (8004410 <_dtoa_r+0x5a8>)
 80041d6:	b954      	cbnz	r4, 80041ee <_dtoa_r+0x386>
 80041d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80041dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041e0:	f7fc faa4 	bl	800072c <__aeabi_ddiv>
 80041e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80041e8:	e029      	b.n	800423e <_dtoa_r+0x3d6>
 80041ea:	2702      	movs	r7, #2
 80041ec:	e7f2      	b.n	80041d4 <_dtoa_r+0x36c>
 80041ee:	07e1      	lsls	r1, r4, #31
 80041f0:	d508      	bpl.n	8004204 <_dtoa_r+0x39c>
 80041f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80041f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80041fa:	f7fc f96d 	bl	80004d8 <__aeabi_dmul>
 80041fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004202:	3701      	adds	r7, #1
 8004204:	1064      	asrs	r4, r4, #1
 8004206:	3608      	adds	r6, #8
 8004208:	e7e5      	b.n	80041d6 <_dtoa_r+0x36e>
 800420a:	f000 80a5 	beq.w	8004358 <_dtoa_r+0x4f0>
 800420e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004212:	f1ca 0400 	rsb	r4, sl, #0
 8004216:	4b7d      	ldr	r3, [pc, #500]	; (800440c <_dtoa_r+0x5a4>)
 8004218:	f004 020f 	and.w	r2, r4, #15
 800421c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004224:	f7fc f958 	bl	80004d8 <__aeabi_dmul>
 8004228:	2702      	movs	r7, #2
 800422a:	2300      	movs	r3, #0
 800422c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004230:	4e77      	ldr	r6, [pc, #476]	; (8004410 <_dtoa_r+0x5a8>)
 8004232:	1124      	asrs	r4, r4, #4
 8004234:	2c00      	cmp	r4, #0
 8004236:	f040 8084 	bne.w	8004342 <_dtoa_r+0x4da>
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1d2      	bne.n	80041e4 <_dtoa_r+0x37c>
 800423e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 808b 	beq.w	800435c <_dtoa_r+0x4f4>
 8004246:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800424a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800424e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004252:	2200      	movs	r2, #0
 8004254:	4b6f      	ldr	r3, [pc, #444]	; (8004414 <_dtoa_r+0x5ac>)
 8004256:	f7fc fbb1 	bl	80009bc <__aeabi_dcmplt>
 800425a:	2800      	cmp	r0, #0
 800425c:	d07e      	beq.n	800435c <_dtoa_r+0x4f4>
 800425e:	9b08      	ldr	r3, [sp, #32]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d07b      	beq.n	800435c <_dtoa_r+0x4f4>
 8004264:	f1b9 0f00 	cmp.w	r9, #0
 8004268:	dd38      	ble.n	80042dc <_dtoa_r+0x474>
 800426a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800426e:	2200      	movs	r2, #0
 8004270:	4b69      	ldr	r3, [pc, #420]	; (8004418 <_dtoa_r+0x5b0>)
 8004272:	f7fc f931 	bl	80004d8 <__aeabi_dmul>
 8004276:	464c      	mov	r4, r9
 8004278:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800427c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004280:	3701      	adds	r7, #1
 8004282:	4638      	mov	r0, r7
 8004284:	f7fc f8be 	bl	8000404 <__aeabi_i2d>
 8004288:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800428c:	f7fc f924 	bl	80004d8 <__aeabi_dmul>
 8004290:	2200      	movs	r2, #0
 8004292:	4b62      	ldr	r3, [pc, #392]	; (800441c <_dtoa_r+0x5b4>)
 8004294:	f7fb ff6a 	bl	800016c <__adddf3>
 8004298:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800429c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80042a0:	9611      	str	r6, [sp, #68]	; 0x44
 80042a2:	2c00      	cmp	r4, #0
 80042a4:	d15d      	bne.n	8004362 <_dtoa_r+0x4fa>
 80042a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042aa:	2200      	movs	r2, #0
 80042ac:	4b5c      	ldr	r3, [pc, #368]	; (8004420 <_dtoa_r+0x5b8>)
 80042ae:	f7fb ff5b 	bl	8000168 <__aeabi_dsub>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80042ba:	4633      	mov	r3, r6
 80042bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80042be:	f7fc fb9b 	bl	80009f8 <__aeabi_dcmpgt>
 80042c2:	2800      	cmp	r0, #0
 80042c4:	f040 829c 	bne.w	8004800 <_dtoa_r+0x998>
 80042c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80042ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80042d2:	f7fc fb73 	bl	80009bc <__aeabi_dcmplt>
 80042d6:	2800      	cmp	r0, #0
 80042d8:	f040 8290 	bne.w	80047fc <_dtoa_r+0x994>
 80042dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80042e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80042e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f2c0 8152 	blt.w	8004590 <_dtoa_r+0x728>
 80042ec:	f1ba 0f0e 	cmp.w	sl, #14
 80042f0:	f300 814e 	bgt.w	8004590 <_dtoa_r+0x728>
 80042f4:	4b45      	ldr	r3, [pc, #276]	; (800440c <_dtoa_r+0x5a4>)
 80042f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80042fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80042fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004302:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004304:	2b00      	cmp	r3, #0
 8004306:	f280 80db 	bge.w	80044c0 <_dtoa_r+0x658>
 800430a:	9b08      	ldr	r3, [sp, #32]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f300 80d7 	bgt.w	80044c0 <_dtoa_r+0x658>
 8004312:	f040 8272 	bne.w	80047fa <_dtoa_r+0x992>
 8004316:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800431a:	2200      	movs	r2, #0
 800431c:	4b40      	ldr	r3, [pc, #256]	; (8004420 <_dtoa_r+0x5b8>)
 800431e:	f7fc f8db 	bl	80004d8 <__aeabi_dmul>
 8004322:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004326:	f7fc fb5d 	bl	80009e4 <__aeabi_dcmpge>
 800432a:	9c08      	ldr	r4, [sp, #32]
 800432c:	4626      	mov	r6, r4
 800432e:	2800      	cmp	r0, #0
 8004330:	f040 8248 	bne.w	80047c4 <_dtoa_r+0x95c>
 8004334:	2331      	movs	r3, #49	; 0x31
 8004336:	9f03      	ldr	r7, [sp, #12]
 8004338:	f10a 0a01 	add.w	sl, sl, #1
 800433c:	f807 3b01 	strb.w	r3, [r7], #1
 8004340:	e244      	b.n	80047cc <_dtoa_r+0x964>
 8004342:	07e2      	lsls	r2, r4, #31
 8004344:	d505      	bpl.n	8004352 <_dtoa_r+0x4ea>
 8004346:	e9d6 2300 	ldrd	r2, r3, [r6]
 800434a:	f7fc f8c5 	bl	80004d8 <__aeabi_dmul>
 800434e:	2301      	movs	r3, #1
 8004350:	3701      	adds	r7, #1
 8004352:	1064      	asrs	r4, r4, #1
 8004354:	3608      	adds	r6, #8
 8004356:	e76d      	b.n	8004234 <_dtoa_r+0x3cc>
 8004358:	2702      	movs	r7, #2
 800435a:	e770      	b.n	800423e <_dtoa_r+0x3d6>
 800435c:	46d0      	mov	r8, sl
 800435e:	9c08      	ldr	r4, [sp, #32]
 8004360:	e78f      	b.n	8004282 <_dtoa_r+0x41a>
 8004362:	9903      	ldr	r1, [sp, #12]
 8004364:	4b29      	ldr	r3, [pc, #164]	; (800440c <_dtoa_r+0x5a4>)
 8004366:	4421      	add	r1, r4
 8004368:	9112      	str	r1, [sp, #72]	; 0x48
 800436a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800436c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004370:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004374:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004378:	2900      	cmp	r1, #0
 800437a:	d055      	beq.n	8004428 <_dtoa_r+0x5c0>
 800437c:	2000      	movs	r0, #0
 800437e:	4929      	ldr	r1, [pc, #164]	; (8004424 <_dtoa_r+0x5bc>)
 8004380:	f7fc f9d4 	bl	800072c <__aeabi_ddiv>
 8004384:	463b      	mov	r3, r7
 8004386:	4632      	mov	r2, r6
 8004388:	f7fb feee 	bl	8000168 <__aeabi_dsub>
 800438c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004390:	9f03      	ldr	r7, [sp, #12]
 8004392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004396:	f7fc fb4f 	bl	8000a38 <__aeabi_d2iz>
 800439a:	4604      	mov	r4, r0
 800439c:	f7fc f832 	bl	8000404 <__aeabi_i2d>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043a8:	f7fb fede 	bl	8000168 <__aeabi_dsub>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	3430      	adds	r4, #48	; 0x30
 80043b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80043b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80043ba:	f807 4b01 	strb.w	r4, [r7], #1
 80043be:	f7fc fafd 	bl	80009bc <__aeabi_dcmplt>
 80043c2:	2800      	cmp	r0, #0
 80043c4:	d174      	bne.n	80044b0 <_dtoa_r+0x648>
 80043c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043ca:	2000      	movs	r0, #0
 80043cc:	4911      	ldr	r1, [pc, #68]	; (8004414 <_dtoa_r+0x5ac>)
 80043ce:	f7fb fecb 	bl	8000168 <__aeabi_dsub>
 80043d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80043d6:	f7fc faf1 	bl	80009bc <__aeabi_dcmplt>
 80043da:	2800      	cmp	r0, #0
 80043dc:	f040 80b7 	bne.w	800454e <_dtoa_r+0x6e6>
 80043e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80043e2:	429f      	cmp	r7, r3
 80043e4:	f43f af7a 	beq.w	80042dc <_dtoa_r+0x474>
 80043e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80043ec:	2200      	movs	r2, #0
 80043ee:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <_dtoa_r+0x5b0>)
 80043f0:	f7fc f872 	bl	80004d8 <__aeabi_dmul>
 80043f4:	2200      	movs	r2, #0
 80043f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80043fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043fe:	4b06      	ldr	r3, [pc, #24]	; (8004418 <_dtoa_r+0x5b0>)
 8004400:	f7fc f86a 	bl	80004d8 <__aeabi_dmul>
 8004404:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004408:	e7c3      	b.n	8004392 <_dtoa_r+0x52a>
 800440a:	bf00      	nop
 800440c:	08005f38 	.word	0x08005f38
 8004410:	08005f10 	.word	0x08005f10
 8004414:	3ff00000 	.word	0x3ff00000
 8004418:	40240000 	.word	0x40240000
 800441c:	401c0000 	.word	0x401c0000
 8004420:	40140000 	.word	0x40140000
 8004424:	3fe00000 	.word	0x3fe00000
 8004428:	4630      	mov	r0, r6
 800442a:	4639      	mov	r1, r7
 800442c:	f7fc f854 	bl	80004d8 <__aeabi_dmul>
 8004430:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004432:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004436:	9c03      	ldr	r4, [sp, #12]
 8004438:	9314      	str	r3, [sp, #80]	; 0x50
 800443a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800443e:	f7fc fafb 	bl	8000a38 <__aeabi_d2iz>
 8004442:	9015      	str	r0, [sp, #84]	; 0x54
 8004444:	f7fb ffde 	bl	8000404 <__aeabi_i2d>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004450:	f7fb fe8a 	bl	8000168 <__aeabi_dsub>
 8004454:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004456:	4606      	mov	r6, r0
 8004458:	3330      	adds	r3, #48	; 0x30
 800445a:	f804 3b01 	strb.w	r3, [r4], #1
 800445e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004460:	460f      	mov	r7, r1
 8004462:	429c      	cmp	r4, r3
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	d124      	bne.n	80044b4 <_dtoa_r+0x64c>
 800446a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800446e:	4bb0      	ldr	r3, [pc, #704]	; (8004730 <_dtoa_r+0x8c8>)
 8004470:	f7fb fe7c 	bl	800016c <__adddf3>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	4630      	mov	r0, r6
 800447a:	4639      	mov	r1, r7
 800447c:	f7fc fabc 	bl	80009f8 <__aeabi_dcmpgt>
 8004480:	2800      	cmp	r0, #0
 8004482:	d163      	bne.n	800454c <_dtoa_r+0x6e4>
 8004484:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004488:	2000      	movs	r0, #0
 800448a:	49a9      	ldr	r1, [pc, #676]	; (8004730 <_dtoa_r+0x8c8>)
 800448c:	f7fb fe6c 	bl	8000168 <__aeabi_dsub>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4630      	mov	r0, r6
 8004496:	4639      	mov	r1, r7
 8004498:	f7fc fa90 	bl	80009bc <__aeabi_dcmplt>
 800449c:	2800      	cmp	r0, #0
 800449e:	f43f af1d 	beq.w	80042dc <_dtoa_r+0x474>
 80044a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80044a4:	1e7b      	subs	r3, r7, #1
 80044a6:	9314      	str	r3, [sp, #80]	; 0x50
 80044a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80044ac:	2b30      	cmp	r3, #48	; 0x30
 80044ae:	d0f8      	beq.n	80044a2 <_dtoa_r+0x63a>
 80044b0:	46c2      	mov	sl, r8
 80044b2:	e03b      	b.n	800452c <_dtoa_r+0x6c4>
 80044b4:	4b9f      	ldr	r3, [pc, #636]	; (8004734 <_dtoa_r+0x8cc>)
 80044b6:	f7fc f80f 	bl	80004d8 <__aeabi_dmul>
 80044ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80044be:	e7bc      	b.n	800443a <_dtoa_r+0x5d2>
 80044c0:	9f03      	ldr	r7, [sp, #12]
 80044c2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80044c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80044ca:	4640      	mov	r0, r8
 80044cc:	4649      	mov	r1, r9
 80044ce:	f7fc f92d 	bl	800072c <__aeabi_ddiv>
 80044d2:	f7fc fab1 	bl	8000a38 <__aeabi_d2iz>
 80044d6:	4604      	mov	r4, r0
 80044d8:	f7fb ff94 	bl	8000404 <__aeabi_i2d>
 80044dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80044e0:	f7fb fffa 	bl	80004d8 <__aeabi_dmul>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4640      	mov	r0, r8
 80044ea:	4649      	mov	r1, r9
 80044ec:	f7fb fe3c 	bl	8000168 <__aeabi_dsub>
 80044f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80044f4:	f807 6b01 	strb.w	r6, [r7], #1
 80044f8:	9e03      	ldr	r6, [sp, #12]
 80044fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80044fe:	1bbe      	subs	r6, r7, r6
 8004500:	45b4      	cmp	ip, r6
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	d136      	bne.n	8004576 <_dtoa_r+0x70e>
 8004508:	f7fb fe30 	bl	800016c <__adddf3>
 800450c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004510:	4680      	mov	r8, r0
 8004512:	4689      	mov	r9, r1
 8004514:	f7fc fa70 	bl	80009f8 <__aeabi_dcmpgt>
 8004518:	bb58      	cbnz	r0, 8004572 <_dtoa_r+0x70a>
 800451a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800451e:	4640      	mov	r0, r8
 8004520:	4649      	mov	r1, r9
 8004522:	f7fc fa41 	bl	80009a8 <__aeabi_dcmpeq>
 8004526:	b108      	cbz	r0, 800452c <_dtoa_r+0x6c4>
 8004528:	07e1      	lsls	r1, r4, #31
 800452a:	d422      	bmi.n	8004572 <_dtoa_r+0x70a>
 800452c:	4628      	mov	r0, r5
 800452e:	4659      	mov	r1, fp
 8004530:	f000 fd0c 	bl	8004f4c <_Bfree>
 8004534:	2300      	movs	r3, #0
 8004536:	703b      	strb	r3, [r7, #0]
 8004538:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800453a:	f10a 0001 	add.w	r0, sl, #1
 800453e:	6018      	str	r0, [r3, #0]
 8004540:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004542:	2b00      	cmp	r3, #0
 8004544:	f43f acde 	beq.w	8003f04 <_dtoa_r+0x9c>
 8004548:	601f      	str	r7, [r3, #0]
 800454a:	e4db      	b.n	8003f04 <_dtoa_r+0x9c>
 800454c:	4627      	mov	r7, r4
 800454e:	463b      	mov	r3, r7
 8004550:	461f      	mov	r7, r3
 8004552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004556:	2a39      	cmp	r2, #57	; 0x39
 8004558:	d107      	bne.n	800456a <_dtoa_r+0x702>
 800455a:	9a03      	ldr	r2, [sp, #12]
 800455c:	429a      	cmp	r2, r3
 800455e:	d1f7      	bne.n	8004550 <_dtoa_r+0x6e8>
 8004560:	2230      	movs	r2, #48	; 0x30
 8004562:	9903      	ldr	r1, [sp, #12]
 8004564:	f108 0801 	add.w	r8, r8, #1
 8004568:	700a      	strb	r2, [r1, #0]
 800456a:	781a      	ldrb	r2, [r3, #0]
 800456c:	3201      	adds	r2, #1
 800456e:	701a      	strb	r2, [r3, #0]
 8004570:	e79e      	b.n	80044b0 <_dtoa_r+0x648>
 8004572:	46d0      	mov	r8, sl
 8004574:	e7eb      	b.n	800454e <_dtoa_r+0x6e6>
 8004576:	2200      	movs	r2, #0
 8004578:	4b6e      	ldr	r3, [pc, #440]	; (8004734 <_dtoa_r+0x8cc>)
 800457a:	f7fb ffad 	bl	80004d8 <__aeabi_dmul>
 800457e:	2200      	movs	r2, #0
 8004580:	2300      	movs	r3, #0
 8004582:	4680      	mov	r8, r0
 8004584:	4689      	mov	r9, r1
 8004586:	f7fc fa0f 	bl	80009a8 <__aeabi_dcmpeq>
 800458a:	2800      	cmp	r0, #0
 800458c:	d09b      	beq.n	80044c6 <_dtoa_r+0x65e>
 800458e:	e7cd      	b.n	800452c <_dtoa_r+0x6c4>
 8004590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004592:	2a00      	cmp	r2, #0
 8004594:	f000 80d0 	beq.w	8004738 <_dtoa_r+0x8d0>
 8004598:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800459a:	2a01      	cmp	r2, #1
 800459c:	f300 80ae 	bgt.w	80046fc <_dtoa_r+0x894>
 80045a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80045a2:	2a00      	cmp	r2, #0
 80045a4:	f000 80a6 	beq.w	80046f4 <_dtoa_r+0x88c>
 80045a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80045ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80045ae:	9f06      	ldr	r7, [sp, #24]
 80045b0:	9a06      	ldr	r2, [sp, #24]
 80045b2:	2101      	movs	r1, #1
 80045b4:	441a      	add	r2, r3
 80045b6:	9206      	str	r2, [sp, #24]
 80045b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045ba:	4628      	mov	r0, r5
 80045bc:	441a      	add	r2, r3
 80045be:	9209      	str	r2, [sp, #36]	; 0x24
 80045c0:	f000 fd7a 	bl	80050b8 <__i2b>
 80045c4:	4606      	mov	r6, r0
 80045c6:	2f00      	cmp	r7, #0
 80045c8:	dd0c      	ble.n	80045e4 <_dtoa_r+0x77c>
 80045ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	dd09      	ble.n	80045e4 <_dtoa_r+0x77c>
 80045d0:	42bb      	cmp	r3, r7
 80045d2:	bfa8      	it	ge
 80045d4:	463b      	movge	r3, r7
 80045d6:	9a06      	ldr	r2, [sp, #24]
 80045d8:	1aff      	subs	r7, r7, r3
 80045da:	1ad2      	subs	r2, r2, r3
 80045dc:	9206      	str	r2, [sp, #24]
 80045de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	9309      	str	r3, [sp, #36]	; 0x24
 80045e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045e6:	b1f3      	cbz	r3, 8004626 <_dtoa_r+0x7be>
 80045e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 80a8 	beq.w	8004740 <_dtoa_r+0x8d8>
 80045f0:	2c00      	cmp	r4, #0
 80045f2:	dd10      	ble.n	8004616 <_dtoa_r+0x7ae>
 80045f4:	4631      	mov	r1, r6
 80045f6:	4622      	mov	r2, r4
 80045f8:	4628      	mov	r0, r5
 80045fa:	f000 fe1b 	bl	8005234 <__pow5mult>
 80045fe:	465a      	mov	r2, fp
 8004600:	4601      	mov	r1, r0
 8004602:	4606      	mov	r6, r0
 8004604:	4628      	mov	r0, r5
 8004606:	f000 fd6d 	bl	80050e4 <__multiply>
 800460a:	4680      	mov	r8, r0
 800460c:	4659      	mov	r1, fp
 800460e:	4628      	mov	r0, r5
 8004610:	f000 fc9c 	bl	8004f4c <_Bfree>
 8004614:	46c3      	mov	fp, r8
 8004616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004618:	1b1a      	subs	r2, r3, r4
 800461a:	d004      	beq.n	8004626 <_dtoa_r+0x7be>
 800461c:	4659      	mov	r1, fp
 800461e:	4628      	mov	r0, r5
 8004620:	f000 fe08 	bl	8005234 <__pow5mult>
 8004624:	4683      	mov	fp, r0
 8004626:	2101      	movs	r1, #1
 8004628:	4628      	mov	r0, r5
 800462a:	f000 fd45 	bl	80050b8 <__i2b>
 800462e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004630:	4604      	mov	r4, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	f340 8086 	ble.w	8004744 <_dtoa_r+0x8dc>
 8004638:	461a      	mov	r2, r3
 800463a:	4601      	mov	r1, r0
 800463c:	4628      	mov	r0, r5
 800463e:	f000 fdf9 	bl	8005234 <__pow5mult>
 8004642:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004644:	4604      	mov	r4, r0
 8004646:	2b01      	cmp	r3, #1
 8004648:	dd7f      	ble.n	800474a <_dtoa_r+0x8e2>
 800464a:	f04f 0800 	mov.w	r8, #0
 800464e:	6923      	ldr	r3, [r4, #16]
 8004650:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004654:	6918      	ldr	r0, [r3, #16]
 8004656:	f000 fce1 	bl	800501c <__hi0bits>
 800465a:	f1c0 0020 	rsb	r0, r0, #32
 800465e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004660:	4418      	add	r0, r3
 8004662:	f010 001f 	ands.w	r0, r0, #31
 8004666:	f000 8092 	beq.w	800478e <_dtoa_r+0x926>
 800466a:	f1c0 0320 	rsb	r3, r0, #32
 800466e:	2b04      	cmp	r3, #4
 8004670:	f340 808a 	ble.w	8004788 <_dtoa_r+0x920>
 8004674:	f1c0 001c 	rsb	r0, r0, #28
 8004678:	9b06      	ldr	r3, [sp, #24]
 800467a:	4407      	add	r7, r0
 800467c:	4403      	add	r3, r0
 800467e:	9306      	str	r3, [sp, #24]
 8004680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004682:	4403      	add	r3, r0
 8004684:	9309      	str	r3, [sp, #36]	; 0x24
 8004686:	9b06      	ldr	r3, [sp, #24]
 8004688:	2b00      	cmp	r3, #0
 800468a:	dd05      	ble.n	8004698 <_dtoa_r+0x830>
 800468c:	4659      	mov	r1, fp
 800468e:	461a      	mov	r2, r3
 8004690:	4628      	mov	r0, r5
 8004692:	f000 fe29 	bl	80052e8 <__lshift>
 8004696:	4683      	mov	fp, r0
 8004698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800469a:	2b00      	cmp	r3, #0
 800469c:	dd05      	ble.n	80046aa <_dtoa_r+0x842>
 800469e:	4621      	mov	r1, r4
 80046a0:	461a      	mov	r2, r3
 80046a2:	4628      	mov	r0, r5
 80046a4:	f000 fe20 	bl	80052e8 <__lshift>
 80046a8:	4604      	mov	r4, r0
 80046aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d070      	beq.n	8004792 <_dtoa_r+0x92a>
 80046b0:	4621      	mov	r1, r4
 80046b2:	4658      	mov	r0, fp
 80046b4:	f000 fe88 	bl	80053c8 <__mcmp>
 80046b8:	2800      	cmp	r0, #0
 80046ba:	da6a      	bge.n	8004792 <_dtoa_r+0x92a>
 80046bc:	2300      	movs	r3, #0
 80046be:	4659      	mov	r1, fp
 80046c0:	220a      	movs	r2, #10
 80046c2:	4628      	mov	r0, r5
 80046c4:	f000 fc64 	bl	8004f90 <__multadd>
 80046c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046ca:	4683      	mov	fp, r0
 80046cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 8194 	beq.w	80049fe <_dtoa_r+0xb96>
 80046d6:	4631      	mov	r1, r6
 80046d8:	2300      	movs	r3, #0
 80046da:	220a      	movs	r2, #10
 80046dc:	4628      	mov	r0, r5
 80046de:	f000 fc57 	bl	8004f90 <__multadd>
 80046e2:	f1b9 0f00 	cmp.w	r9, #0
 80046e6:	4606      	mov	r6, r0
 80046e8:	f300 8093 	bgt.w	8004812 <_dtoa_r+0x9aa>
 80046ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	dc57      	bgt.n	80047a2 <_dtoa_r+0x93a>
 80046f2:	e08e      	b.n	8004812 <_dtoa_r+0x9aa>
 80046f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80046f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80046fa:	e757      	b.n	80045ac <_dtoa_r+0x744>
 80046fc:	9b08      	ldr	r3, [sp, #32]
 80046fe:	1e5c      	subs	r4, r3, #1
 8004700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004702:	42a3      	cmp	r3, r4
 8004704:	bfb7      	itett	lt
 8004706:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004708:	1b1c      	subge	r4, r3, r4
 800470a:	1ae2      	sublt	r2, r4, r3
 800470c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800470e:	bfbe      	ittt	lt
 8004710:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004712:	189b      	addlt	r3, r3, r2
 8004714:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004716:	9b08      	ldr	r3, [sp, #32]
 8004718:	bfb8      	it	lt
 800471a:	2400      	movlt	r4, #0
 800471c:	2b00      	cmp	r3, #0
 800471e:	bfbb      	ittet	lt
 8004720:	9b06      	ldrlt	r3, [sp, #24]
 8004722:	9a08      	ldrlt	r2, [sp, #32]
 8004724:	9f06      	ldrge	r7, [sp, #24]
 8004726:	1a9f      	sublt	r7, r3, r2
 8004728:	bfac      	ite	ge
 800472a:	9b08      	ldrge	r3, [sp, #32]
 800472c:	2300      	movlt	r3, #0
 800472e:	e73f      	b.n	80045b0 <_dtoa_r+0x748>
 8004730:	3fe00000 	.word	0x3fe00000
 8004734:	40240000 	.word	0x40240000
 8004738:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800473a:	9f06      	ldr	r7, [sp, #24]
 800473c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800473e:	e742      	b.n	80045c6 <_dtoa_r+0x75e>
 8004740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004742:	e76b      	b.n	800461c <_dtoa_r+0x7b4>
 8004744:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004746:	2b01      	cmp	r3, #1
 8004748:	dc19      	bgt.n	800477e <_dtoa_r+0x916>
 800474a:	9b04      	ldr	r3, [sp, #16]
 800474c:	b9bb      	cbnz	r3, 800477e <_dtoa_r+0x916>
 800474e:	9b05      	ldr	r3, [sp, #20]
 8004750:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004754:	b99b      	cbnz	r3, 800477e <_dtoa_r+0x916>
 8004756:	9b05      	ldr	r3, [sp, #20]
 8004758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800475c:	0d1b      	lsrs	r3, r3, #20
 800475e:	051b      	lsls	r3, r3, #20
 8004760:	b183      	cbz	r3, 8004784 <_dtoa_r+0x91c>
 8004762:	f04f 0801 	mov.w	r8, #1
 8004766:	9b06      	ldr	r3, [sp, #24]
 8004768:	3301      	adds	r3, #1
 800476a:	9306      	str	r3, [sp, #24]
 800476c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800476e:	3301      	adds	r3, #1
 8004770:	9309      	str	r3, [sp, #36]	; 0x24
 8004772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004774:	2b00      	cmp	r3, #0
 8004776:	f47f af6a 	bne.w	800464e <_dtoa_r+0x7e6>
 800477a:	2001      	movs	r0, #1
 800477c:	e76f      	b.n	800465e <_dtoa_r+0x7f6>
 800477e:	f04f 0800 	mov.w	r8, #0
 8004782:	e7f6      	b.n	8004772 <_dtoa_r+0x90a>
 8004784:	4698      	mov	r8, r3
 8004786:	e7f4      	b.n	8004772 <_dtoa_r+0x90a>
 8004788:	f43f af7d 	beq.w	8004686 <_dtoa_r+0x81e>
 800478c:	4618      	mov	r0, r3
 800478e:	301c      	adds	r0, #28
 8004790:	e772      	b.n	8004678 <_dtoa_r+0x810>
 8004792:	9b08      	ldr	r3, [sp, #32]
 8004794:	2b00      	cmp	r3, #0
 8004796:	dc36      	bgt.n	8004806 <_dtoa_r+0x99e>
 8004798:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800479a:	2b02      	cmp	r3, #2
 800479c:	dd33      	ble.n	8004806 <_dtoa_r+0x99e>
 800479e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80047a2:	f1b9 0f00 	cmp.w	r9, #0
 80047a6:	d10d      	bne.n	80047c4 <_dtoa_r+0x95c>
 80047a8:	4621      	mov	r1, r4
 80047aa:	464b      	mov	r3, r9
 80047ac:	2205      	movs	r2, #5
 80047ae:	4628      	mov	r0, r5
 80047b0:	f000 fbee 	bl	8004f90 <__multadd>
 80047b4:	4601      	mov	r1, r0
 80047b6:	4604      	mov	r4, r0
 80047b8:	4658      	mov	r0, fp
 80047ba:	f000 fe05 	bl	80053c8 <__mcmp>
 80047be:	2800      	cmp	r0, #0
 80047c0:	f73f adb8 	bgt.w	8004334 <_dtoa_r+0x4cc>
 80047c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80047c6:	9f03      	ldr	r7, [sp, #12]
 80047c8:	ea6f 0a03 	mvn.w	sl, r3
 80047cc:	f04f 0800 	mov.w	r8, #0
 80047d0:	4621      	mov	r1, r4
 80047d2:	4628      	mov	r0, r5
 80047d4:	f000 fbba 	bl	8004f4c <_Bfree>
 80047d8:	2e00      	cmp	r6, #0
 80047da:	f43f aea7 	beq.w	800452c <_dtoa_r+0x6c4>
 80047de:	f1b8 0f00 	cmp.w	r8, #0
 80047e2:	d005      	beq.n	80047f0 <_dtoa_r+0x988>
 80047e4:	45b0      	cmp	r8, r6
 80047e6:	d003      	beq.n	80047f0 <_dtoa_r+0x988>
 80047e8:	4641      	mov	r1, r8
 80047ea:	4628      	mov	r0, r5
 80047ec:	f000 fbae 	bl	8004f4c <_Bfree>
 80047f0:	4631      	mov	r1, r6
 80047f2:	4628      	mov	r0, r5
 80047f4:	f000 fbaa 	bl	8004f4c <_Bfree>
 80047f8:	e698      	b.n	800452c <_dtoa_r+0x6c4>
 80047fa:	2400      	movs	r4, #0
 80047fc:	4626      	mov	r6, r4
 80047fe:	e7e1      	b.n	80047c4 <_dtoa_r+0x95c>
 8004800:	46c2      	mov	sl, r8
 8004802:	4626      	mov	r6, r4
 8004804:	e596      	b.n	8004334 <_dtoa_r+0x4cc>
 8004806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004808:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80fd 	beq.w	8004a0c <_dtoa_r+0xba4>
 8004812:	2f00      	cmp	r7, #0
 8004814:	dd05      	ble.n	8004822 <_dtoa_r+0x9ba>
 8004816:	4631      	mov	r1, r6
 8004818:	463a      	mov	r2, r7
 800481a:	4628      	mov	r0, r5
 800481c:	f000 fd64 	bl	80052e8 <__lshift>
 8004820:	4606      	mov	r6, r0
 8004822:	f1b8 0f00 	cmp.w	r8, #0
 8004826:	d05c      	beq.n	80048e2 <_dtoa_r+0xa7a>
 8004828:	4628      	mov	r0, r5
 800482a:	6871      	ldr	r1, [r6, #4]
 800482c:	f000 fb4e 	bl	8004ecc <_Balloc>
 8004830:	4607      	mov	r7, r0
 8004832:	b928      	cbnz	r0, 8004840 <_dtoa_r+0x9d8>
 8004834:	4602      	mov	r2, r0
 8004836:	f240 21ea 	movw	r1, #746	; 0x2ea
 800483a:	4b7f      	ldr	r3, [pc, #508]	; (8004a38 <_dtoa_r+0xbd0>)
 800483c:	f7ff bb28 	b.w	8003e90 <_dtoa_r+0x28>
 8004840:	6932      	ldr	r2, [r6, #16]
 8004842:	f106 010c 	add.w	r1, r6, #12
 8004846:	3202      	adds	r2, #2
 8004848:	0092      	lsls	r2, r2, #2
 800484a:	300c      	adds	r0, #12
 800484c:	f000 fb30 	bl	8004eb0 <memcpy>
 8004850:	2201      	movs	r2, #1
 8004852:	4639      	mov	r1, r7
 8004854:	4628      	mov	r0, r5
 8004856:	f000 fd47 	bl	80052e8 <__lshift>
 800485a:	46b0      	mov	r8, r6
 800485c:	4606      	mov	r6, r0
 800485e:	9b03      	ldr	r3, [sp, #12]
 8004860:	3301      	adds	r3, #1
 8004862:	9308      	str	r3, [sp, #32]
 8004864:	9b03      	ldr	r3, [sp, #12]
 8004866:	444b      	add	r3, r9
 8004868:	930a      	str	r3, [sp, #40]	; 0x28
 800486a:	9b04      	ldr	r3, [sp, #16]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	9309      	str	r3, [sp, #36]	; 0x24
 8004872:	9b08      	ldr	r3, [sp, #32]
 8004874:	4621      	mov	r1, r4
 8004876:	3b01      	subs	r3, #1
 8004878:	4658      	mov	r0, fp
 800487a:	9304      	str	r3, [sp, #16]
 800487c:	f7ff fa66 	bl	8003d4c <quorem>
 8004880:	4603      	mov	r3, r0
 8004882:	4641      	mov	r1, r8
 8004884:	3330      	adds	r3, #48	; 0x30
 8004886:	9006      	str	r0, [sp, #24]
 8004888:	4658      	mov	r0, fp
 800488a:	930b      	str	r3, [sp, #44]	; 0x2c
 800488c:	f000 fd9c 	bl	80053c8 <__mcmp>
 8004890:	4632      	mov	r2, r6
 8004892:	4681      	mov	r9, r0
 8004894:	4621      	mov	r1, r4
 8004896:	4628      	mov	r0, r5
 8004898:	f000 fdb2 	bl	8005400 <__mdiff>
 800489c:	68c2      	ldr	r2, [r0, #12]
 800489e:	4607      	mov	r7, r0
 80048a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048a2:	bb02      	cbnz	r2, 80048e6 <_dtoa_r+0xa7e>
 80048a4:	4601      	mov	r1, r0
 80048a6:	4658      	mov	r0, fp
 80048a8:	f000 fd8e 	bl	80053c8 <__mcmp>
 80048ac:	4602      	mov	r2, r0
 80048ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048b0:	4639      	mov	r1, r7
 80048b2:	4628      	mov	r0, r5
 80048b4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80048b8:	f000 fb48 	bl	8004f4c <_Bfree>
 80048bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048c0:	9f08      	ldr	r7, [sp, #32]
 80048c2:	ea43 0102 	orr.w	r1, r3, r2
 80048c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048c8:	430b      	orrs	r3, r1
 80048ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048cc:	d10d      	bne.n	80048ea <_dtoa_r+0xa82>
 80048ce:	2b39      	cmp	r3, #57	; 0x39
 80048d0:	d029      	beq.n	8004926 <_dtoa_r+0xabe>
 80048d2:	f1b9 0f00 	cmp.w	r9, #0
 80048d6:	dd01      	ble.n	80048dc <_dtoa_r+0xa74>
 80048d8:	9b06      	ldr	r3, [sp, #24]
 80048da:	3331      	adds	r3, #49	; 0x31
 80048dc:	9a04      	ldr	r2, [sp, #16]
 80048de:	7013      	strb	r3, [r2, #0]
 80048e0:	e776      	b.n	80047d0 <_dtoa_r+0x968>
 80048e2:	4630      	mov	r0, r6
 80048e4:	e7b9      	b.n	800485a <_dtoa_r+0x9f2>
 80048e6:	2201      	movs	r2, #1
 80048e8:	e7e2      	b.n	80048b0 <_dtoa_r+0xa48>
 80048ea:	f1b9 0f00 	cmp.w	r9, #0
 80048ee:	db06      	blt.n	80048fe <_dtoa_r+0xa96>
 80048f0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80048f2:	ea41 0909 	orr.w	r9, r1, r9
 80048f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048f8:	ea59 0101 	orrs.w	r1, r9, r1
 80048fc:	d120      	bne.n	8004940 <_dtoa_r+0xad8>
 80048fe:	2a00      	cmp	r2, #0
 8004900:	ddec      	ble.n	80048dc <_dtoa_r+0xa74>
 8004902:	4659      	mov	r1, fp
 8004904:	2201      	movs	r2, #1
 8004906:	4628      	mov	r0, r5
 8004908:	9308      	str	r3, [sp, #32]
 800490a:	f000 fced 	bl	80052e8 <__lshift>
 800490e:	4621      	mov	r1, r4
 8004910:	4683      	mov	fp, r0
 8004912:	f000 fd59 	bl	80053c8 <__mcmp>
 8004916:	2800      	cmp	r0, #0
 8004918:	9b08      	ldr	r3, [sp, #32]
 800491a:	dc02      	bgt.n	8004922 <_dtoa_r+0xaba>
 800491c:	d1de      	bne.n	80048dc <_dtoa_r+0xa74>
 800491e:	07da      	lsls	r2, r3, #31
 8004920:	d5dc      	bpl.n	80048dc <_dtoa_r+0xa74>
 8004922:	2b39      	cmp	r3, #57	; 0x39
 8004924:	d1d8      	bne.n	80048d8 <_dtoa_r+0xa70>
 8004926:	2339      	movs	r3, #57	; 0x39
 8004928:	9a04      	ldr	r2, [sp, #16]
 800492a:	7013      	strb	r3, [r2, #0]
 800492c:	463b      	mov	r3, r7
 800492e:	461f      	mov	r7, r3
 8004930:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004934:	3b01      	subs	r3, #1
 8004936:	2a39      	cmp	r2, #57	; 0x39
 8004938:	d050      	beq.n	80049dc <_dtoa_r+0xb74>
 800493a:	3201      	adds	r2, #1
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	e747      	b.n	80047d0 <_dtoa_r+0x968>
 8004940:	2a00      	cmp	r2, #0
 8004942:	dd03      	ble.n	800494c <_dtoa_r+0xae4>
 8004944:	2b39      	cmp	r3, #57	; 0x39
 8004946:	d0ee      	beq.n	8004926 <_dtoa_r+0xabe>
 8004948:	3301      	adds	r3, #1
 800494a:	e7c7      	b.n	80048dc <_dtoa_r+0xa74>
 800494c:	9a08      	ldr	r2, [sp, #32]
 800494e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004950:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004954:	428a      	cmp	r2, r1
 8004956:	d02a      	beq.n	80049ae <_dtoa_r+0xb46>
 8004958:	4659      	mov	r1, fp
 800495a:	2300      	movs	r3, #0
 800495c:	220a      	movs	r2, #10
 800495e:	4628      	mov	r0, r5
 8004960:	f000 fb16 	bl	8004f90 <__multadd>
 8004964:	45b0      	cmp	r8, r6
 8004966:	4683      	mov	fp, r0
 8004968:	f04f 0300 	mov.w	r3, #0
 800496c:	f04f 020a 	mov.w	r2, #10
 8004970:	4641      	mov	r1, r8
 8004972:	4628      	mov	r0, r5
 8004974:	d107      	bne.n	8004986 <_dtoa_r+0xb1e>
 8004976:	f000 fb0b 	bl	8004f90 <__multadd>
 800497a:	4680      	mov	r8, r0
 800497c:	4606      	mov	r6, r0
 800497e:	9b08      	ldr	r3, [sp, #32]
 8004980:	3301      	adds	r3, #1
 8004982:	9308      	str	r3, [sp, #32]
 8004984:	e775      	b.n	8004872 <_dtoa_r+0xa0a>
 8004986:	f000 fb03 	bl	8004f90 <__multadd>
 800498a:	4631      	mov	r1, r6
 800498c:	4680      	mov	r8, r0
 800498e:	2300      	movs	r3, #0
 8004990:	220a      	movs	r2, #10
 8004992:	4628      	mov	r0, r5
 8004994:	f000 fafc 	bl	8004f90 <__multadd>
 8004998:	4606      	mov	r6, r0
 800499a:	e7f0      	b.n	800497e <_dtoa_r+0xb16>
 800499c:	f1b9 0f00 	cmp.w	r9, #0
 80049a0:	bfcc      	ite	gt
 80049a2:	464f      	movgt	r7, r9
 80049a4:	2701      	movle	r7, #1
 80049a6:	f04f 0800 	mov.w	r8, #0
 80049aa:	9a03      	ldr	r2, [sp, #12]
 80049ac:	4417      	add	r7, r2
 80049ae:	4659      	mov	r1, fp
 80049b0:	2201      	movs	r2, #1
 80049b2:	4628      	mov	r0, r5
 80049b4:	9308      	str	r3, [sp, #32]
 80049b6:	f000 fc97 	bl	80052e8 <__lshift>
 80049ba:	4621      	mov	r1, r4
 80049bc:	4683      	mov	fp, r0
 80049be:	f000 fd03 	bl	80053c8 <__mcmp>
 80049c2:	2800      	cmp	r0, #0
 80049c4:	dcb2      	bgt.n	800492c <_dtoa_r+0xac4>
 80049c6:	d102      	bne.n	80049ce <_dtoa_r+0xb66>
 80049c8:	9b08      	ldr	r3, [sp, #32]
 80049ca:	07db      	lsls	r3, r3, #31
 80049cc:	d4ae      	bmi.n	800492c <_dtoa_r+0xac4>
 80049ce:	463b      	mov	r3, r7
 80049d0:	461f      	mov	r7, r3
 80049d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80049d6:	2a30      	cmp	r2, #48	; 0x30
 80049d8:	d0fa      	beq.n	80049d0 <_dtoa_r+0xb68>
 80049da:	e6f9      	b.n	80047d0 <_dtoa_r+0x968>
 80049dc:	9a03      	ldr	r2, [sp, #12]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d1a5      	bne.n	800492e <_dtoa_r+0xac6>
 80049e2:	2331      	movs	r3, #49	; 0x31
 80049e4:	f10a 0a01 	add.w	sl, sl, #1
 80049e8:	e779      	b.n	80048de <_dtoa_r+0xa76>
 80049ea:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <_dtoa_r+0xbd4>)
 80049ec:	f7ff baa8 	b.w	8003f40 <_dtoa_r+0xd8>
 80049f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f47f aa81 	bne.w	8003efa <_dtoa_r+0x92>
 80049f8:	4b11      	ldr	r3, [pc, #68]	; (8004a40 <_dtoa_r+0xbd8>)
 80049fa:	f7ff baa1 	b.w	8003f40 <_dtoa_r+0xd8>
 80049fe:	f1b9 0f00 	cmp.w	r9, #0
 8004a02:	dc03      	bgt.n	8004a0c <_dtoa_r+0xba4>
 8004a04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	f73f aecb 	bgt.w	80047a2 <_dtoa_r+0x93a>
 8004a0c:	9f03      	ldr	r7, [sp, #12]
 8004a0e:	4621      	mov	r1, r4
 8004a10:	4658      	mov	r0, fp
 8004a12:	f7ff f99b 	bl	8003d4c <quorem>
 8004a16:	9a03      	ldr	r2, [sp, #12]
 8004a18:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004a1c:	f807 3b01 	strb.w	r3, [r7], #1
 8004a20:	1aba      	subs	r2, r7, r2
 8004a22:	4591      	cmp	r9, r2
 8004a24:	ddba      	ble.n	800499c <_dtoa_r+0xb34>
 8004a26:	4659      	mov	r1, fp
 8004a28:	2300      	movs	r3, #0
 8004a2a:	220a      	movs	r2, #10
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	f000 faaf 	bl	8004f90 <__multadd>
 8004a32:	4683      	mov	fp, r0
 8004a34:	e7eb      	b.n	8004a0e <_dtoa_r+0xba6>
 8004a36:	bf00      	nop
 8004a38:	08005e43 	.word	0x08005e43
 8004a3c:	08005da0 	.word	0x08005da0
 8004a40:	08005dc4 	.word	0x08005dc4

08004a44 <__sflush_r>:
 8004a44:	898a      	ldrh	r2, [r1, #12]
 8004a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a48:	4605      	mov	r5, r0
 8004a4a:	0710      	lsls	r0, r2, #28
 8004a4c:	460c      	mov	r4, r1
 8004a4e:	d457      	bmi.n	8004b00 <__sflush_r+0xbc>
 8004a50:	684b      	ldr	r3, [r1, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	dc04      	bgt.n	8004a60 <__sflush_r+0x1c>
 8004a56:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	dc01      	bgt.n	8004a60 <__sflush_r+0x1c>
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a62:	2e00      	cmp	r6, #0
 8004a64:	d0fa      	beq.n	8004a5c <__sflush_r+0x18>
 8004a66:	2300      	movs	r3, #0
 8004a68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a6c:	682f      	ldr	r7, [r5, #0]
 8004a6e:	602b      	str	r3, [r5, #0]
 8004a70:	d032      	beq.n	8004ad8 <__sflush_r+0x94>
 8004a72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a74:	89a3      	ldrh	r3, [r4, #12]
 8004a76:	075a      	lsls	r2, r3, #29
 8004a78:	d505      	bpl.n	8004a86 <__sflush_r+0x42>
 8004a7a:	6863      	ldr	r3, [r4, #4]
 8004a7c:	1ac0      	subs	r0, r0, r3
 8004a7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a80:	b10b      	cbz	r3, 8004a86 <__sflush_r+0x42>
 8004a82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a84:	1ac0      	subs	r0, r0, r3
 8004a86:	2300      	movs	r3, #0
 8004a88:	4602      	mov	r2, r0
 8004a8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	6a21      	ldr	r1, [r4, #32]
 8004a90:	47b0      	blx	r6
 8004a92:	1c43      	adds	r3, r0, #1
 8004a94:	89a3      	ldrh	r3, [r4, #12]
 8004a96:	d106      	bne.n	8004aa6 <__sflush_r+0x62>
 8004a98:	6829      	ldr	r1, [r5, #0]
 8004a9a:	291d      	cmp	r1, #29
 8004a9c:	d82c      	bhi.n	8004af8 <__sflush_r+0xb4>
 8004a9e:	4a29      	ldr	r2, [pc, #164]	; (8004b44 <__sflush_r+0x100>)
 8004aa0:	40ca      	lsrs	r2, r1
 8004aa2:	07d6      	lsls	r6, r2, #31
 8004aa4:	d528      	bpl.n	8004af8 <__sflush_r+0xb4>
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	6062      	str	r2, [r4, #4]
 8004aaa:	6922      	ldr	r2, [r4, #16]
 8004aac:	04d9      	lsls	r1, r3, #19
 8004aae:	6022      	str	r2, [r4, #0]
 8004ab0:	d504      	bpl.n	8004abc <__sflush_r+0x78>
 8004ab2:	1c42      	adds	r2, r0, #1
 8004ab4:	d101      	bne.n	8004aba <__sflush_r+0x76>
 8004ab6:	682b      	ldr	r3, [r5, #0]
 8004ab8:	b903      	cbnz	r3, 8004abc <__sflush_r+0x78>
 8004aba:	6560      	str	r0, [r4, #84]	; 0x54
 8004abc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004abe:	602f      	str	r7, [r5, #0]
 8004ac0:	2900      	cmp	r1, #0
 8004ac2:	d0cb      	beq.n	8004a5c <__sflush_r+0x18>
 8004ac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ac8:	4299      	cmp	r1, r3
 8004aca:	d002      	beq.n	8004ad2 <__sflush_r+0x8e>
 8004acc:	4628      	mov	r0, r5
 8004ace:	f000 fd93 	bl	80055f8 <_free_r>
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	6360      	str	r0, [r4, #52]	; 0x34
 8004ad6:	e7c2      	b.n	8004a5e <__sflush_r+0x1a>
 8004ad8:	6a21      	ldr	r1, [r4, #32]
 8004ada:	2301      	movs	r3, #1
 8004adc:	4628      	mov	r0, r5
 8004ade:	47b0      	blx	r6
 8004ae0:	1c41      	adds	r1, r0, #1
 8004ae2:	d1c7      	bne.n	8004a74 <__sflush_r+0x30>
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0c4      	beq.n	8004a74 <__sflush_r+0x30>
 8004aea:	2b1d      	cmp	r3, #29
 8004aec:	d001      	beq.n	8004af2 <__sflush_r+0xae>
 8004aee:	2b16      	cmp	r3, #22
 8004af0:	d101      	bne.n	8004af6 <__sflush_r+0xb2>
 8004af2:	602f      	str	r7, [r5, #0]
 8004af4:	e7b2      	b.n	8004a5c <__sflush_r+0x18>
 8004af6:	89a3      	ldrh	r3, [r4, #12]
 8004af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004afc:	81a3      	strh	r3, [r4, #12]
 8004afe:	e7ae      	b.n	8004a5e <__sflush_r+0x1a>
 8004b00:	690f      	ldr	r7, [r1, #16]
 8004b02:	2f00      	cmp	r7, #0
 8004b04:	d0aa      	beq.n	8004a5c <__sflush_r+0x18>
 8004b06:	0793      	lsls	r3, r2, #30
 8004b08:	bf18      	it	ne
 8004b0a:	2300      	movne	r3, #0
 8004b0c:	680e      	ldr	r6, [r1, #0]
 8004b0e:	bf08      	it	eq
 8004b10:	694b      	ldreq	r3, [r1, #20]
 8004b12:	1bf6      	subs	r6, r6, r7
 8004b14:	600f      	str	r7, [r1, #0]
 8004b16:	608b      	str	r3, [r1, #8]
 8004b18:	2e00      	cmp	r6, #0
 8004b1a:	dd9f      	ble.n	8004a5c <__sflush_r+0x18>
 8004b1c:	4633      	mov	r3, r6
 8004b1e:	463a      	mov	r2, r7
 8004b20:	4628      	mov	r0, r5
 8004b22:	6a21      	ldr	r1, [r4, #32]
 8004b24:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004b28:	47e0      	blx	ip
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	dc06      	bgt.n	8004b3c <__sflush_r+0xf8>
 8004b2e:	89a3      	ldrh	r3, [r4, #12]
 8004b30:	f04f 30ff 	mov.w	r0, #4294967295
 8004b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b38:	81a3      	strh	r3, [r4, #12]
 8004b3a:	e790      	b.n	8004a5e <__sflush_r+0x1a>
 8004b3c:	4407      	add	r7, r0
 8004b3e:	1a36      	subs	r6, r6, r0
 8004b40:	e7ea      	b.n	8004b18 <__sflush_r+0xd4>
 8004b42:	bf00      	nop
 8004b44:	20400001 	.word	0x20400001

08004b48 <_fflush_r>:
 8004b48:	b538      	push	{r3, r4, r5, lr}
 8004b4a:	690b      	ldr	r3, [r1, #16]
 8004b4c:	4605      	mov	r5, r0
 8004b4e:	460c      	mov	r4, r1
 8004b50:	b913      	cbnz	r3, 8004b58 <_fflush_r+0x10>
 8004b52:	2500      	movs	r5, #0
 8004b54:	4628      	mov	r0, r5
 8004b56:	bd38      	pop	{r3, r4, r5, pc}
 8004b58:	b118      	cbz	r0, 8004b62 <_fflush_r+0x1a>
 8004b5a:	6983      	ldr	r3, [r0, #24]
 8004b5c:	b90b      	cbnz	r3, 8004b62 <_fflush_r+0x1a>
 8004b5e:	f000 f887 	bl	8004c70 <__sinit>
 8004b62:	4b14      	ldr	r3, [pc, #80]	; (8004bb4 <_fflush_r+0x6c>)
 8004b64:	429c      	cmp	r4, r3
 8004b66:	d11b      	bne.n	8004ba0 <_fflush_r+0x58>
 8004b68:	686c      	ldr	r4, [r5, #4]
 8004b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0ef      	beq.n	8004b52 <_fflush_r+0xa>
 8004b72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b74:	07d0      	lsls	r0, r2, #31
 8004b76:	d404      	bmi.n	8004b82 <_fflush_r+0x3a>
 8004b78:	0599      	lsls	r1, r3, #22
 8004b7a:	d402      	bmi.n	8004b82 <_fflush_r+0x3a>
 8004b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b7e:	f000 f91a 	bl	8004db6 <__retarget_lock_acquire_recursive>
 8004b82:	4628      	mov	r0, r5
 8004b84:	4621      	mov	r1, r4
 8004b86:	f7ff ff5d 	bl	8004a44 <__sflush_r>
 8004b8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b8c:	4605      	mov	r5, r0
 8004b8e:	07da      	lsls	r2, r3, #31
 8004b90:	d4e0      	bmi.n	8004b54 <_fflush_r+0xc>
 8004b92:	89a3      	ldrh	r3, [r4, #12]
 8004b94:	059b      	lsls	r3, r3, #22
 8004b96:	d4dd      	bmi.n	8004b54 <_fflush_r+0xc>
 8004b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b9a:	f000 f90d 	bl	8004db8 <__retarget_lock_release_recursive>
 8004b9e:	e7d9      	b.n	8004b54 <_fflush_r+0xc>
 8004ba0:	4b05      	ldr	r3, [pc, #20]	; (8004bb8 <_fflush_r+0x70>)
 8004ba2:	429c      	cmp	r4, r3
 8004ba4:	d101      	bne.n	8004baa <_fflush_r+0x62>
 8004ba6:	68ac      	ldr	r4, [r5, #8]
 8004ba8:	e7df      	b.n	8004b6a <_fflush_r+0x22>
 8004baa:	4b04      	ldr	r3, [pc, #16]	; (8004bbc <_fflush_r+0x74>)
 8004bac:	429c      	cmp	r4, r3
 8004bae:	bf08      	it	eq
 8004bb0:	68ec      	ldreq	r4, [r5, #12]
 8004bb2:	e7da      	b.n	8004b6a <_fflush_r+0x22>
 8004bb4:	08005e74 	.word	0x08005e74
 8004bb8:	08005e94 	.word	0x08005e94
 8004bbc:	08005e54 	.word	0x08005e54

08004bc0 <std>:
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	b510      	push	{r4, lr}
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	e9c0 3300 	strd	r3, r3, [r0]
 8004bca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bce:	6083      	str	r3, [r0, #8]
 8004bd0:	8181      	strh	r1, [r0, #12]
 8004bd2:	6643      	str	r3, [r0, #100]	; 0x64
 8004bd4:	81c2      	strh	r2, [r0, #14]
 8004bd6:	6183      	str	r3, [r0, #24]
 8004bd8:	4619      	mov	r1, r3
 8004bda:	2208      	movs	r2, #8
 8004bdc:	305c      	adds	r0, #92	; 0x5c
 8004bde:	f7fe faff 	bl	80031e0 <memset>
 8004be2:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <std+0x38>)
 8004be4:	6224      	str	r4, [r4, #32]
 8004be6:	6263      	str	r3, [r4, #36]	; 0x24
 8004be8:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <std+0x3c>)
 8004bea:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bec:	4b04      	ldr	r3, [pc, #16]	; (8004c00 <std+0x40>)
 8004bee:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bf0:	4b04      	ldr	r3, [pc, #16]	; (8004c04 <std+0x44>)
 8004bf2:	6323      	str	r3, [r4, #48]	; 0x30
 8004bf4:	bd10      	pop	{r4, pc}
 8004bf6:	bf00      	nop
 8004bf8:	08005a81 	.word	0x08005a81
 8004bfc:	08005aa3 	.word	0x08005aa3
 8004c00:	08005adb 	.word	0x08005adb
 8004c04:	08005aff 	.word	0x08005aff

08004c08 <_cleanup_r>:
 8004c08:	4901      	ldr	r1, [pc, #4]	; (8004c10 <_cleanup_r+0x8>)
 8004c0a:	f000 b8af 	b.w	8004d6c <_fwalk_reent>
 8004c0e:	bf00      	nop
 8004c10:	08004b49 	.word	0x08004b49

08004c14 <__sfmoreglue>:
 8004c14:	2268      	movs	r2, #104	; 0x68
 8004c16:	b570      	push	{r4, r5, r6, lr}
 8004c18:	1e4d      	subs	r5, r1, #1
 8004c1a:	4355      	muls	r5, r2
 8004c1c:	460e      	mov	r6, r1
 8004c1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c22:	f000 fd51 	bl	80056c8 <_malloc_r>
 8004c26:	4604      	mov	r4, r0
 8004c28:	b140      	cbz	r0, 8004c3c <__sfmoreglue+0x28>
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	e9c0 1600 	strd	r1, r6, [r0]
 8004c30:	300c      	adds	r0, #12
 8004c32:	60a0      	str	r0, [r4, #8]
 8004c34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c38:	f7fe fad2 	bl	80031e0 <memset>
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	bd70      	pop	{r4, r5, r6, pc}

08004c40 <__sfp_lock_acquire>:
 8004c40:	4801      	ldr	r0, [pc, #4]	; (8004c48 <__sfp_lock_acquire+0x8>)
 8004c42:	f000 b8b8 	b.w	8004db6 <__retarget_lock_acquire_recursive>
 8004c46:	bf00      	nop
 8004c48:	20000409 	.word	0x20000409

08004c4c <__sfp_lock_release>:
 8004c4c:	4801      	ldr	r0, [pc, #4]	; (8004c54 <__sfp_lock_release+0x8>)
 8004c4e:	f000 b8b3 	b.w	8004db8 <__retarget_lock_release_recursive>
 8004c52:	bf00      	nop
 8004c54:	20000409 	.word	0x20000409

08004c58 <__sinit_lock_acquire>:
 8004c58:	4801      	ldr	r0, [pc, #4]	; (8004c60 <__sinit_lock_acquire+0x8>)
 8004c5a:	f000 b8ac 	b.w	8004db6 <__retarget_lock_acquire_recursive>
 8004c5e:	bf00      	nop
 8004c60:	2000040a 	.word	0x2000040a

08004c64 <__sinit_lock_release>:
 8004c64:	4801      	ldr	r0, [pc, #4]	; (8004c6c <__sinit_lock_release+0x8>)
 8004c66:	f000 b8a7 	b.w	8004db8 <__retarget_lock_release_recursive>
 8004c6a:	bf00      	nop
 8004c6c:	2000040a 	.word	0x2000040a

08004c70 <__sinit>:
 8004c70:	b510      	push	{r4, lr}
 8004c72:	4604      	mov	r4, r0
 8004c74:	f7ff fff0 	bl	8004c58 <__sinit_lock_acquire>
 8004c78:	69a3      	ldr	r3, [r4, #24]
 8004c7a:	b11b      	cbz	r3, 8004c84 <__sinit+0x14>
 8004c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c80:	f7ff bff0 	b.w	8004c64 <__sinit_lock_release>
 8004c84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c88:	6523      	str	r3, [r4, #80]	; 0x50
 8004c8a:	4b13      	ldr	r3, [pc, #76]	; (8004cd8 <__sinit+0x68>)
 8004c8c:	4a13      	ldr	r2, [pc, #76]	; (8004cdc <__sinit+0x6c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c92:	42a3      	cmp	r3, r4
 8004c94:	bf08      	it	eq
 8004c96:	2301      	moveq	r3, #1
 8004c98:	4620      	mov	r0, r4
 8004c9a:	bf08      	it	eq
 8004c9c:	61a3      	streq	r3, [r4, #24]
 8004c9e:	f000 f81f 	bl	8004ce0 <__sfp>
 8004ca2:	6060      	str	r0, [r4, #4]
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f000 f81b 	bl	8004ce0 <__sfp>
 8004caa:	60a0      	str	r0, [r4, #8]
 8004cac:	4620      	mov	r0, r4
 8004cae:	f000 f817 	bl	8004ce0 <__sfp>
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	2104      	movs	r1, #4
 8004cb6:	60e0      	str	r0, [r4, #12]
 8004cb8:	6860      	ldr	r0, [r4, #4]
 8004cba:	f7ff ff81 	bl	8004bc0 <std>
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	2109      	movs	r1, #9
 8004cc2:	68a0      	ldr	r0, [r4, #8]
 8004cc4:	f7ff ff7c 	bl	8004bc0 <std>
 8004cc8:	2202      	movs	r2, #2
 8004cca:	2112      	movs	r1, #18
 8004ccc:	68e0      	ldr	r0, [r4, #12]
 8004cce:	f7ff ff77 	bl	8004bc0 <std>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	61a3      	str	r3, [r4, #24]
 8004cd6:	e7d1      	b.n	8004c7c <__sinit+0xc>
 8004cd8:	08005d8c 	.word	0x08005d8c
 8004cdc:	08004c09 	.word	0x08004c09

08004ce0 <__sfp>:
 8004ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce2:	4607      	mov	r7, r0
 8004ce4:	f7ff ffac 	bl	8004c40 <__sfp_lock_acquire>
 8004ce8:	4b1e      	ldr	r3, [pc, #120]	; (8004d64 <__sfp+0x84>)
 8004cea:	681e      	ldr	r6, [r3, #0]
 8004cec:	69b3      	ldr	r3, [r6, #24]
 8004cee:	b913      	cbnz	r3, 8004cf6 <__sfp+0x16>
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f7ff ffbd 	bl	8004c70 <__sinit>
 8004cf6:	3648      	adds	r6, #72	; 0x48
 8004cf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	d503      	bpl.n	8004d08 <__sfp+0x28>
 8004d00:	6833      	ldr	r3, [r6, #0]
 8004d02:	b30b      	cbz	r3, 8004d48 <__sfp+0x68>
 8004d04:	6836      	ldr	r6, [r6, #0]
 8004d06:	e7f7      	b.n	8004cf8 <__sfp+0x18>
 8004d08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d0c:	b9d5      	cbnz	r5, 8004d44 <__sfp+0x64>
 8004d0e:	4b16      	ldr	r3, [pc, #88]	; (8004d68 <__sfp+0x88>)
 8004d10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d14:	60e3      	str	r3, [r4, #12]
 8004d16:	6665      	str	r5, [r4, #100]	; 0x64
 8004d18:	f000 f84c 	bl	8004db4 <__retarget_lock_init_recursive>
 8004d1c:	f7ff ff96 	bl	8004c4c <__sfp_lock_release>
 8004d20:	2208      	movs	r2, #8
 8004d22:	4629      	mov	r1, r5
 8004d24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d2c:	6025      	str	r5, [r4, #0]
 8004d2e:	61a5      	str	r5, [r4, #24]
 8004d30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d34:	f7fe fa54 	bl	80031e0 <memset>
 8004d38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d40:	4620      	mov	r0, r4
 8004d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d44:	3468      	adds	r4, #104	; 0x68
 8004d46:	e7d9      	b.n	8004cfc <__sfp+0x1c>
 8004d48:	2104      	movs	r1, #4
 8004d4a:	4638      	mov	r0, r7
 8004d4c:	f7ff ff62 	bl	8004c14 <__sfmoreglue>
 8004d50:	4604      	mov	r4, r0
 8004d52:	6030      	str	r0, [r6, #0]
 8004d54:	2800      	cmp	r0, #0
 8004d56:	d1d5      	bne.n	8004d04 <__sfp+0x24>
 8004d58:	f7ff ff78 	bl	8004c4c <__sfp_lock_release>
 8004d5c:	230c      	movs	r3, #12
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	e7ee      	b.n	8004d40 <__sfp+0x60>
 8004d62:	bf00      	nop
 8004d64:	08005d8c 	.word	0x08005d8c
 8004d68:	ffff0001 	.word	0xffff0001

08004d6c <_fwalk_reent>:
 8004d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d70:	4606      	mov	r6, r0
 8004d72:	4688      	mov	r8, r1
 8004d74:	2700      	movs	r7, #0
 8004d76:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d7e:	f1b9 0901 	subs.w	r9, r9, #1
 8004d82:	d505      	bpl.n	8004d90 <_fwalk_reent+0x24>
 8004d84:	6824      	ldr	r4, [r4, #0]
 8004d86:	2c00      	cmp	r4, #0
 8004d88:	d1f7      	bne.n	8004d7a <_fwalk_reent+0xe>
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d90:	89ab      	ldrh	r3, [r5, #12]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d907      	bls.n	8004da6 <_fwalk_reent+0x3a>
 8004d96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	d003      	beq.n	8004da6 <_fwalk_reent+0x3a>
 8004d9e:	4629      	mov	r1, r5
 8004da0:	4630      	mov	r0, r6
 8004da2:	47c0      	blx	r8
 8004da4:	4307      	orrs	r7, r0
 8004da6:	3568      	adds	r5, #104	; 0x68
 8004da8:	e7e9      	b.n	8004d7e <_fwalk_reent+0x12>
	...

08004dac <_localeconv_r>:
 8004dac:	4800      	ldr	r0, [pc, #0]	; (8004db0 <_localeconv_r+0x4>)
 8004dae:	4770      	bx	lr
 8004db0:	20000160 	.word	0x20000160

08004db4 <__retarget_lock_init_recursive>:
 8004db4:	4770      	bx	lr

08004db6 <__retarget_lock_acquire_recursive>:
 8004db6:	4770      	bx	lr

08004db8 <__retarget_lock_release_recursive>:
 8004db8:	4770      	bx	lr

08004dba <__swhatbuf_r>:
 8004dba:	b570      	push	{r4, r5, r6, lr}
 8004dbc:	460e      	mov	r6, r1
 8004dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc2:	4614      	mov	r4, r2
 8004dc4:	2900      	cmp	r1, #0
 8004dc6:	461d      	mov	r5, r3
 8004dc8:	b096      	sub	sp, #88	; 0x58
 8004dca:	da08      	bge.n	8004dde <__swhatbuf_r+0x24>
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004dd2:	602a      	str	r2, [r5, #0]
 8004dd4:	061a      	lsls	r2, r3, #24
 8004dd6:	d410      	bmi.n	8004dfa <__swhatbuf_r+0x40>
 8004dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ddc:	e00e      	b.n	8004dfc <__swhatbuf_r+0x42>
 8004dde:	466a      	mov	r2, sp
 8004de0:	f000 fee4 	bl	8005bac <_fstat_r>
 8004de4:	2800      	cmp	r0, #0
 8004de6:	dbf1      	blt.n	8004dcc <__swhatbuf_r+0x12>
 8004de8:	9a01      	ldr	r2, [sp, #4]
 8004dea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004dee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004df2:	425a      	negs	r2, r3
 8004df4:	415a      	adcs	r2, r3
 8004df6:	602a      	str	r2, [r5, #0]
 8004df8:	e7ee      	b.n	8004dd8 <__swhatbuf_r+0x1e>
 8004dfa:	2340      	movs	r3, #64	; 0x40
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	6023      	str	r3, [r4, #0]
 8004e00:	b016      	add	sp, #88	; 0x58
 8004e02:	bd70      	pop	{r4, r5, r6, pc}

08004e04 <__smakebuf_r>:
 8004e04:	898b      	ldrh	r3, [r1, #12]
 8004e06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e08:	079d      	lsls	r5, r3, #30
 8004e0a:	4606      	mov	r6, r0
 8004e0c:	460c      	mov	r4, r1
 8004e0e:	d507      	bpl.n	8004e20 <__smakebuf_r+0x1c>
 8004e10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e14:	6023      	str	r3, [r4, #0]
 8004e16:	6123      	str	r3, [r4, #16]
 8004e18:	2301      	movs	r3, #1
 8004e1a:	6163      	str	r3, [r4, #20]
 8004e1c:	b002      	add	sp, #8
 8004e1e:	bd70      	pop	{r4, r5, r6, pc}
 8004e20:	466a      	mov	r2, sp
 8004e22:	ab01      	add	r3, sp, #4
 8004e24:	f7ff ffc9 	bl	8004dba <__swhatbuf_r>
 8004e28:	9900      	ldr	r1, [sp, #0]
 8004e2a:	4605      	mov	r5, r0
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	f000 fc4b 	bl	80056c8 <_malloc_r>
 8004e32:	b948      	cbnz	r0, 8004e48 <__smakebuf_r+0x44>
 8004e34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e38:	059a      	lsls	r2, r3, #22
 8004e3a:	d4ef      	bmi.n	8004e1c <__smakebuf_r+0x18>
 8004e3c:	f023 0303 	bic.w	r3, r3, #3
 8004e40:	f043 0302 	orr.w	r3, r3, #2
 8004e44:	81a3      	strh	r3, [r4, #12]
 8004e46:	e7e3      	b.n	8004e10 <__smakebuf_r+0xc>
 8004e48:	4b0d      	ldr	r3, [pc, #52]	; (8004e80 <__smakebuf_r+0x7c>)
 8004e4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e4c:	89a3      	ldrh	r3, [r4, #12]
 8004e4e:	6020      	str	r0, [r4, #0]
 8004e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e54:	81a3      	strh	r3, [r4, #12]
 8004e56:	9b00      	ldr	r3, [sp, #0]
 8004e58:	6120      	str	r0, [r4, #16]
 8004e5a:	6163      	str	r3, [r4, #20]
 8004e5c:	9b01      	ldr	r3, [sp, #4]
 8004e5e:	b15b      	cbz	r3, 8004e78 <__smakebuf_r+0x74>
 8004e60:	4630      	mov	r0, r6
 8004e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e66:	f000 feb3 	bl	8005bd0 <_isatty_r>
 8004e6a:	b128      	cbz	r0, 8004e78 <__smakebuf_r+0x74>
 8004e6c:	89a3      	ldrh	r3, [r4, #12]
 8004e6e:	f023 0303 	bic.w	r3, r3, #3
 8004e72:	f043 0301 	orr.w	r3, r3, #1
 8004e76:	81a3      	strh	r3, [r4, #12]
 8004e78:	89a0      	ldrh	r0, [r4, #12]
 8004e7a:	4305      	orrs	r5, r0
 8004e7c:	81a5      	strh	r5, [r4, #12]
 8004e7e:	e7cd      	b.n	8004e1c <__smakebuf_r+0x18>
 8004e80:	08004c09 	.word	0x08004c09

08004e84 <malloc>:
 8004e84:	4b02      	ldr	r3, [pc, #8]	; (8004e90 <malloc+0xc>)
 8004e86:	4601      	mov	r1, r0
 8004e88:	6818      	ldr	r0, [r3, #0]
 8004e8a:	f000 bc1d 	b.w	80056c8 <_malloc_r>
 8004e8e:	bf00      	nop
 8004e90:	2000000c 	.word	0x2000000c

08004e94 <memchr>:
 8004e94:	4603      	mov	r3, r0
 8004e96:	b510      	push	{r4, lr}
 8004e98:	b2c9      	uxtb	r1, r1
 8004e9a:	4402      	add	r2, r0
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	d101      	bne.n	8004ea6 <memchr+0x12>
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	e003      	b.n	8004eae <memchr+0x1a>
 8004ea6:	7804      	ldrb	r4, [r0, #0]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	428c      	cmp	r4, r1
 8004eac:	d1f6      	bne.n	8004e9c <memchr+0x8>
 8004eae:	bd10      	pop	{r4, pc}

08004eb0 <memcpy>:
 8004eb0:	440a      	add	r2, r1
 8004eb2:	4291      	cmp	r1, r2
 8004eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004eb8:	d100      	bne.n	8004ebc <memcpy+0xc>
 8004eba:	4770      	bx	lr
 8004ebc:	b510      	push	{r4, lr}
 8004ebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ec2:	4291      	cmp	r1, r2
 8004ec4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ec8:	d1f9      	bne.n	8004ebe <memcpy+0xe>
 8004eca:	bd10      	pop	{r4, pc}

08004ecc <_Balloc>:
 8004ecc:	b570      	push	{r4, r5, r6, lr}
 8004ece:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	460d      	mov	r5, r1
 8004ed4:	b976      	cbnz	r6, 8004ef4 <_Balloc+0x28>
 8004ed6:	2010      	movs	r0, #16
 8004ed8:	f7ff ffd4 	bl	8004e84 <malloc>
 8004edc:	4602      	mov	r2, r0
 8004ede:	6260      	str	r0, [r4, #36]	; 0x24
 8004ee0:	b920      	cbnz	r0, 8004eec <_Balloc+0x20>
 8004ee2:	2166      	movs	r1, #102	; 0x66
 8004ee4:	4b17      	ldr	r3, [pc, #92]	; (8004f44 <_Balloc+0x78>)
 8004ee6:	4818      	ldr	r0, [pc, #96]	; (8004f48 <_Balloc+0x7c>)
 8004ee8:	f000 fe20 	bl	8005b2c <__assert_func>
 8004eec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ef0:	6006      	str	r6, [r0, #0]
 8004ef2:	60c6      	str	r6, [r0, #12]
 8004ef4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004ef6:	68f3      	ldr	r3, [r6, #12]
 8004ef8:	b183      	cbz	r3, 8004f1c <_Balloc+0x50>
 8004efa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004f02:	b9b8      	cbnz	r0, 8004f34 <_Balloc+0x68>
 8004f04:	2101      	movs	r1, #1
 8004f06:	fa01 f605 	lsl.w	r6, r1, r5
 8004f0a:	1d72      	adds	r2, r6, #5
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	0092      	lsls	r2, r2, #2
 8004f10:	f000 fb5e 	bl	80055d0 <_calloc_r>
 8004f14:	b160      	cbz	r0, 8004f30 <_Balloc+0x64>
 8004f16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004f1a:	e00e      	b.n	8004f3a <_Balloc+0x6e>
 8004f1c:	2221      	movs	r2, #33	; 0x21
 8004f1e:	2104      	movs	r1, #4
 8004f20:	4620      	mov	r0, r4
 8004f22:	f000 fb55 	bl	80055d0 <_calloc_r>
 8004f26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f28:	60f0      	str	r0, [r6, #12]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e4      	bne.n	8004efa <_Balloc+0x2e>
 8004f30:	2000      	movs	r0, #0
 8004f32:	bd70      	pop	{r4, r5, r6, pc}
 8004f34:	6802      	ldr	r2, [r0, #0]
 8004f36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004f40:	e7f7      	b.n	8004f32 <_Balloc+0x66>
 8004f42:	bf00      	nop
 8004f44:	08005dd1 	.word	0x08005dd1
 8004f48:	08005eb4 	.word	0x08005eb4

08004f4c <_Bfree>:
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004f50:	4605      	mov	r5, r0
 8004f52:	460c      	mov	r4, r1
 8004f54:	b976      	cbnz	r6, 8004f74 <_Bfree+0x28>
 8004f56:	2010      	movs	r0, #16
 8004f58:	f7ff ff94 	bl	8004e84 <malloc>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	6268      	str	r0, [r5, #36]	; 0x24
 8004f60:	b920      	cbnz	r0, 8004f6c <_Bfree+0x20>
 8004f62:	218a      	movs	r1, #138	; 0x8a
 8004f64:	4b08      	ldr	r3, [pc, #32]	; (8004f88 <_Bfree+0x3c>)
 8004f66:	4809      	ldr	r0, [pc, #36]	; (8004f8c <_Bfree+0x40>)
 8004f68:	f000 fde0 	bl	8005b2c <__assert_func>
 8004f6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f70:	6006      	str	r6, [r0, #0]
 8004f72:	60c6      	str	r6, [r0, #12]
 8004f74:	b13c      	cbz	r4, 8004f86 <_Bfree+0x3a>
 8004f76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004f78:	6862      	ldr	r2, [r4, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f80:	6021      	str	r1, [r4, #0]
 8004f82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004f86:	bd70      	pop	{r4, r5, r6, pc}
 8004f88:	08005dd1 	.word	0x08005dd1
 8004f8c:	08005eb4 	.word	0x08005eb4

08004f90 <__multadd>:
 8004f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f94:	4607      	mov	r7, r0
 8004f96:	460c      	mov	r4, r1
 8004f98:	461e      	mov	r6, r3
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	690d      	ldr	r5, [r1, #16]
 8004f9e:	f101 0c14 	add.w	ip, r1, #20
 8004fa2:	f8dc 3000 	ldr.w	r3, [ip]
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	b299      	uxth	r1, r3
 8004faa:	fb02 6101 	mla	r1, r2, r1, r6
 8004fae:	0c1e      	lsrs	r6, r3, #16
 8004fb0:	0c0b      	lsrs	r3, r1, #16
 8004fb2:	fb02 3306 	mla	r3, r2, r6, r3
 8004fb6:	b289      	uxth	r1, r1
 8004fb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004fbc:	4285      	cmp	r5, r0
 8004fbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004fc2:	f84c 1b04 	str.w	r1, [ip], #4
 8004fc6:	dcec      	bgt.n	8004fa2 <__multadd+0x12>
 8004fc8:	b30e      	cbz	r6, 800500e <__multadd+0x7e>
 8004fca:	68a3      	ldr	r3, [r4, #8]
 8004fcc:	42ab      	cmp	r3, r5
 8004fce:	dc19      	bgt.n	8005004 <__multadd+0x74>
 8004fd0:	6861      	ldr	r1, [r4, #4]
 8004fd2:	4638      	mov	r0, r7
 8004fd4:	3101      	adds	r1, #1
 8004fd6:	f7ff ff79 	bl	8004ecc <_Balloc>
 8004fda:	4680      	mov	r8, r0
 8004fdc:	b928      	cbnz	r0, 8004fea <__multadd+0x5a>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	21b5      	movs	r1, #181	; 0xb5
 8004fe2:	4b0c      	ldr	r3, [pc, #48]	; (8005014 <__multadd+0x84>)
 8004fe4:	480c      	ldr	r0, [pc, #48]	; (8005018 <__multadd+0x88>)
 8004fe6:	f000 fda1 	bl	8005b2c <__assert_func>
 8004fea:	6922      	ldr	r2, [r4, #16]
 8004fec:	f104 010c 	add.w	r1, r4, #12
 8004ff0:	3202      	adds	r2, #2
 8004ff2:	0092      	lsls	r2, r2, #2
 8004ff4:	300c      	adds	r0, #12
 8004ff6:	f7ff ff5b 	bl	8004eb0 <memcpy>
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	4638      	mov	r0, r7
 8004ffe:	f7ff ffa5 	bl	8004f4c <_Bfree>
 8005002:	4644      	mov	r4, r8
 8005004:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005008:	3501      	adds	r5, #1
 800500a:	615e      	str	r6, [r3, #20]
 800500c:	6125      	str	r5, [r4, #16]
 800500e:	4620      	mov	r0, r4
 8005010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005014:	08005e43 	.word	0x08005e43
 8005018:	08005eb4 	.word	0x08005eb4

0800501c <__hi0bits>:
 800501c:	0c02      	lsrs	r2, r0, #16
 800501e:	0412      	lsls	r2, r2, #16
 8005020:	4603      	mov	r3, r0
 8005022:	b9ca      	cbnz	r2, 8005058 <__hi0bits+0x3c>
 8005024:	0403      	lsls	r3, r0, #16
 8005026:	2010      	movs	r0, #16
 8005028:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800502c:	bf04      	itt	eq
 800502e:	021b      	lsleq	r3, r3, #8
 8005030:	3008      	addeq	r0, #8
 8005032:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005036:	bf04      	itt	eq
 8005038:	011b      	lsleq	r3, r3, #4
 800503a:	3004      	addeq	r0, #4
 800503c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005040:	bf04      	itt	eq
 8005042:	009b      	lsleq	r3, r3, #2
 8005044:	3002      	addeq	r0, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	db05      	blt.n	8005056 <__hi0bits+0x3a>
 800504a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800504e:	f100 0001 	add.w	r0, r0, #1
 8005052:	bf08      	it	eq
 8005054:	2020      	moveq	r0, #32
 8005056:	4770      	bx	lr
 8005058:	2000      	movs	r0, #0
 800505a:	e7e5      	b.n	8005028 <__hi0bits+0xc>

0800505c <__lo0bits>:
 800505c:	6803      	ldr	r3, [r0, #0]
 800505e:	4602      	mov	r2, r0
 8005060:	f013 0007 	ands.w	r0, r3, #7
 8005064:	d00b      	beq.n	800507e <__lo0bits+0x22>
 8005066:	07d9      	lsls	r1, r3, #31
 8005068:	d421      	bmi.n	80050ae <__lo0bits+0x52>
 800506a:	0798      	lsls	r0, r3, #30
 800506c:	bf49      	itett	mi
 800506e:	085b      	lsrmi	r3, r3, #1
 8005070:	089b      	lsrpl	r3, r3, #2
 8005072:	2001      	movmi	r0, #1
 8005074:	6013      	strmi	r3, [r2, #0]
 8005076:	bf5c      	itt	pl
 8005078:	2002      	movpl	r0, #2
 800507a:	6013      	strpl	r3, [r2, #0]
 800507c:	4770      	bx	lr
 800507e:	b299      	uxth	r1, r3
 8005080:	b909      	cbnz	r1, 8005086 <__lo0bits+0x2a>
 8005082:	2010      	movs	r0, #16
 8005084:	0c1b      	lsrs	r3, r3, #16
 8005086:	b2d9      	uxtb	r1, r3
 8005088:	b909      	cbnz	r1, 800508e <__lo0bits+0x32>
 800508a:	3008      	adds	r0, #8
 800508c:	0a1b      	lsrs	r3, r3, #8
 800508e:	0719      	lsls	r1, r3, #28
 8005090:	bf04      	itt	eq
 8005092:	091b      	lsreq	r3, r3, #4
 8005094:	3004      	addeq	r0, #4
 8005096:	0799      	lsls	r1, r3, #30
 8005098:	bf04      	itt	eq
 800509a:	089b      	lsreq	r3, r3, #2
 800509c:	3002      	addeq	r0, #2
 800509e:	07d9      	lsls	r1, r3, #31
 80050a0:	d403      	bmi.n	80050aa <__lo0bits+0x4e>
 80050a2:	085b      	lsrs	r3, r3, #1
 80050a4:	f100 0001 	add.w	r0, r0, #1
 80050a8:	d003      	beq.n	80050b2 <__lo0bits+0x56>
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	4770      	bx	lr
 80050ae:	2000      	movs	r0, #0
 80050b0:	4770      	bx	lr
 80050b2:	2020      	movs	r0, #32
 80050b4:	4770      	bx	lr
	...

080050b8 <__i2b>:
 80050b8:	b510      	push	{r4, lr}
 80050ba:	460c      	mov	r4, r1
 80050bc:	2101      	movs	r1, #1
 80050be:	f7ff ff05 	bl	8004ecc <_Balloc>
 80050c2:	4602      	mov	r2, r0
 80050c4:	b928      	cbnz	r0, 80050d2 <__i2b+0x1a>
 80050c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80050ca:	4b04      	ldr	r3, [pc, #16]	; (80050dc <__i2b+0x24>)
 80050cc:	4804      	ldr	r0, [pc, #16]	; (80050e0 <__i2b+0x28>)
 80050ce:	f000 fd2d 	bl	8005b2c <__assert_func>
 80050d2:	2301      	movs	r3, #1
 80050d4:	6144      	str	r4, [r0, #20]
 80050d6:	6103      	str	r3, [r0, #16]
 80050d8:	bd10      	pop	{r4, pc}
 80050da:	bf00      	nop
 80050dc:	08005e43 	.word	0x08005e43
 80050e0:	08005eb4 	.word	0x08005eb4

080050e4 <__multiply>:
 80050e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e8:	4691      	mov	r9, r2
 80050ea:	690a      	ldr	r2, [r1, #16]
 80050ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80050f0:	460c      	mov	r4, r1
 80050f2:	429a      	cmp	r2, r3
 80050f4:	bfbe      	ittt	lt
 80050f6:	460b      	movlt	r3, r1
 80050f8:	464c      	movlt	r4, r9
 80050fa:	4699      	movlt	r9, r3
 80050fc:	6927      	ldr	r7, [r4, #16]
 80050fe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005102:	68a3      	ldr	r3, [r4, #8]
 8005104:	6861      	ldr	r1, [r4, #4]
 8005106:	eb07 060a 	add.w	r6, r7, sl
 800510a:	42b3      	cmp	r3, r6
 800510c:	b085      	sub	sp, #20
 800510e:	bfb8      	it	lt
 8005110:	3101      	addlt	r1, #1
 8005112:	f7ff fedb 	bl	8004ecc <_Balloc>
 8005116:	b930      	cbnz	r0, 8005126 <__multiply+0x42>
 8005118:	4602      	mov	r2, r0
 800511a:	f240 115d 	movw	r1, #349	; 0x15d
 800511e:	4b43      	ldr	r3, [pc, #268]	; (800522c <__multiply+0x148>)
 8005120:	4843      	ldr	r0, [pc, #268]	; (8005230 <__multiply+0x14c>)
 8005122:	f000 fd03 	bl	8005b2c <__assert_func>
 8005126:	f100 0514 	add.w	r5, r0, #20
 800512a:	462b      	mov	r3, r5
 800512c:	2200      	movs	r2, #0
 800512e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005132:	4543      	cmp	r3, r8
 8005134:	d321      	bcc.n	800517a <__multiply+0x96>
 8005136:	f104 0314 	add.w	r3, r4, #20
 800513a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800513e:	f109 0314 	add.w	r3, r9, #20
 8005142:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005146:	9202      	str	r2, [sp, #8]
 8005148:	1b3a      	subs	r2, r7, r4
 800514a:	3a15      	subs	r2, #21
 800514c:	f022 0203 	bic.w	r2, r2, #3
 8005150:	3204      	adds	r2, #4
 8005152:	f104 0115 	add.w	r1, r4, #21
 8005156:	428f      	cmp	r7, r1
 8005158:	bf38      	it	cc
 800515a:	2204      	movcc	r2, #4
 800515c:	9201      	str	r2, [sp, #4]
 800515e:	9a02      	ldr	r2, [sp, #8]
 8005160:	9303      	str	r3, [sp, #12]
 8005162:	429a      	cmp	r2, r3
 8005164:	d80c      	bhi.n	8005180 <__multiply+0x9c>
 8005166:	2e00      	cmp	r6, #0
 8005168:	dd03      	ble.n	8005172 <__multiply+0x8e>
 800516a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800516e:	2b00      	cmp	r3, #0
 8005170:	d059      	beq.n	8005226 <__multiply+0x142>
 8005172:	6106      	str	r6, [r0, #16]
 8005174:	b005      	add	sp, #20
 8005176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800517a:	f843 2b04 	str.w	r2, [r3], #4
 800517e:	e7d8      	b.n	8005132 <__multiply+0x4e>
 8005180:	f8b3 a000 	ldrh.w	sl, [r3]
 8005184:	f1ba 0f00 	cmp.w	sl, #0
 8005188:	d023      	beq.n	80051d2 <__multiply+0xee>
 800518a:	46a9      	mov	r9, r5
 800518c:	f04f 0c00 	mov.w	ip, #0
 8005190:	f104 0e14 	add.w	lr, r4, #20
 8005194:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005198:	f8d9 1000 	ldr.w	r1, [r9]
 800519c:	fa1f fb82 	uxth.w	fp, r2
 80051a0:	b289      	uxth	r1, r1
 80051a2:	fb0a 110b 	mla	r1, sl, fp, r1
 80051a6:	4461      	add	r1, ip
 80051a8:	f8d9 c000 	ldr.w	ip, [r9]
 80051ac:	0c12      	lsrs	r2, r2, #16
 80051ae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80051b2:	fb0a c202 	mla	r2, sl, r2, ip
 80051b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80051ba:	b289      	uxth	r1, r1
 80051bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80051c0:	4577      	cmp	r7, lr
 80051c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80051c6:	f849 1b04 	str.w	r1, [r9], #4
 80051ca:	d8e3      	bhi.n	8005194 <__multiply+0xb0>
 80051cc:	9a01      	ldr	r2, [sp, #4]
 80051ce:	f845 c002 	str.w	ip, [r5, r2]
 80051d2:	9a03      	ldr	r2, [sp, #12]
 80051d4:	3304      	adds	r3, #4
 80051d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80051da:	f1b9 0f00 	cmp.w	r9, #0
 80051de:	d020      	beq.n	8005222 <__multiply+0x13e>
 80051e0:	46ae      	mov	lr, r5
 80051e2:	f04f 0a00 	mov.w	sl, #0
 80051e6:	6829      	ldr	r1, [r5, #0]
 80051e8:	f104 0c14 	add.w	ip, r4, #20
 80051ec:	f8bc b000 	ldrh.w	fp, [ip]
 80051f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80051f4:	b289      	uxth	r1, r1
 80051f6:	fb09 220b 	mla	r2, r9, fp, r2
 80051fa:	4492      	add	sl, r2
 80051fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005200:	f84e 1b04 	str.w	r1, [lr], #4
 8005204:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005208:	f8be 1000 	ldrh.w	r1, [lr]
 800520c:	0c12      	lsrs	r2, r2, #16
 800520e:	fb09 1102 	mla	r1, r9, r2, r1
 8005212:	4567      	cmp	r7, ip
 8005214:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005218:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800521c:	d8e6      	bhi.n	80051ec <__multiply+0x108>
 800521e:	9a01      	ldr	r2, [sp, #4]
 8005220:	50a9      	str	r1, [r5, r2]
 8005222:	3504      	adds	r5, #4
 8005224:	e79b      	b.n	800515e <__multiply+0x7a>
 8005226:	3e01      	subs	r6, #1
 8005228:	e79d      	b.n	8005166 <__multiply+0x82>
 800522a:	bf00      	nop
 800522c:	08005e43 	.word	0x08005e43
 8005230:	08005eb4 	.word	0x08005eb4

08005234 <__pow5mult>:
 8005234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005238:	4615      	mov	r5, r2
 800523a:	f012 0203 	ands.w	r2, r2, #3
 800523e:	4606      	mov	r6, r0
 8005240:	460f      	mov	r7, r1
 8005242:	d007      	beq.n	8005254 <__pow5mult+0x20>
 8005244:	4c25      	ldr	r4, [pc, #148]	; (80052dc <__pow5mult+0xa8>)
 8005246:	3a01      	subs	r2, #1
 8005248:	2300      	movs	r3, #0
 800524a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800524e:	f7ff fe9f 	bl	8004f90 <__multadd>
 8005252:	4607      	mov	r7, r0
 8005254:	10ad      	asrs	r5, r5, #2
 8005256:	d03d      	beq.n	80052d4 <__pow5mult+0xa0>
 8005258:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800525a:	b97c      	cbnz	r4, 800527c <__pow5mult+0x48>
 800525c:	2010      	movs	r0, #16
 800525e:	f7ff fe11 	bl	8004e84 <malloc>
 8005262:	4602      	mov	r2, r0
 8005264:	6270      	str	r0, [r6, #36]	; 0x24
 8005266:	b928      	cbnz	r0, 8005274 <__pow5mult+0x40>
 8005268:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800526c:	4b1c      	ldr	r3, [pc, #112]	; (80052e0 <__pow5mult+0xac>)
 800526e:	481d      	ldr	r0, [pc, #116]	; (80052e4 <__pow5mult+0xb0>)
 8005270:	f000 fc5c 	bl	8005b2c <__assert_func>
 8005274:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005278:	6004      	str	r4, [r0, #0]
 800527a:	60c4      	str	r4, [r0, #12]
 800527c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005280:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005284:	b94c      	cbnz	r4, 800529a <__pow5mult+0x66>
 8005286:	f240 2171 	movw	r1, #625	; 0x271
 800528a:	4630      	mov	r0, r6
 800528c:	f7ff ff14 	bl	80050b8 <__i2b>
 8005290:	2300      	movs	r3, #0
 8005292:	4604      	mov	r4, r0
 8005294:	f8c8 0008 	str.w	r0, [r8, #8]
 8005298:	6003      	str	r3, [r0, #0]
 800529a:	f04f 0900 	mov.w	r9, #0
 800529e:	07eb      	lsls	r3, r5, #31
 80052a0:	d50a      	bpl.n	80052b8 <__pow5mult+0x84>
 80052a2:	4639      	mov	r1, r7
 80052a4:	4622      	mov	r2, r4
 80052a6:	4630      	mov	r0, r6
 80052a8:	f7ff ff1c 	bl	80050e4 <__multiply>
 80052ac:	4680      	mov	r8, r0
 80052ae:	4639      	mov	r1, r7
 80052b0:	4630      	mov	r0, r6
 80052b2:	f7ff fe4b 	bl	8004f4c <_Bfree>
 80052b6:	4647      	mov	r7, r8
 80052b8:	106d      	asrs	r5, r5, #1
 80052ba:	d00b      	beq.n	80052d4 <__pow5mult+0xa0>
 80052bc:	6820      	ldr	r0, [r4, #0]
 80052be:	b938      	cbnz	r0, 80052d0 <__pow5mult+0x9c>
 80052c0:	4622      	mov	r2, r4
 80052c2:	4621      	mov	r1, r4
 80052c4:	4630      	mov	r0, r6
 80052c6:	f7ff ff0d 	bl	80050e4 <__multiply>
 80052ca:	6020      	str	r0, [r4, #0]
 80052cc:	f8c0 9000 	str.w	r9, [r0]
 80052d0:	4604      	mov	r4, r0
 80052d2:	e7e4      	b.n	800529e <__pow5mult+0x6a>
 80052d4:	4638      	mov	r0, r7
 80052d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052da:	bf00      	nop
 80052dc:	08006000 	.word	0x08006000
 80052e0:	08005dd1 	.word	0x08005dd1
 80052e4:	08005eb4 	.word	0x08005eb4

080052e8 <__lshift>:
 80052e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052ec:	460c      	mov	r4, r1
 80052ee:	4607      	mov	r7, r0
 80052f0:	4691      	mov	r9, r2
 80052f2:	6923      	ldr	r3, [r4, #16]
 80052f4:	6849      	ldr	r1, [r1, #4]
 80052f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80052fa:	68a3      	ldr	r3, [r4, #8]
 80052fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005300:	f108 0601 	add.w	r6, r8, #1
 8005304:	42b3      	cmp	r3, r6
 8005306:	db0b      	blt.n	8005320 <__lshift+0x38>
 8005308:	4638      	mov	r0, r7
 800530a:	f7ff fddf 	bl	8004ecc <_Balloc>
 800530e:	4605      	mov	r5, r0
 8005310:	b948      	cbnz	r0, 8005326 <__lshift+0x3e>
 8005312:	4602      	mov	r2, r0
 8005314:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005318:	4b29      	ldr	r3, [pc, #164]	; (80053c0 <__lshift+0xd8>)
 800531a:	482a      	ldr	r0, [pc, #168]	; (80053c4 <__lshift+0xdc>)
 800531c:	f000 fc06 	bl	8005b2c <__assert_func>
 8005320:	3101      	adds	r1, #1
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	e7ee      	b.n	8005304 <__lshift+0x1c>
 8005326:	2300      	movs	r3, #0
 8005328:	f100 0114 	add.w	r1, r0, #20
 800532c:	f100 0210 	add.w	r2, r0, #16
 8005330:	4618      	mov	r0, r3
 8005332:	4553      	cmp	r3, sl
 8005334:	db37      	blt.n	80053a6 <__lshift+0xbe>
 8005336:	6920      	ldr	r0, [r4, #16]
 8005338:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800533c:	f104 0314 	add.w	r3, r4, #20
 8005340:	f019 091f 	ands.w	r9, r9, #31
 8005344:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005348:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800534c:	d02f      	beq.n	80053ae <__lshift+0xc6>
 800534e:	468a      	mov	sl, r1
 8005350:	f04f 0c00 	mov.w	ip, #0
 8005354:	f1c9 0e20 	rsb	lr, r9, #32
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	fa02 f209 	lsl.w	r2, r2, r9
 800535e:	ea42 020c 	orr.w	r2, r2, ip
 8005362:	f84a 2b04 	str.w	r2, [sl], #4
 8005366:	f853 2b04 	ldr.w	r2, [r3], #4
 800536a:	4298      	cmp	r0, r3
 800536c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005370:	d8f2      	bhi.n	8005358 <__lshift+0x70>
 8005372:	1b03      	subs	r3, r0, r4
 8005374:	3b15      	subs	r3, #21
 8005376:	f023 0303 	bic.w	r3, r3, #3
 800537a:	3304      	adds	r3, #4
 800537c:	f104 0215 	add.w	r2, r4, #21
 8005380:	4290      	cmp	r0, r2
 8005382:	bf38      	it	cc
 8005384:	2304      	movcc	r3, #4
 8005386:	f841 c003 	str.w	ip, [r1, r3]
 800538a:	f1bc 0f00 	cmp.w	ip, #0
 800538e:	d001      	beq.n	8005394 <__lshift+0xac>
 8005390:	f108 0602 	add.w	r6, r8, #2
 8005394:	3e01      	subs	r6, #1
 8005396:	4638      	mov	r0, r7
 8005398:	4621      	mov	r1, r4
 800539a:	612e      	str	r6, [r5, #16]
 800539c:	f7ff fdd6 	bl	8004f4c <_Bfree>
 80053a0:	4628      	mov	r0, r5
 80053a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80053aa:	3301      	adds	r3, #1
 80053ac:	e7c1      	b.n	8005332 <__lshift+0x4a>
 80053ae:	3904      	subs	r1, #4
 80053b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80053b4:	4298      	cmp	r0, r3
 80053b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80053ba:	d8f9      	bhi.n	80053b0 <__lshift+0xc8>
 80053bc:	e7ea      	b.n	8005394 <__lshift+0xac>
 80053be:	bf00      	nop
 80053c0:	08005e43 	.word	0x08005e43
 80053c4:	08005eb4 	.word	0x08005eb4

080053c8 <__mcmp>:
 80053c8:	4603      	mov	r3, r0
 80053ca:	690a      	ldr	r2, [r1, #16]
 80053cc:	6900      	ldr	r0, [r0, #16]
 80053ce:	b530      	push	{r4, r5, lr}
 80053d0:	1a80      	subs	r0, r0, r2
 80053d2:	d10d      	bne.n	80053f0 <__mcmp+0x28>
 80053d4:	3314      	adds	r3, #20
 80053d6:	3114      	adds	r1, #20
 80053d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80053dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80053e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80053e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80053e8:	4295      	cmp	r5, r2
 80053ea:	d002      	beq.n	80053f2 <__mcmp+0x2a>
 80053ec:	d304      	bcc.n	80053f8 <__mcmp+0x30>
 80053ee:	2001      	movs	r0, #1
 80053f0:	bd30      	pop	{r4, r5, pc}
 80053f2:	42a3      	cmp	r3, r4
 80053f4:	d3f4      	bcc.n	80053e0 <__mcmp+0x18>
 80053f6:	e7fb      	b.n	80053f0 <__mcmp+0x28>
 80053f8:	f04f 30ff 	mov.w	r0, #4294967295
 80053fc:	e7f8      	b.n	80053f0 <__mcmp+0x28>
	...

08005400 <__mdiff>:
 8005400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005404:	460d      	mov	r5, r1
 8005406:	4607      	mov	r7, r0
 8005408:	4611      	mov	r1, r2
 800540a:	4628      	mov	r0, r5
 800540c:	4614      	mov	r4, r2
 800540e:	f7ff ffdb 	bl	80053c8 <__mcmp>
 8005412:	1e06      	subs	r6, r0, #0
 8005414:	d111      	bne.n	800543a <__mdiff+0x3a>
 8005416:	4631      	mov	r1, r6
 8005418:	4638      	mov	r0, r7
 800541a:	f7ff fd57 	bl	8004ecc <_Balloc>
 800541e:	4602      	mov	r2, r0
 8005420:	b928      	cbnz	r0, 800542e <__mdiff+0x2e>
 8005422:	f240 2132 	movw	r1, #562	; 0x232
 8005426:	4b3a      	ldr	r3, [pc, #232]	; (8005510 <__mdiff+0x110>)
 8005428:	483a      	ldr	r0, [pc, #232]	; (8005514 <__mdiff+0x114>)
 800542a:	f000 fb7f 	bl	8005b2c <__assert_func>
 800542e:	2301      	movs	r3, #1
 8005430:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005434:	4610      	mov	r0, r2
 8005436:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800543a:	bfa4      	itt	ge
 800543c:	4623      	movge	r3, r4
 800543e:	462c      	movge	r4, r5
 8005440:	4638      	mov	r0, r7
 8005442:	6861      	ldr	r1, [r4, #4]
 8005444:	bfa6      	itte	ge
 8005446:	461d      	movge	r5, r3
 8005448:	2600      	movge	r6, #0
 800544a:	2601      	movlt	r6, #1
 800544c:	f7ff fd3e 	bl	8004ecc <_Balloc>
 8005450:	4602      	mov	r2, r0
 8005452:	b918      	cbnz	r0, 800545c <__mdiff+0x5c>
 8005454:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005458:	4b2d      	ldr	r3, [pc, #180]	; (8005510 <__mdiff+0x110>)
 800545a:	e7e5      	b.n	8005428 <__mdiff+0x28>
 800545c:	f102 0814 	add.w	r8, r2, #20
 8005460:	46c2      	mov	sl, r8
 8005462:	f04f 0c00 	mov.w	ip, #0
 8005466:	6927      	ldr	r7, [r4, #16]
 8005468:	60c6      	str	r6, [r0, #12]
 800546a:	692e      	ldr	r6, [r5, #16]
 800546c:	f104 0014 	add.w	r0, r4, #20
 8005470:	f105 0914 	add.w	r9, r5, #20
 8005474:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005478:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800547c:	3410      	adds	r4, #16
 800547e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005482:	f859 3b04 	ldr.w	r3, [r9], #4
 8005486:	fa1f f18b 	uxth.w	r1, fp
 800548a:	448c      	add	ip, r1
 800548c:	b299      	uxth	r1, r3
 800548e:	0c1b      	lsrs	r3, r3, #16
 8005490:	ebac 0101 	sub.w	r1, ip, r1
 8005494:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005498:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800549c:	b289      	uxth	r1, r1
 800549e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80054a2:	454e      	cmp	r6, r9
 80054a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80054a8:	f84a 3b04 	str.w	r3, [sl], #4
 80054ac:	d8e7      	bhi.n	800547e <__mdiff+0x7e>
 80054ae:	1b73      	subs	r3, r6, r5
 80054b0:	3b15      	subs	r3, #21
 80054b2:	f023 0303 	bic.w	r3, r3, #3
 80054b6:	3515      	adds	r5, #21
 80054b8:	3304      	adds	r3, #4
 80054ba:	42ae      	cmp	r6, r5
 80054bc:	bf38      	it	cc
 80054be:	2304      	movcc	r3, #4
 80054c0:	4418      	add	r0, r3
 80054c2:	4443      	add	r3, r8
 80054c4:	461e      	mov	r6, r3
 80054c6:	4605      	mov	r5, r0
 80054c8:	4575      	cmp	r5, lr
 80054ca:	d30e      	bcc.n	80054ea <__mdiff+0xea>
 80054cc:	f10e 0103 	add.w	r1, lr, #3
 80054d0:	1a09      	subs	r1, r1, r0
 80054d2:	f021 0103 	bic.w	r1, r1, #3
 80054d6:	3803      	subs	r0, #3
 80054d8:	4586      	cmp	lr, r0
 80054da:	bf38      	it	cc
 80054dc:	2100      	movcc	r1, #0
 80054de:	4419      	add	r1, r3
 80054e0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80054e4:	b18b      	cbz	r3, 800550a <__mdiff+0x10a>
 80054e6:	6117      	str	r7, [r2, #16]
 80054e8:	e7a4      	b.n	8005434 <__mdiff+0x34>
 80054ea:	f855 8b04 	ldr.w	r8, [r5], #4
 80054ee:	fa1f f188 	uxth.w	r1, r8
 80054f2:	4461      	add	r1, ip
 80054f4:	140c      	asrs	r4, r1, #16
 80054f6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80054fa:	b289      	uxth	r1, r1
 80054fc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005500:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005504:	f846 1b04 	str.w	r1, [r6], #4
 8005508:	e7de      	b.n	80054c8 <__mdiff+0xc8>
 800550a:	3f01      	subs	r7, #1
 800550c:	e7e8      	b.n	80054e0 <__mdiff+0xe0>
 800550e:	bf00      	nop
 8005510:	08005e43 	.word	0x08005e43
 8005514:	08005eb4 	.word	0x08005eb4

08005518 <__d2b>:
 8005518:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800551c:	2101      	movs	r1, #1
 800551e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005522:	4690      	mov	r8, r2
 8005524:	461d      	mov	r5, r3
 8005526:	f7ff fcd1 	bl	8004ecc <_Balloc>
 800552a:	4604      	mov	r4, r0
 800552c:	b930      	cbnz	r0, 800553c <__d2b+0x24>
 800552e:	4602      	mov	r2, r0
 8005530:	f240 310a 	movw	r1, #778	; 0x30a
 8005534:	4b24      	ldr	r3, [pc, #144]	; (80055c8 <__d2b+0xb0>)
 8005536:	4825      	ldr	r0, [pc, #148]	; (80055cc <__d2b+0xb4>)
 8005538:	f000 faf8 	bl	8005b2c <__assert_func>
 800553c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005540:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005544:	bb2d      	cbnz	r5, 8005592 <__d2b+0x7a>
 8005546:	9301      	str	r3, [sp, #4]
 8005548:	f1b8 0300 	subs.w	r3, r8, #0
 800554c:	d026      	beq.n	800559c <__d2b+0x84>
 800554e:	4668      	mov	r0, sp
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	f7ff fd83 	bl	800505c <__lo0bits>
 8005556:	9900      	ldr	r1, [sp, #0]
 8005558:	b1f0      	cbz	r0, 8005598 <__d2b+0x80>
 800555a:	9a01      	ldr	r2, [sp, #4]
 800555c:	f1c0 0320 	rsb	r3, r0, #32
 8005560:	fa02 f303 	lsl.w	r3, r2, r3
 8005564:	430b      	orrs	r3, r1
 8005566:	40c2      	lsrs	r2, r0
 8005568:	6163      	str	r3, [r4, #20]
 800556a:	9201      	str	r2, [sp, #4]
 800556c:	9b01      	ldr	r3, [sp, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	bf14      	ite	ne
 8005572:	2102      	movne	r1, #2
 8005574:	2101      	moveq	r1, #1
 8005576:	61a3      	str	r3, [r4, #24]
 8005578:	6121      	str	r1, [r4, #16]
 800557a:	b1c5      	cbz	r5, 80055ae <__d2b+0x96>
 800557c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005580:	4405      	add	r5, r0
 8005582:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005586:	603d      	str	r5, [r7, #0]
 8005588:	6030      	str	r0, [r6, #0]
 800558a:	4620      	mov	r0, r4
 800558c:	b002      	add	sp, #8
 800558e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005596:	e7d6      	b.n	8005546 <__d2b+0x2e>
 8005598:	6161      	str	r1, [r4, #20]
 800559a:	e7e7      	b.n	800556c <__d2b+0x54>
 800559c:	a801      	add	r0, sp, #4
 800559e:	f7ff fd5d 	bl	800505c <__lo0bits>
 80055a2:	2101      	movs	r1, #1
 80055a4:	9b01      	ldr	r3, [sp, #4]
 80055a6:	6121      	str	r1, [r4, #16]
 80055a8:	6163      	str	r3, [r4, #20]
 80055aa:	3020      	adds	r0, #32
 80055ac:	e7e5      	b.n	800557a <__d2b+0x62>
 80055ae:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80055b2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80055b6:	6038      	str	r0, [r7, #0]
 80055b8:	6918      	ldr	r0, [r3, #16]
 80055ba:	f7ff fd2f 	bl	800501c <__hi0bits>
 80055be:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80055c2:	6031      	str	r1, [r6, #0]
 80055c4:	e7e1      	b.n	800558a <__d2b+0x72>
 80055c6:	bf00      	nop
 80055c8:	08005e43 	.word	0x08005e43
 80055cc:	08005eb4 	.word	0x08005eb4

080055d0 <_calloc_r>:
 80055d0:	b570      	push	{r4, r5, r6, lr}
 80055d2:	fba1 5402 	umull	r5, r4, r1, r2
 80055d6:	b934      	cbnz	r4, 80055e6 <_calloc_r+0x16>
 80055d8:	4629      	mov	r1, r5
 80055da:	f000 f875 	bl	80056c8 <_malloc_r>
 80055de:	4606      	mov	r6, r0
 80055e0:	b928      	cbnz	r0, 80055ee <_calloc_r+0x1e>
 80055e2:	4630      	mov	r0, r6
 80055e4:	bd70      	pop	{r4, r5, r6, pc}
 80055e6:	220c      	movs	r2, #12
 80055e8:	2600      	movs	r6, #0
 80055ea:	6002      	str	r2, [r0, #0]
 80055ec:	e7f9      	b.n	80055e2 <_calloc_r+0x12>
 80055ee:	462a      	mov	r2, r5
 80055f0:	4621      	mov	r1, r4
 80055f2:	f7fd fdf5 	bl	80031e0 <memset>
 80055f6:	e7f4      	b.n	80055e2 <_calloc_r+0x12>

080055f8 <_free_r>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	4605      	mov	r5, r0
 80055fc:	2900      	cmp	r1, #0
 80055fe:	d040      	beq.n	8005682 <_free_r+0x8a>
 8005600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005604:	1f0c      	subs	r4, r1, #4
 8005606:	2b00      	cmp	r3, #0
 8005608:	bfb8      	it	lt
 800560a:	18e4      	addlt	r4, r4, r3
 800560c:	f000 fb14 	bl	8005c38 <__malloc_lock>
 8005610:	4a1c      	ldr	r2, [pc, #112]	; (8005684 <_free_r+0x8c>)
 8005612:	6813      	ldr	r3, [r2, #0]
 8005614:	b933      	cbnz	r3, 8005624 <_free_r+0x2c>
 8005616:	6063      	str	r3, [r4, #4]
 8005618:	6014      	str	r4, [r2, #0]
 800561a:	4628      	mov	r0, r5
 800561c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005620:	f000 bb10 	b.w	8005c44 <__malloc_unlock>
 8005624:	42a3      	cmp	r3, r4
 8005626:	d908      	bls.n	800563a <_free_r+0x42>
 8005628:	6820      	ldr	r0, [r4, #0]
 800562a:	1821      	adds	r1, r4, r0
 800562c:	428b      	cmp	r3, r1
 800562e:	bf01      	itttt	eq
 8005630:	6819      	ldreq	r1, [r3, #0]
 8005632:	685b      	ldreq	r3, [r3, #4]
 8005634:	1809      	addeq	r1, r1, r0
 8005636:	6021      	streq	r1, [r4, #0]
 8005638:	e7ed      	b.n	8005616 <_free_r+0x1e>
 800563a:	461a      	mov	r2, r3
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	b10b      	cbz	r3, 8005644 <_free_r+0x4c>
 8005640:	42a3      	cmp	r3, r4
 8005642:	d9fa      	bls.n	800563a <_free_r+0x42>
 8005644:	6811      	ldr	r1, [r2, #0]
 8005646:	1850      	adds	r0, r2, r1
 8005648:	42a0      	cmp	r0, r4
 800564a:	d10b      	bne.n	8005664 <_free_r+0x6c>
 800564c:	6820      	ldr	r0, [r4, #0]
 800564e:	4401      	add	r1, r0
 8005650:	1850      	adds	r0, r2, r1
 8005652:	4283      	cmp	r3, r0
 8005654:	6011      	str	r1, [r2, #0]
 8005656:	d1e0      	bne.n	800561a <_free_r+0x22>
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	4401      	add	r1, r0
 800565e:	6011      	str	r1, [r2, #0]
 8005660:	6053      	str	r3, [r2, #4]
 8005662:	e7da      	b.n	800561a <_free_r+0x22>
 8005664:	d902      	bls.n	800566c <_free_r+0x74>
 8005666:	230c      	movs	r3, #12
 8005668:	602b      	str	r3, [r5, #0]
 800566a:	e7d6      	b.n	800561a <_free_r+0x22>
 800566c:	6820      	ldr	r0, [r4, #0]
 800566e:	1821      	adds	r1, r4, r0
 8005670:	428b      	cmp	r3, r1
 8005672:	bf01      	itttt	eq
 8005674:	6819      	ldreq	r1, [r3, #0]
 8005676:	685b      	ldreq	r3, [r3, #4]
 8005678:	1809      	addeq	r1, r1, r0
 800567a:	6021      	streq	r1, [r4, #0]
 800567c:	6063      	str	r3, [r4, #4]
 800567e:	6054      	str	r4, [r2, #4]
 8005680:	e7cb      	b.n	800561a <_free_r+0x22>
 8005682:	bd38      	pop	{r3, r4, r5, pc}
 8005684:	2000040c 	.word	0x2000040c

08005688 <sbrk_aligned>:
 8005688:	b570      	push	{r4, r5, r6, lr}
 800568a:	4e0e      	ldr	r6, [pc, #56]	; (80056c4 <sbrk_aligned+0x3c>)
 800568c:	460c      	mov	r4, r1
 800568e:	6831      	ldr	r1, [r6, #0]
 8005690:	4605      	mov	r5, r0
 8005692:	b911      	cbnz	r1, 800569a <sbrk_aligned+0x12>
 8005694:	f000 f9e4 	bl	8005a60 <_sbrk_r>
 8005698:	6030      	str	r0, [r6, #0]
 800569a:	4621      	mov	r1, r4
 800569c:	4628      	mov	r0, r5
 800569e:	f000 f9df 	bl	8005a60 <_sbrk_r>
 80056a2:	1c43      	adds	r3, r0, #1
 80056a4:	d00a      	beq.n	80056bc <sbrk_aligned+0x34>
 80056a6:	1cc4      	adds	r4, r0, #3
 80056a8:	f024 0403 	bic.w	r4, r4, #3
 80056ac:	42a0      	cmp	r0, r4
 80056ae:	d007      	beq.n	80056c0 <sbrk_aligned+0x38>
 80056b0:	1a21      	subs	r1, r4, r0
 80056b2:	4628      	mov	r0, r5
 80056b4:	f000 f9d4 	bl	8005a60 <_sbrk_r>
 80056b8:	3001      	adds	r0, #1
 80056ba:	d101      	bne.n	80056c0 <sbrk_aligned+0x38>
 80056bc:	f04f 34ff 	mov.w	r4, #4294967295
 80056c0:	4620      	mov	r0, r4
 80056c2:	bd70      	pop	{r4, r5, r6, pc}
 80056c4:	20000410 	.word	0x20000410

080056c8 <_malloc_r>:
 80056c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056cc:	1ccd      	adds	r5, r1, #3
 80056ce:	f025 0503 	bic.w	r5, r5, #3
 80056d2:	3508      	adds	r5, #8
 80056d4:	2d0c      	cmp	r5, #12
 80056d6:	bf38      	it	cc
 80056d8:	250c      	movcc	r5, #12
 80056da:	2d00      	cmp	r5, #0
 80056dc:	4607      	mov	r7, r0
 80056de:	db01      	blt.n	80056e4 <_malloc_r+0x1c>
 80056e0:	42a9      	cmp	r1, r5
 80056e2:	d905      	bls.n	80056f0 <_malloc_r+0x28>
 80056e4:	230c      	movs	r3, #12
 80056e6:	2600      	movs	r6, #0
 80056e8:	603b      	str	r3, [r7, #0]
 80056ea:	4630      	mov	r0, r6
 80056ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f0:	4e2e      	ldr	r6, [pc, #184]	; (80057ac <_malloc_r+0xe4>)
 80056f2:	f000 faa1 	bl	8005c38 <__malloc_lock>
 80056f6:	6833      	ldr	r3, [r6, #0]
 80056f8:	461c      	mov	r4, r3
 80056fa:	bb34      	cbnz	r4, 800574a <_malloc_r+0x82>
 80056fc:	4629      	mov	r1, r5
 80056fe:	4638      	mov	r0, r7
 8005700:	f7ff ffc2 	bl	8005688 <sbrk_aligned>
 8005704:	1c43      	adds	r3, r0, #1
 8005706:	4604      	mov	r4, r0
 8005708:	d14d      	bne.n	80057a6 <_malloc_r+0xde>
 800570a:	6834      	ldr	r4, [r6, #0]
 800570c:	4626      	mov	r6, r4
 800570e:	2e00      	cmp	r6, #0
 8005710:	d140      	bne.n	8005794 <_malloc_r+0xcc>
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	4631      	mov	r1, r6
 8005716:	4638      	mov	r0, r7
 8005718:	eb04 0803 	add.w	r8, r4, r3
 800571c:	f000 f9a0 	bl	8005a60 <_sbrk_r>
 8005720:	4580      	cmp	r8, r0
 8005722:	d13a      	bne.n	800579a <_malloc_r+0xd2>
 8005724:	6821      	ldr	r1, [r4, #0]
 8005726:	3503      	adds	r5, #3
 8005728:	1a6d      	subs	r5, r5, r1
 800572a:	f025 0503 	bic.w	r5, r5, #3
 800572e:	3508      	adds	r5, #8
 8005730:	2d0c      	cmp	r5, #12
 8005732:	bf38      	it	cc
 8005734:	250c      	movcc	r5, #12
 8005736:	4638      	mov	r0, r7
 8005738:	4629      	mov	r1, r5
 800573a:	f7ff ffa5 	bl	8005688 <sbrk_aligned>
 800573e:	3001      	adds	r0, #1
 8005740:	d02b      	beq.n	800579a <_malloc_r+0xd2>
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	442b      	add	r3, r5
 8005746:	6023      	str	r3, [r4, #0]
 8005748:	e00e      	b.n	8005768 <_malloc_r+0xa0>
 800574a:	6822      	ldr	r2, [r4, #0]
 800574c:	1b52      	subs	r2, r2, r5
 800574e:	d41e      	bmi.n	800578e <_malloc_r+0xc6>
 8005750:	2a0b      	cmp	r2, #11
 8005752:	d916      	bls.n	8005782 <_malloc_r+0xba>
 8005754:	1961      	adds	r1, r4, r5
 8005756:	42a3      	cmp	r3, r4
 8005758:	6025      	str	r5, [r4, #0]
 800575a:	bf18      	it	ne
 800575c:	6059      	strne	r1, [r3, #4]
 800575e:	6863      	ldr	r3, [r4, #4]
 8005760:	bf08      	it	eq
 8005762:	6031      	streq	r1, [r6, #0]
 8005764:	5162      	str	r2, [r4, r5]
 8005766:	604b      	str	r3, [r1, #4]
 8005768:	4638      	mov	r0, r7
 800576a:	f104 060b 	add.w	r6, r4, #11
 800576e:	f000 fa69 	bl	8005c44 <__malloc_unlock>
 8005772:	f026 0607 	bic.w	r6, r6, #7
 8005776:	1d23      	adds	r3, r4, #4
 8005778:	1af2      	subs	r2, r6, r3
 800577a:	d0b6      	beq.n	80056ea <_malloc_r+0x22>
 800577c:	1b9b      	subs	r3, r3, r6
 800577e:	50a3      	str	r3, [r4, r2]
 8005780:	e7b3      	b.n	80056ea <_malloc_r+0x22>
 8005782:	6862      	ldr	r2, [r4, #4]
 8005784:	42a3      	cmp	r3, r4
 8005786:	bf0c      	ite	eq
 8005788:	6032      	streq	r2, [r6, #0]
 800578a:	605a      	strne	r2, [r3, #4]
 800578c:	e7ec      	b.n	8005768 <_malloc_r+0xa0>
 800578e:	4623      	mov	r3, r4
 8005790:	6864      	ldr	r4, [r4, #4]
 8005792:	e7b2      	b.n	80056fa <_malloc_r+0x32>
 8005794:	4634      	mov	r4, r6
 8005796:	6876      	ldr	r6, [r6, #4]
 8005798:	e7b9      	b.n	800570e <_malloc_r+0x46>
 800579a:	230c      	movs	r3, #12
 800579c:	4638      	mov	r0, r7
 800579e:	603b      	str	r3, [r7, #0]
 80057a0:	f000 fa50 	bl	8005c44 <__malloc_unlock>
 80057a4:	e7a1      	b.n	80056ea <_malloc_r+0x22>
 80057a6:	6025      	str	r5, [r4, #0]
 80057a8:	e7de      	b.n	8005768 <_malloc_r+0xa0>
 80057aa:	bf00      	nop
 80057ac:	2000040c 	.word	0x2000040c

080057b0 <__sfputc_r>:
 80057b0:	6893      	ldr	r3, [r2, #8]
 80057b2:	b410      	push	{r4}
 80057b4:	3b01      	subs	r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	6093      	str	r3, [r2, #8]
 80057ba:	da07      	bge.n	80057cc <__sfputc_r+0x1c>
 80057bc:	6994      	ldr	r4, [r2, #24]
 80057be:	42a3      	cmp	r3, r4
 80057c0:	db01      	blt.n	80057c6 <__sfputc_r+0x16>
 80057c2:	290a      	cmp	r1, #10
 80057c4:	d102      	bne.n	80057cc <__sfputc_r+0x1c>
 80057c6:	bc10      	pop	{r4}
 80057c8:	f7fe ba00 	b.w	8003bcc <__swbuf_r>
 80057cc:	6813      	ldr	r3, [r2, #0]
 80057ce:	1c58      	adds	r0, r3, #1
 80057d0:	6010      	str	r0, [r2, #0]
 80057d2:	7019      	strb	r1, [r3, #0]
 80057d4:	4608      	mov	r0, r1
 80057d6:	bc10      	pop	{r4}
 80057d8:	4770      	bx	lr

080057da <__sfputs_r>:
 80057da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057dc:	4606      	mov	r6, r0
 80057de:	460f      	mov	r7, r1
 80057e0:	4614      	mov	r4, r2
 80057e2:	18d5      	adds	r5, r2, r3
 80057e4:	42ac      	cmp	r4, r5
 80057e6:	d101      	bne.n	80057ec <__sfputs_r+0x12>
 80057e8:	2000      	movs	r0, #0
 80057ea:	e007      	b.n	80057fc <__sfputs_r+0x22>
 80057ec:	463a      	mov	r2, r7
 80057ee:	4630      	mov	r0, r6
 80057f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057f4:	f7ff ffdc 	bl	80057b0 <__sfputc_r>
 80057f8:	1c43      	adds	r3, r0, #1
 80057fa:	d1f3      	bne.n	80057e4 <__sfputs_r+0xa>
 80057fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005800 <_vfiprintf_r>:
 8005800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005804:	460d      	mov	r5, r1
 8005806:	4614      	mov	r4, r2
 8005808:	4698      	mov	r8, r3
 800580a:	4606      	mov	r6, r0
 800580c:	b09d      	sub	sp, #116	; 0x74
 800580e:	b118      	cbz	r0, 8005818 <_vfiprintf_r+0x18>
 8005810:	6983      	ldr	r3, [r0, #24]
 8005812:	b90b      	cbnz	r3, 8005818 <_vfiprintf_r+0x18>
 8005814:	f7ff fa2c 	bl	8004c70 <__sinit>
 8005818:	4b89      	ldr	r3, [pc, #548]	; (8005a40 <_vfiprintf_r+0x240>)
 800581a:	429d      	cmp	r5, r3
 800581c:	d11b      	bne.n	8005856 <_vfiprintf_r+0x56>
 800581e:	6875      	ldr	r5, [r6, #4]
 8005820:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005822:	07d9      	lsls	r1, r3, #31
 8005824:	d405      	bmi.n	8005832 <_vfiprintf_r+0x32>
 8005826:	89ab      	ldrh	r3, [r5, #12]
 8005828:	059a      	lsls	r2, r3, #22
 800582a:	d402      	bmi.n	8005832 <_vfiprintf_r+0x32>
 800582c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800582e:	f7ff fac2 	bl	8004db6 <__retarget_lock_acquire_recursive>
 8005832:	89ab      	ldrh	r3, [r5, #12]
 8005834:	071b      	lsls	r3, r3, #28
 8005836:	d501      	bpl.n	800583c <_vfiprintf_r+0x3c>
 8005838:	692b      	ldr	r3, [r5, #16]
 800583a:	b9eb      	cbnz	r3, 8005878 <_vfiprintf_r+0x78>
 800583c:	4629      	mov	r1, r5
 800583e:	4630      	mov	r0, r6
 8005840:	f7fe fa16 	bl	8003c70 <__swsetup_r>
 8005844:	b1c0      	cbz	r0, 8005878 <_vfiprintf_r+0x78>
 8005846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005848:	07dc      	lsls	r4, r3, #31
 800584a:	d50e      	bpl.n	800586a <_vfiprintf_r+0x6a>
 800584c:	f04f 30ff 	mov.w	r0, #4294967295
 8005850:	b01d      	add	sp, #116	; 0x74
 8005852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005856:	4b7b      	ldr	r3, [pc, #492]	; (8005a44 <_vfiprintf_r+0x244>)
 8005858:	429d      	cmp	r5, r3
 800585a:	d101      	bne.n	8005860 <_vfiprintf_r+0x60>
 800585c:	68b5      	ldr	r5, [r6, #8]
 800585e:	e7df      	b.n	8005820 <_vfiprintf_r+0x20>
 8005860:	4b79      	ldr	r3, [pc, #484]	; (8005a48 <_vfiprintf_r+0x248>)
 8005862:	429d      	cmp	r5, r3
 8005864:	bf08      	it	eq
 8005866:	68f5      	ldreq	r5, [r6, #12]
 8005868:	e7da      	b.n	8005820 <_vfiprintf_r+0x20>
 800586a:	89ab      	ldrh	r3, [r5, #12]
 800586c:	0598      	lsls	r0, r3, #22
 800586e:	d4ed      	bmi.n	800584c <_vfiprintf_r+0x4c>
 8005870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005872:	f7ff faa1 	bl	8004db8 <__retarget_lock_release_recursive>
 8005876:	e7e9      	b.n	800584c <_vfiprintf_r+0x4c>
 8005878:	2300      	movs	r3, #0
 800587a:	9309      	str	r3, [sp, #36]	; 0x24
 800587c:	2320      	movs	r3, #32
 800587e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005882:	2330      	movs	r3, #48	; 0x30
 8005884:	f04f 0901 	mov.w	r9, #1
 8005888:	f8cd 800c 	str.w	r8, [sp, #12]
 800588c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005a4c <_vfiprintf_r+0x24c>
 8005890:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005894:	4623      	mov	r3, r4
 8005896:	469a      	mov	sl, r3
 8005898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800589c:	b10a      	cbz	r2, 80058a2 <_vfiprintf_r+0xa2>
 800589e:	2a25      	cmp	r2, #37	; 0x25
 80058a0:	d1f9      	bne.n	8005896 <_vfiprintf_r+0x96>
 80058a2:	ebba 0b04 	subs.w	fp, sl, r4
 80058a6:	d00b      	beq.n	80058c0 <_vfiprintf_r+0xc0>
 80058a8:	465b      	mov	r3, fp
 80058aa:	4622      	mov	r2, r4
 80058ac:	4629      	mov	r1, r5
 80058ae:	4630      	mov	r0, r6
 80058b0:	f7ff ff93 	bl	80057da <__sfputs_r>
 80058b4:	3001      	adds	r0, #1
 80058b6:	f000 80aa 	beq.w	8005a0e <_vfiprintf_r+0x20e>
 80058ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058bc:	445a      	add	r2, fp
 80058be:	9209      	str	r2, [sp, #36]	; 0x24
 80058c0:	f89a 3000 	ldrb.w	r3, [sl]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 80a2 	beq.w	8005a0e <_vfiprintf_r+0x20e>
 80058ca:	2300      	movs	r3, #0
 80058cc:	f04f 32ff 	mov.w	r2, #4294967295
 80058d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058d4:	f10a 0a01 	add.w	sl, sl, #1
 80058d8:	9304      	str	r3, [sp, #16]
 80058da:	9307      	str	r3, [sp, #28]
 80058dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058e0:	931a      	str	r3, [sp, #104]	; 0x68
 80058e2:	4654      	mov	r4, sl
 80058e4:	2205      	movs	r2, #5
 80058e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058ea:	4858      	ldr	r0, [pc, #352]	; (8005a4c <_vfiprintf_r+0x24c>)
 80058ec:	f7ff fad2 	bl	8004e94 <memchr>
 80058f0:	9a04      	ldr	r2, [sp, #16]
 80058f2:	b9d8      	cbnz	r0, 800592c <_vfiprintf_r+0x12c>
 80058f4:	06d1      	lsls	r1, r2, #27
 80058f6:	bf44      	itt	mi
 80058f8:	2320      	movmi	r3, #32
 80058fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058fe:	0713      	lsls	r3, r2, #28
 8005900:	bf44      	itt	mi
 8005902:	232b      	movmi	r3, #43	; 0x2b
 8005904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005908:	f89a 3000 	ldrb.w	r3, [sl]
 800590c:	2b2a      	cmp	r3, #42	; 0x2a
 800590e:	d015      	beq.n	800593c <_vfiprintf_r+0x13c>
 8005910:	4654      	mov	r4, sl
 8005912:	2000      	movs	r0, #0
 8005914:	f04f 0c0a 	mov.w	ip, #10
 8005918:	9a07      	ldr	r2, [sp, #28]
 800591a:	4621      	mov	r1, r4
 800591c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005920:	3b30      	subs	r3, #48	; 0x30
 8005922:	2b09      	cmp	r3, #9
 8005924:	d94e      	bls.n	80059c4 <_vfiprintf_r+0x1c4>
 8005926:	b1b0      	cbz	r0, 8005956 <_vfiprintf_r+0x156>
 8005928:	9207      	str	r2, [sp, #28]
 800592a:	e014      	b.n	8005956 <_vfiprintf_r+0x156>
 800592c:	eba0 0308 	sub.w	r3, r0, r8
 8005930:	fa09 f303 	lsl.w	r3, r9, r3
 8005934:	4313      	orrs	r3, r2
 8005936:	46a2      	mov	sl, r4
 8005938:	9304      	str	r3, [sp, #16]
 800593a:	e7d2      	b.n	80058e2 <_vfiprintf_r+0xe2>
 800593c:	9b03      	ldr	r3, [sp, #12]
 800593e:	1d19      	adds	r1, r3, #4
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	9103      	str	r1, [sp, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	bfbb      	ittet	lt
 8005948:	425b      	neglt	r3, r3
 800594a:	f042 0202 	orrlt.w	r2, r2, #2
 800594e:	9307      	strge	r3, [sp, #28]
 8005950:	9307      	strlt	r3, [sp, #28]
 8005952:	bfb8      	it	lt
 8005954:	9204      	strlt	r2, [sp, #16]
 8005956:	7823      	ldrb	r3, [r4, #0]
 8005958:	2b2e      	cmp	r3, #46	; 0x2e
 800595a:	d10c      	bne.n	8005976 <_vfiprintf_r+0x176>
 800595c:	7863      	ldrb	r3, [r4, #1]
 800595e:	2b2a      	cmp	r3, #42	; 0x2a
 8005960:	d135      	bne.n	80059ce <_vfiprintf_r+0x1ce>
 8005962:	9b03      	ldr	r3, [sp, #12]
 8005964:	3402      	adds	r4, #2
 8005966:	1d1a      	adds	r2, r3, #4
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	9203      	str	r2, [sp, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	bfb8      	it	lt
 8005970:	f04f 33ff 	movlt.w	r3, #4294967295
 8005974:	9305      	str	r3, [sp, #20]
 8005976:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005a50 <_vfiprintf_r+0x250>
 800597a:	2203      	movs	r2, #3
 800597c:	4650      	mov	r0, sl
 800597e:	7821      	ldrb	r1, [r4, #0]
 8005980:	f7ff fa88 	bl	8004e94 <memchr>
 8005984:	b140      	cbz	r0, 8005998 <_vfiprintf_r+0x198>
 8005986:	2340      	movs	r3, #64	; 0x40
 8005988:	eba0 000a 	sub.w	r0, r0, sl
 800598c:	fa03 f000 	lsl.w	r0, r3, r0
 8005990:	9b04      	ldr	r3, [sp, #16]
 8005992:	3401      	adds	r4, #1
 8005994:	4303      	orrs	r3, r0
 8005996:	9304      	str	r3, [sp, #16]
 8005998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800599c:	2206      	movs	r2, #6
 800599e:	482d      	ldr	r0, [pc, #180]	; (8005a54 <_vfiprintf_r+0x254>)
 80059a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059a4:	f7ff fa76 	bl	8004e94 <memchr>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	d03f      	beq.n	8005a2c <_vfiprintf_r+0x22c>
 80059ac:	4b2a      	ldr	r3, [pc, #168]	; (8005a58 <_vfiprintf_r+0x258>)
 80059ae:	bb1b      	cbnz	r3, 80059f8 <_vfiprintf_r+0x1f8>
 80059b0:	9b03      	ldr	r3, [sp, #12]
 80059b2:	3307      	adds	r3, #7
 80059b4:	f023 0307 	bic.w	r3, r3, #7
 80059b8:	3308      	adds	r3, #8
 80059ba:	9303      	str	r3, [sp, #12]
 80059bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059be:	443b      	add	r3, r7
 80059c0:	9309      	str	r3, [sp, #36]	; 0x24
 80059c2:	e767      	b.n	8005894 <_vfiprintf_r+0x94>
 80059c4:	460c      	mov	r4, r1
 80059c6:	2001      	movs	r0, #1
 80059c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80059cc:	e7a5      	b.n	800591a <_vfiprintf_r+0x11a>
 80059ce:	2300      	movs	r3, #0
 80059d0:	f04f 0c0a 	mov.w	ip, #10
 80059d4:	4619      	mov	r1, r3
 80059d6:	3401      	adds	r4, #1
 80059d8:	9305      	str	r3, [sp, #20]
 80059da:	4620      	mov	r0, r4
 80059dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059e0:	3a30      	subs	r2, #48	; 0x30
 80059e2:	2a09      	cmp	r2, #9
 80059e4:	d903      	bls.n	80059ee <_vfiprintf_r+0x1ee>
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0c5      	beq.n	8005976 <_vfiprintf_r+0x176>
 80059ea:	9105      	str	r1, [sp, #20]
 80059ec:	e7c3      	b.n	8005976 <_vfiprintf_r+0x176>
 80059ee:	4604      	mov	r4, r0
 80059f0:	2301      	movs	r3, #1
 80059f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80059f6:	e7f0      	b.n	80059da <_vfiprintf_r+0x1da>
 80059f8:	ab03      	add	r3, sp, #12
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	462a      	mov	r2, r5
 80059fe:	4630      	mov	r0, r6
 8005a00:	4b16      	ldr	r3, [pc, #88]	; (8005a5c <_vfiprintf_r+0x25c>)
 8005a02:	a904      	add	r1, sp, #16
 8005a04:	f7fd fc92 	bl	800332c <_printf_float>
 8005a08:	4607      	mov	r7, r0
 8005a0a:	1c78      	adds	r0, r7, #1
 8005a0c:	d1d6      	bne.n	80059bc <_vfiprintf_r+0x1bc>
 8005a0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a10:	07d9      	lsls	r1, r3, #31
 8005a12:	d405      	bmi.n	8005a20 <_vfiprintf_r+0x220>
 8005a14:	89ab      	ldrh	r3, [r5, #12]
 8005a16:	059a      	lsls	r2, r3, #22
 8005a18:	d402      	bmi.n	8005a20 <_vfiprintf_r+0x220>
 8005a1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a1c:	f7ff f9cc 	bl	8004db8 <__retarget_lock_release_recursive>
 8005a20:	89ab      	ldrh	r3, [r5, #12]
 8005a22:	065b      	lsls	r3, r3, #25
 8005a24:	f53f af12 	bmi.w	800584c <_vfiprintf_r+0x4c>
 8005a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a2a:	e711      	b.n	8005850 <_vfiprintf_r+0x50>
 8005a2c:	ab03      	add	r3, sp, #12
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	462a      	mov	r2, r5
 8005a32:	4630      	mov	r0, r6
 8005a34:	4b09      	ldr	r3, [pc, #36]	; (8005a5c <_vfiprintf_r+0x25c>)
 8005a36:	a904      	add	r1, sp, #16
 8005a38:	f7fd ff14 	bl	8003864 <_printf_i>
 8005a3c:	e7e4      	b.n	8005a08 <_vfiprintf_r+0x208>
 8005a3e:	bf00      	nop
 8005a40:	08005e74 	.word	0x08005e74
 8005a44:	08005e94 	.word	0x08005e94
 8005a48:	08005e54 	.word	0x08005e54
 8005a4c:	0800600c 	.word	0x0800600c
 8005a50:	08006012 	.word	0x08006012
 8005a54:	08006016 	.word	0x08006016
 8005a58:	0800332d 	.word	0x0800332d
 8005a5c:	080057db 	.word	0x080057db

08005a60 <_sbrk_r>:
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	2300      	movs	r3, #0
 8005a64:	4d05      	ldr	r5, [pc, #20]	; (8005a7c <_sbrk_r+0x1c>)
 8005a66:	4604      	mov	r4, r0
 8005a68:	4608      	mov	r0, r1
 8005a6a:	602b      	str	r3, [r5, #0]
 8005a6c:	f7fb fc24 	bl	80012b8 <_sbrk>
 8005a70:	1c43      	adds	r3, r0, #1
 8005a72:	d102      	bne.n	8005a7a <_sbrk_r+0x1a>
 8005a74:	682b      	ldr	r3, [r5, #0]
 8005a76:	b103      	cbz	r3, 8005a7a <_sbrk_r+0x1a>
 8005a78:	6023      	str	r3, [r4, #0]
 8005a7a:	bd38      	pop	{r3, r4, r5, pc}
 8005a7c:	20000414 	.word	0x20000414

08005a80 <__sread>:
 8005a80:	b510      	push	{r4, lr}
 8005a82:	460c      	mov	r4, r1
 8005a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a88:	f000 f8e2 	bl	8005c50 <_read_r>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	bfab      	itete	ge
 8005a90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005a92:	89a3      	ldrhlt	r3, [r4, #12]
 8005a94:	181b      	addge	r3, r3, r0
 8005a96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005a9a:	bfac      	ite	ge
 8005a9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005a9e:	81a3      	strhlt	r3, [r4, #12]
 8005aa0:	bd10      	pop	{r4, pc}

08005aa2 <__swrite>:
 8005aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aa6:	461f      	mov	r7, r3
 8005aa8:	898b      	ldrh	r3, [r1, #12]
 8005aaa:	4605      	mov	r5, r0
 8005aac:	05db      	lsls	r3, r3, #23
 8005aae:	460c      	mov	r4, r1
 8005ab0:	4616      	mov	r6, r2
 8005ab2:	d505      	bpl.n	8005ac0 <__swrite+0x1e>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005abc:	f000 f898 	bl	8005bf0 <_lseek_r>
 8005ac0:	89a3      	ldrh	r3, [r4, #12]
 8005ac2:	4632      	mov	r2, r6
 8005ac4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ac8:	81a3      	strh	r3, [r4, #12]
 8005aca:	4628      	mov	r0, r5
 8005acc:	463b      	mov	r3, r7
 8005ace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad6:	f000 b817 	b.w	8005b08 <_write_r>

08005ada <__sseek>:
 8005ada:	b510      	push	{r4, lr}
 8005adc:	460c      	mov	r4, r1
 8005ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae2:	f000 f885 	bl	8005bf0 <_lseek_r>
 8005ae6:	1c43      	adds	r3, r0, #1
 8005ae8:	89a3      	ldrh	r3, [r4, #12]
 8005aea:	bf15      	itete	ne
 8005aec:	6560      	strne	r0, [r4, #84]	; 0x54
 8005aee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005af2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005af6:	81a3      	strheq	r3, [r4, #12]
 8005af8:	bf18      	it	ne
 8005afa:	81a3      	strhne	r3, [r4, #12]
 8005afc:	bd10      	pop	{r4, pc}

08005afe <__sclose>:
 8005afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b02:	f000 b831 	b.w	8005b68 <_close_r>
	...

08005b08 <_write_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	4608      	mov	r0, r1
 8005b0e:	4611      	mov	r1, r2
 8005b10:	2200      	movs	r2, #0
 8005b12:	4d05      	ldr	r5, [pc, #20]	; (8005b28 <_write_r+0x20>)
 8005b14:	602a      	str	r2, [r5, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	f7fb fb81 	bl	800121e <_write>
 8005b1c:	1c43      	adds	r3, r0, #1
 8005b1e:	d102      	bne.n	8005b26 <_write_r+0x1e>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	b103      	cbz	r3, 8005b26 <_write_r+0x1e>
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	bd38      	pop	{r3, r4, r5, pc}
 8005b28:	20000414 	.word	0x20000414

08005b2c <__assert_func>:
 8005b2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b2e:	4614      	mov	r4, r2
 8005b30:	461a      	mov	r2, r3
 8005b32:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <__assert_func+0x2c>)
 8005b34:	4605      	mov	r5, r0
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68d8      	ldr	r0, [r3, #12]
 8005b3a:	b14c      	cbz	r4, 8005b50 <__assert_func+0x24>
 8005b3c:	4b07      	ldr	r3, [pc, #28]	; (8005b5c <__assert_func+0x30>)
 8005b3e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005b42:	9100      	str	r1, [sp, #0]
 8005b44:	462b      	mov	r3, r5
 8005b46:	4906      	ldr	r1, [pc, #24]	; (8005b60 <__assert_func+0x34>)
 8005b48:	f000 f81e 	bl	8005b88 <fiprintf>
 8005b4c:	f000 f89f 	bl	8005c8e <abort>
 8005b50:	4b04      	ldr	r3, [pc, #16]	; (8005b64 <__assert_func+0x38>)
 8005b52:	461c      	mov	r4, r3
 8005b54:	e7f3      	b.n	8005b3e <__assert_func+0x12>
 8005b56:	bf00      	nop
 8005b58:	2000000c 	.word	0x2000000c
 8005b5c:	0800601d 	.word	0x0800601d
 8005b60:	0800602a 	.word	0x0800602a
 8005b64:	08006058 	.word	0x08006058

08005b68 <_close_r>:
 8005b68:	b538      	push	{r3, r4, r5, lr}
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	4d05      	ldr	r5, [pc, #20]	; (8005b84 <_close_r+0x1c>)
 8005b6e:	4604      	mov	r4, r0
 8005b70:	4608      	mov	r0, r1
 8005b72:	602b      	str	r3, [r5, #0]
 8005b74:	f7fb fb6f 	bl	8001256 <_close>
 8005b78:	1c43      	adds	r3, r0, #1
 8005b7a:	d102      	bne.n	8005b82 <_close_r+0x1a>
 8005b7c:	682b      	ldr	r3, [r5, #0]
 8005b7e:	b103      	cbz	r3, 8005b82 <_close_r+0x1a>
 8005b80:	6023      	str	r3, [r4, #0]
 8005b82:	bd38      	pop	{r3, r4, r5, pc}
 8005b84:	20000414 	.word	0x20000414

08005b88 <fiprintf>:
 8005b88:	b40e      	push	{r1, r2, r3}
 8005b8a:	b503      	push	{r0, r1, lr}
 8005b8c:	4601      	mov	r1, r0
 8005b8e:	ab03      	add	r3, sp, #12
 8005b90:	4805      	ldr	r0, [pc, #20]	; (8005ba8 <fiprintf+0x20>)
 8005b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b96:	6800      	ldr	r0, [r0, #0]
 8005b98:	9301      	str	r3, [sp, #4]
 8005b9a:	f7ff fe31 	bl	8005800 <_vfiprintf_r>
 8005b9e:	b002      	add	sp, #8
 8005ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ba4:	b003      	add	sp, #12
 8005ba6:	4770      	bx	lr
 8005ba8:	2000000c 	.word	0x2000000c

08005bac <_fstat_r>:
 8005bac:	b538      	push	{r3, r4, r5, lr}
 8005bae:	2300      	movs	r3, #0
 8005bb0:	4d06      	ldr	r5, [pc, #24]	; (8005bcc <_fstat_r+0x20>)
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	4608      	mov	r0, r1
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	602b      	str	r3, [r5, #0]
 8005bba:	f7fb fb57 	bl	800126c <_fstat>
 8005bbe:	1c43      	adds	r3, r0, #1
 8005bc0:	d102      	bne.n	8005bc8 <_fstat_r+0x1c>
 8005bc2:	682b      	ldr	r3, [r5, #0]
 8005bc4:	b103      	cbz	r3, 8005bc8 <_fstat_r+0x1c>
 8005bc6:	6023      	str	r3, [r4, #0]
 8005bc8:	bd38      	pop	{r3, r4, r5, pc}
 8005bca:	bf00      	nop
 8005bcc:	20000414 	.word	0x20000414

08005bd0 <_isatty_r>:
 8005bd0:	b538      	push	{r3, r4, r5, lr}
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	4d05      	ldr	r5, [pc, #20]	; (8005bec <_isatty_r+0x1c>)
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	4608      	mov	r0, r1
 8005bda:	602b      	str	r3, [r5, #0]
 8005bdc:	f7fb fb55 	bl	800128a <_isatty>
 8005be0:	1c43      	adds	r3, r0, #1
 8005be2:	d102      	bne.n	8005bea <_isatty_r+0x1a>
 8005be4:	682b      	ldr	r3, [r5, #0]
 8005be6:	b103      	cbz	r3, 8005bea <_isatty_r+0x1a>
 8005be8:	6023      	str	r3, [r4, #0]
 8005bea:	bd38      	pop	{r3, r4, r5, pc}
 8005bec:	20000414 	.word	0x20000414

08005bf0 <_lseek_r>:
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	4608      	mov	r0, r1
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	4d05      	ldr	r5, [pc, #20]	; (8005c10 <_lseek_r+0x20>)
 8005bfc:	602a      	str	r2, [r5, #0]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f7fb fb4d 	bl	800129e <_lseek>
 8005c04:	1c43      	adds	r3, r0, #1
 8005c06:	d102      	bne.n	8005c0e <_lseek_r+0x1e>
 8005c08:	682b      	ldr	r3, [r5, #0]
 8005c0a:	b103      	cbz	r3, 8005c0e <_lseek_r+0x1e>
 8005c0c:	6023      	str	r3, [r4, #0]
 8005c0e:	bd38      	pop	{r3, r4, r5, pc}
 8005c10:	20000414 	.word	0x20000414

08005c14 <__ascii_mbtowc>:
 8005c14:	b082      	sub	sp, #8
 8005c16:	b901      	cbnz	r1, 8005c1a <__ascii_mbtowc+0x6>
 8005c18:	a901      	add	r1, sp, #4
 8005c1a:	b142      	cbz	r2, 8005c2e <__ascii_mbtowc+0x1a>
 8005c1c:	b14b      	cbz	r3, 8005c32 <__ascii_mbtowc+0x1e>
 8005c1e:	7813      	ldrb	r3, [r2, #0]
 8005c20:	600b      	str	r3, [r1, #0]
 8005c22:	7812      	ldrb	r2, [r2, #0]
 8005c24:	1e10      	subs	r0, r2, #0
 8005c26:	bf18      	it	ne
 8005c28:	2001      	movne	r0, #1
 8005c2a:	b002      	add	sp, #8
 8005c2c:	4770      	bx	lr
 8005c2e:	4610      	mov	r0, r2
 8005c30:	e7fb      	b.n	8005c2a <__ascii_mbtowc+0x16>
 8005c32:	f06f 0001 	mvn.w	r0, #1
 8005c36:	e7f8      	b.n	8005c2a <__ascii_mbtowc+0x16>

08005c38 <__malloc_lock>:
 8005c38:	4801      	ldr	r0, [pc, #4]	; (8005c40 <__malloc_lock+0x8>)
 8005c3a:	f7ff b8bc 	b.w	8004db6 <__retarget_lock_acquire_recursive>
 8005c3e:	bf00      	nop
 8005c40:	20000408 	.word	0x20000408

08005c44 <__malloc_unlock>:
 8005c44:	4801      	ldr	r0, [pc, #4]	; (8005c4c <__malloc_unlock+0x8>)
 8005c46:	f7ff b8b7 	b.w	8004db8 <__retarget_lock_release_recursive>
 8005c4a:	bf00      	nop
 8005c4c:	20000408 	.word	0x20000408

08005c50 <_read_r>:
 8005c50:	b538      	push	{r3, r4, r5, lr}
 8005c52:	4604      	mov	r4, r0
 8005c54:	4608      	mov	r0, r1
 8005c56:	4611      	mov	r1, r2
 8005c58:	2200      	movs	r2, #0
 8005c5a:	4d05      	ldr	r5, [pc, #20]	; (8005c70 <_read_r+0x20>)
 8005c5c:	602a      	str	r2, [r5, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	f7fb fac0 	bl	80011e4 <_read>
 8005c64:	1c43      	adds	r3, r0, #1
 8005c66:	d102      	bne.n	8005c6e <_read_r+0x1e>
 8005c68:	682b      	ldr	r3, [r5, #0]
 8005c6a:	b103      	cbz	r3, 8005c6e <_read_r+0x1e>
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	bd38      	pop	{r3, r4, r5, pc}
 8005c70:	20000414 	.word	0x20000414

08005c74 <__ascii_wctomb>:
 8005c74:	4603      	mov	r3, r0
 8005c76:	4608      	mov	r0, r1
 8005c78:	b141      	cbz	r1, 8005c8c <__ascii_wctomb+0x18>
 8005c7a:	2aff      	cmp	r2, #255	; 0xff
 8005c7c:	d904      	bls.n	8005c88 <__ascii_wctomb+0x14>
 8005c7e:	228a      	movs	r2, #138	; 0x8a
 8005c80:	f04f 30ff 	mov.w	r0, #4294967295
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	4770      	bx	lr
 8005c88:	2001      	movs	r0, #1
 8005c8a:	700a      	strb	r2, [r1, #0]
 8005c8c:	4770      	bx	lr

08005c8e <abort>:
 8005c8e:	2006      	movs	r0, #6
 8005c90:	b508      	push	{r3, lr}
 8005c92:	f000 f82b 	bl	8005cec <raise>
 8005c96:	2001      	movs	r0, #1
 8005c98:	f7fb fa9a 	bl	80011d0 <_exit>

08005c9c <_raise_r>:
 8005c9c:	291f      	cmp	r1, #31
 8005c9e:	b538      	push	{r3, r4, r5, lr}
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	460d      	mov	r5, r1
 8005ca4:	d904      	bls.n	8005cb0 <_raise_r+0x14>
 8005ca6:	2316      	movs	r3, #22
 8005ca8:	6003      	str	r3, [r0, #0]
 8005caa:	f04f 30ff 	mov.w	r0, #4294967295
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
 8005cb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005cb2:	b112      	cbz	r2, 8005cba <_raise_r+0x1e>
 8005cb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005cb8:	b94b      	cbnz	r3, 8005cce <_raise_r+0x32>
 8005cba:	4620      	mov	r0, r4
 8005cbc:	f000 f830 	bl	8005d20 <_getpid_r>
 8005cc0:	462a      	mov	r2, r5
 8005cc2:	4601      	mov	r1, r0
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cca:	f000 b817 	b.w	8005cfc <_kill_r>
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d00a      	beq.n	8005ce8 <_raise_r+0x4c>
 8005cd2:	1c59      	adds	r1, r3, #1
 8005cd4:	d103      	bne.n	8005cde <_raise_r+0x42>
 8005cd6:	2316      	movs	r3, #22
 8005cd8:	6003      	str	r3, [r0, #0]
 8005cda:	2001      	movs	r0, #1
 8005cdc:	e7e7      	b.n	8005cae <_raise_r+0x12>
 8005cde:	2400      	movs	r4, #0
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ce6:	4798      	blx	r3
 8005ce8:	2000      	movs	r0, #0
 8005cea:	e7e0      	b.n	8005cae <_raise_r+0x12>

08005cec <raise>:
 8005cec:	4b02      	ldr	r3, [pc, #8]	; (8005cf8 <raise+0xc>)
 8005cee:	4601      	mov	r1, r0
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	f7ff bfd3 	b.w	8005c9c <_raise_r>
 8005cf6:	bf00      	nop
 8005cf8:	2000000c 	.word	0x2000000c

08005cfc <_kill_r>:
 8005cfc:	b538      	push	{r3, r4, r5, lr}
 8005cfe:	2300      	movs	r3, #0
 8005d00:	4d06      	ldr	r5, [pc, #24]	; (8005d1c <_kill_r+0x20>)
 8005d02:	4604      	mov	r4, r0
 8005d04:	4608      	mov	r0, r1
 8005d06:	4611      	mov	r1, r2
 8005d08:	602b      	str	r3, [r5, #0]
 8005d0a:	f7fb fa51 	bl	80011b0 <_kill>
 8005d0e:	1c43      	adds	r3, r0, #1
 8005d10:	d102      	bne.n	8005d18 <_kill_r+0x1c>
 8005d12:	682b      	ldr	r3, [r5, #0]
 8005d14:	b103      	cbz	r3, 8005d18 <_kill_r+0x1c>
 8005d16:	6023      	str	r3, [r4, #0]
 8005d18:	bd38      	pop	{r3, r4, r5, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20000414 	.word	0x20000414

08005d20 <_getpid_r>:
 8005d20:	f7fb ba3f 	b.w	80011a2 <_getpid>

08005d24 <_init>:
 8005d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d26:	bf00      	nop
 8005d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d2a:	bc08      	pop	{r3}
 8005d2c:	469e      	mov	lr, r3
 8005d2e:	4770      	bx	lr

08005d30 <_fini>:
 8005d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d32:	bf00      	nop
 8005d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d36:	bc08      	pop	{r3}
 8005d38:	469e      	mov	lr, r3
 8005d3a:	4770      	bx	lr
